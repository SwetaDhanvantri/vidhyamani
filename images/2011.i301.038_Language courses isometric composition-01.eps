%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2011.i301.038.S.m004.c13.Language courses isometric composition-01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/6/2021
%%BoundingBox: 0 0 490 460
%%HiResBoundingBox: 0 0 490 460
%%CropBox: 0 0 490 460
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">isometric</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-02-06T15:47:26+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-02-06T15:47:26+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-02-06T15:47:26+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYqwXzT+bGm6MyC1sZ9QRmZDc0aC3JU0YRysjCQgj9kU98y8GkM+ZpiZUnXlbz&#xA;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&#xA;Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:82961e4b-cb03-b641-a2f1-8b82dc7e4c5c</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:82961e4b-cb03-b641-a2f1-8b82dc7e4c5c</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:02dd11f1-1014-c942-9ea5-ce63844a6a6c</stRef:instanceID>
            <stRef:documentID>xmp.did:02dd11f1-1014-c942-9ea5-ce63844a6a6c</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:877234a0-2c46-3949-ad59-261e819cbc77</stEvt:instanceID>
                  <stEvt:when>2014-05-04T11:44:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02dd11f1-1014-c942-9ea5-ce63844a6a6c</stEvt:instanceID>
                  <stEvt:when>2020-11-30T05:24:25+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:82961e4b-cb03-b641-a2f1-8b82dc7e4c5c</stEvt:instanceID>
                  <stEvt:when>2021-02-06T15:47:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>490.000000</stDim:w>
            <stDim:h>460.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -460 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 460 li
490 460 li
490 0 li
cp
clp
490 460 mo
0 460 li
0 0 li
490 0 li
490 460 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
63.8215 265.711 mo
61.3324 264.242 li
60.68 263.865 60.7618 263.207 61.5151 262.772 cv
83.1472 250.161 li
83.9006 249.726 85.0401 249.679 85.6925 250.056 cv
88.1817 251.525 li
88.8341 251.901 88.7523 252.559 87.9989 252.994 cv
66.3668 265.605 li
65.6135 266.04 64.4739 266.087 63.8215 265.711 cv
cp
.890196 .92549 1 rgb
f
88.3436 178.777 mo
85.7914 177.297 li
85.2888 177.005 84.5925 177.047 83.8227 177.492 cv
86.3749 178.971 li
87.1447 178.527 87.841 178.485 88.3436 178.777 cv
cp
1 .341176 .25098 rgb
f
58.0442 220.5 mo
60.5964 221.98 li
60.0996 221.691 59.7912 221.078 59.7887 220.208 cv
57.2366 218.728 li
57.239 219.598 57.5475 220.212 58.0442 220.5 cv
cp
.929412 .203922 .101961 rgb
f
59.7247 197.62 mo
57.1725 196.14 li
57.2366 218.728 li
59.7887 220.208 li
59.7247 197.62 li
cp
f
86.3749 178.971 mo
83.8227 177.492 li
59.929 191.365 li
62.4812 192.845 li
86.3749 178.971 li
cp
1 .341176 .25098 rgb
f
62.4812 192.845 mo
59.929 191.365 li
58.4042 192.246 57.1675 194.382 57.1725 196.14 cv
59.7247 197.62 li
59.7197 195.862 60.9564 193.726 62.4812 192.845 cv
cp
.929412 .203922 .101961 rgb
f
62.4812 192.845 mo
60.9564 193.726 59.7197 195.862 59.7247 197.62 cv
59.7887 220.208 li
59.7937 221.96 61.0385 222.669 62.5633 221.789 cv
86.4569 207.915 li
87.9867 207.032 89.2184 204.893 89.2134 203.141 cv
89.1494 180.553 li
89.1444 178.795 87.9046 178.088 86.3749 178.971 cv
62.4812 192.845 li
cp
.870588 .160784 .0627451 rgb
f
62.6967 201.546 mo
85.3724 188.454 li
85.7649 188.228 86.0831 187.62 86.0831 187.096 cv
86.0831 185.791 li
86.0831 185.268 85.7649 185.027 85.3724 185.254 cv
62.6967 198.346 li
62.3042 198.572 61.986 199.18 61.986 199.704 cv
61.986 201.009 li
61.986 201.532 62.3042 201.773 62.6967 201.546 cv
cp
.94902 .94902 .94902 rgb
f
62.6967 206.508 mo
85.3724 193.416 li
85.7649 193.189 86.0831 192.581 86.0831 192.058 cv
86.0831 190.753 li
86.0831 190.229 85.7649 189.989 85.3724 190.215 cv
62.6967 203.307 li
62.3042 203.534 61.986 204.142 61.986 204.665 cv
61.986 205.971 li
61.986 206.494 62.3042 206.734 62.6967 206.508 cv
cp
f
62.6967 211.47 mo
85.3724 198.378 li
85.7649 198.151 86.0831 197.543 86.0831 197.02 cv
86.0831 195.714 li
86.0831 195.191 85.7649 194.951 85.3724 195.177 cv
62.6967 208.269 li
62.3042 208.496 61.986 209.104 61.986 209.627 cv
61.986 210.932 li
61.986 211.456 62.3042 211.696 62.6967 211.47 cv
cp
f
62.6967 216.431 mo
85.3724 203.339 li
85.7649 203.113 86.0831 202.505 86.0831 201.982 cv
86.0831 200.676 li
86.0831 200.153 85.7649 199.912 85.3724 200.139 cv
62.6967 213.231 li
62.3042 213.457 61.986 214.065 61.986 214.589 cv
61.986 215.894 li
61.986 216.417 62.3042 216.658 62.6967 216.431 cv
cp
f
97.917 245.708 mo
95.478 244.299 li
94.3632 243.656 94.5031 242.532 95.7903 241.788 cv
139.098 216.631 li
140.385 215.888 142.332 215.807 143.447 216.451 cv
145.886 217.859 li
147.001 218.503 146.861 219.627 145.574 220.37 cv
102.266 245.527 li
100.979 246.27 99.0318 246.351 97.917 245.708 cv
cp
.890196 .92549 1 rgb
f
145.974 78.905 mo
145.266 78.4936 144.285 78.5526 143.201 79.1786 cv
94.4522 107.324 li
92.3044 108.564 90.5623 111.573 90.5693 114.049 cv
90.6594 145.868 li
90.663 147.094 91.0975 147.958 91.7972 148.364 cv
95.3924 150.449 li
94.6925 150.042 94.2581 149.179 94.2546 147.953 cv
94.1645 116.134 li
94.1574 113.658 95.8994 110.648 98.0474 109.408 cv
146.796 81.2632 li
147.88 80.6371 148.861 80.5781 149.569 80.9896 cv
145.974 78.905 li
cp
.937255 .941176 .94902 rgb
f
98.0474 109.408 mo
95.8995 110.648 94.1574 113.658 94.1644 116.134 cv
94.2546 147.953 li
94.2616 150.421 96.0151 151.42 98.163 150.18 cv
128.423 132.709 li
145.715 142.597 li
145.676 122.748 li
146.911 122.035 li
149.066 120.791 150.801 117.777 150.794 115.309 cv
150.704 83.4905 li
150.697 81.0144 148.951 80.0191 146.796 81.2633 cv
98.0474 109.408 li
cp
.807843 .827451 .870588 rgb
f
128.928 119.107 mo
128.928 120.592 129.977 121.19 131.27 120.443 cv
132.564 119.696 133.613 117.886 133.613 116.401 cv
133.613 114.917 132.564 114.318 131.27 115.066 cv
129.977 115.813 128.928 117.622 128.928 119.107 cv
cp
.301961 .301961 .501961 rgb
f
122.336 122.913 mo
122.336 124.397 123.385 124.995 124.679 124.248 cv
125.972 123.501 127.021 121.692 127.021 120.207 cv
127.021 118.722 125.972 118.124 124.679 118.871 cv
123.385 119.618 122.336 121.428 122.336 122.913 cv
cp
f
115.744 126.718 mo
115.744 128.203 116.793 128.801 118.087 128.054 cv
119.381 127.307 120.43 125.498 120.43 124.013 cv
120.43 122.528 119.381 121.93 118.087 122.677 cv
116.793 123.424 115.744 125.234 115.744 126.718 cv
cp
f
109.152 130.524 mo
109.152 132.009 110.201 132.607 111.495 131.86 cv
112.789 131.113 113.838 129.304 113.838 127.819 cv
113.838 126.334 112.789 125.736 111.495 126.483 cv
110.201 127.23 109.152 129.04 109.152 130.524 cv
cp
f
65.8808 340.369 mo
29.7117 319.487 li
28.2747 318.657 28.4549 317.208 30.1143 316.25 cv
78.0268 288.587 li
79.6861 287.629 82.1962 287.525 83.6332 288.355 cv
119.802 309.237 li
121.239 310.067 121.059 311.516 119.4 312.474 cv
71.4873 340.137 li
69.8279 341.095 67.3178 341.199 65.8808 340.369 cv
cp
.890196 .92549 1 rgb
f
66.7446 279.481 mo
66.6804 302.116 li
65.5684 301.474 li
65.6325 278.839 li
66.7446 279.481 li
cp
.188235 .188235 .419608 rgb
f
94.0782 280.923 mo
94.0141 303.558 li
86.4553 299.194 81.2824 299.156 66.6804 302.116 cv
66.7446 279.481 li
81.3465 276.522 86.5195 276.559 94.0782 280.923 cv
cp
.301961 .301961 .501961 rgb
f
96.6569 282.412 mo
96.5927 305.047 li
94.0141 303.558 li
94.0782 280.923 li
96.6569 282.412 li
cp
f
111.282 289.279 mo
111.218 311.914 li
109.857 312.704 li
109.921 290.07 li
111.282 289.279 li
cp
.188235 .188235 .419608 rgb
f
109.921 290.07 mo
109.857 312.704 li
50.6039 325.667 li
50.6681 303.032 li
109.921 290.07 li
cp
f
67.8419 314.598 mo
67.7777 337.233 li
35.7376 318.735 li
35.8017 296.1 li
67.8419 314.598 li
cp
.34902 .34902 .580392 rgb
f
83.7467 306.214 mo
83.6825 328.849 li
67.7777 337.233 li
67.8419 314.598 li
83.7467 306.214 li
cp
.301961 .301961 .501961 rgb
f
82.6185 305.563 mo
83.7467 306.214 li
67.8419 314.598 li
35.8017 296.1 li
36.9706 295.421 li
96.6569 282.412 li
94.0782 280.923 li
86.5195 276.559 81.3465 276.522 66.7446 279.481 cv
65.6325 278.839 li
80.3056 271.395 li
111.282 289.279 li
109.921 290.07 li
50.6681 303.032 li
52.7955 304.26 li
60.1286 308.494 71.1052 309.285 82.6185 305.563 cv
cp
.419608 .423529 .701961 rgb
f
306.32 383.026 mo
171.744 305.528 li
169.619 304.301 169.886 302.158 172.339 300.741 cv
176.744 298.198 li
179.198 296.782 182.909 296.628 185.034 297.855 cv
319.61 375.353 li
321.735 376.58 321.469 378.723 319.015 380.14 cv
314.61 382.683 li
312.157 384.099 308.445 384.253 306.32 383.026 cv
cp
.890196 .92549 1 rgb
f
318.846 339.133 mo
311.539 343.379 li
312.893 342.592 313.732 340.92 313.738 338.544 cv
321.045 334.298 li
321.038 336.674 320.199 338.347 318.846 339.133 cv
cp
.188235 .188235 .419608 rgb
f
171.281 43.2439 mo
178.588 38.998 li
179.957 38.2023 181.853 38.3155 183.948 39.525 cv
176.642 43.7709 li
174.547 42.5614 172.65 42.4482 171.281 43.2439 cv
cp
.419608 .423529 .701961 rgb
f
314.324 131.931 mo
321.63 127.685 li
321.045 334.298 li
313.738 338.544 li
314.324 131.931 li
cp
.188235 .188235 .419608 rgb
f
176.642 43.7709 mo
183.948 39.525 li
314.116 114.678 li
306.81 118.924 li
176.642 43.7709 li
cp
.419608 .423529 .701961 rgb
f
306.81 118.924 mo
314.116 114.678 li
318.28 117.081 321.644 122.901 321.63 127.685 cv
314.324 131.931 li
314.338 127.147 310.973 121.327 306.81 118.924 cv
cp
f
306.81 118.924 mo
310.973 121.327 314.338 127.147 314.324 131.931 cv
313.738 338.544 li
313.725 343.328 310.338 345.257 306.175 342.854 cv
176.007 267.701 li
171.844 265.298 168.486 259.474 168.5 254.69 cv
169.085 48.0771 li
169.099 43.2934 172.479 41.3673 176.642 43.7709 cv
306.81 118.924 li
.301961 .301961 .501961 rgb
f
306.107 119.723 mo
310.226 122.101 313.554 127.858 313.541 132.59 cv
312.961 336.983 li
312.948 341.715 309.598 343.624 305.479 341.247 cv
176.71 266.902 li
172.592 264.524 169.27 258.763 169.283 254.031 cv
169.863 49.6379 li
169.876 44.9056 173.22 43.0002 177.338 45.378 cv
306.107 119.723 li
.937255 .941176 .94902 rgb
f
298.388 136.491 mo
302.015 138.585 304.947 143.655 304.935 147.823 cv
304.424 312.736 li
304.413 316.903 301.462 318.585 297.835 316.491 cv
184.43 251.016 li
180.803 248.922 177.877 243.848 177.889 239.681 cv
178.399 74.7679 li
178.411 70.6001 181.356 68.9221 184.983 71.0162 cv
298.388 136.491 li
.458824 .780392 .921569 rgb
f
187.413 147.074 mo
187.413 103.675 li
187.413 100.16 189.551 98.5442 192.187 100.066 cv
231.555 122.795 li
234.191 124.317 236.328 128.401 236.328 131.916 cv
236.328 175.315 li
236.328 178.831 234.191 180.446 231.554 178.924 cv
192.187 156.195 li
189.551 154.673 187.413 150.59 187.413 147.074 cv
1 1 1 rgb
f
231.399 176.363 mo
192.343 153.815 li
190.81 152.929 189.567 150.554 189.567 148.51 cv
189.567 104.726 li
189.567 102.681 190.81 101.742 192.343 102.627 cv
231.399 125.176 li
232.932 126.061 234.175 128.436 234.175 130.48 cv
234.175 174.265 li
234.175 176.309 232.932 177.249 231.399 176.363 cv
.929412 .203922 .101961 rgb
f
200.243 125.396 mo
195.949 125.507 li
196.769 120.495 li
193.296 114.604 li
198.096 116.575 li
200.243 112.823 li
202.39 119.054 li
207.191 122.626 li
203.717 124.506 li
204.537 130.465 li
200.243 125.396 li
cp
1 .917647 0 rgb
f
210.942 120.15 mo
209.709 120.182 li
209.944 118.742 li
208.947 117.051 li
210.325 117.617 li
210.942 116.539 li
211.558 118.328 li
212.937 119.354 li
211.939 119.894 li
212.175 121.605 li
210.942 120.15 li
cp
f
210.942 138.215 mo
209.709 138.247 li
209.944 136.808 li
208.947 135.116 li
210.325 135.682 li
210.942 134.605 li
211.558 136.394 li
212.937 137.419 li
211.939 137.959 li
212.175 139.671 li
210.942 138.215 li
cp
f
216.19 135.611 mo
214.957 135.643 li
215.193 134.204 li
214.195 132.512 li
215.574 133.078 li
216.19 132.001 li
216.807 133.79 li
218.185 134.816 li
217.188 135.355 li
217.423 137.067 li
216.19 135.611 li
cp
f
216.19 128.585 mo
214.957 128.617 li
215.193 127.177 li
214.195 125.486 li
215.574 126.052 li
216.19 124.974 li
216.807 126.763 li
218.185 127.789 li
217.188 128.329 li
217.423 130.04 li
216.19 128.585 li
cp
f
187.413 220.677 mo
187.413 177.278 li
187.413 173.763 189.551 172.147 192.187 173.669 cv
231.555 196.398 li
234.191 197.92 236.328 202.003 236.328 205.518 cv
236.328 248.918 li
236.328 252.433 234.191 254.049 231.554 252.527 cv
192.187 229.798 li
189.551 228.276 187.413 224.192 187.413 220.677 cv
1 1 1 rgb
f
231.399 249.966 mo
192.343 227.417 li
190.81 226.532 189.567 224.157 189.567 222.113 cv
189.567 178.328 li
189.567 176.284 190.81 175.344 192.343 176.23 cv
231.399 198.779 li
232.932 199.664 234.175 202.039 234.175 204.083 cv
234.175 247.868 li
234.175 249.912 232.932 250.851 231.399 249.966 cv
.301961 .301961 .501961 rgb
f
234.176 203.817 mo
234.176 217.888 li
189.567 192.133 li
189.567 178.062 li
189.567 176.165 190.907 175.401 192.56 176.355 cv
231.348 198.696 li
233.001 199.65 234.176 201.921 234.176 203.817 cv
.94902 .94902 .94902 rgb
f
234.176 235.721 mo
234.176 248.137 li
234.176 250.033 232.835 250.797 231.183 249.843 cv
192.56 227.544 li
190.907 226.59 189.567 224.278 189.567 222.382 cv
189.567 209.966 li
234.176 235.721 li
.929412 .203922 .101961 rgb
f
246.355 181.104 mo
246.355 137.705 li
246.355 134.19 248.492 132.574 251.128 134.096 cv
290.496 156.825 li
293.132 158.347 295.269 162.43 295.269 165.945 cv
295.269 209.345 li
295.269 212.86 293.132 214.476 290.496 212.954 cv
251.129 190.225 li
248.492 188.703 246.355 184.619 246.355 181.104 cv
1 1 1 rgb
f
290.34 210.393 mo
251.284 187.844 li
249.751 186.959 248.508 184.584 248.508 182.54 cv
248.508 138.756 li
248.508 136.711 249.751 135.772 251.284 136.657 cv
290.34 159.206 li
291.873 160.091 293.116 162.466 293.116 164.51 cv
293.116 208.295 li
293.116 210.339 291.873 211.278 290.34 210.393 cv
.301961 .301961 .501961 rgb
f
293.117 164.244 mo
293.117 169.34 li
277.087 178.479 li
272.963 171.367 li
291.793 160.631 li
291.798 160.635 li
292.595 161.712 293.117 163.058 293.117 164.244 cv
.94902 .94902 .94902 rgb
f
271.504 170.624 mo
267.381 172.975 li
248.508 140.422 li
248.508 138.488 li
248.508 136.592 249.848 135.828 251.501 136.782 cv
252.077 137.115 li
271.504 170.624 li
f
293.117 204.363 mo
293.117 208.563 li
293.117 209.984 292.363 210.772 291.287 210.669 cv
276.327 184.867 li
280.451 182.516 li
293.117 204.363 li
f
293.117 164.244 mo
293.117 165.016 li
275.687 174.96 li
274.018 175.905 li
272.382 176.838 li
270.718 177.792 li
269.771 178.326 li
268.129 175.494 li
268.108 175.457 li
269.055 174.923 li
270.718 173.969 li
272.355 173.036 li
273.087 172.618 li
274.024 172.09 li
292.401 161.606 li
292.848 162.464 293.117 163.391 293.117 164.244 cv
.929412 .203922 .101961 rgb
f
275.052 181.449 mo
273.388 182.398 li
270.718 177.792 li
269.077 174.96 li
269.055 174.923 li
248.508 139.483 li
248.508 138.488 li
248.508 137.692 248.74 137.103 249.138 136.752 cv
269.071 171.134 li
270.718 173.969 li
272.382 176.838 li
275.052 181.449 li
f
293.117 205.024 mo
293.117 208.563 li
293.117 208.656 293.112 208.739 293.106 208.829 cv
274.018 175.905 li
271.644 171.81 li
272.376 171.393 li
273.308 170.856 li
293.117 205.024 li
f
266.536 177.583 mo
250.214 186.888 li
249.202 185.754 248.508 184.173 248.508 182.808 cv
248.508 178.398 li
262.412 170.471 li
266.536 177.583 li
.94902 .94902 .94902 rgb
f
273.108 172.655 mo
272.376 173.073 li
270.74 174.006 li
269.077 174.96 li
268.129 175.494 li
249.585 186.067 li
248.933 185.067 248.519 183.902 248.508 182.858 cv
267.408 172.082 li
269.071 171.134 li
271.445 169.78 li
272.376 171.393 li
273.087 172.618 li
273.108 172.655 li
.929412 .203922 .101961 rgb
f
293.117 178.957 mo
293.117 193.85 li
277.641 184.915 li
277.641 203.063 li
264.663 195.569 li
264.663 177.421 li
248.508 168.095 li
248.508 153.202 li
264.663 162.529 li
264.663 144.381 li
277.641 151.874 li
277.641 170.022 li
293.117 178.957 li
.94902 .94902 .94902 rgb
f
293.117 182.046 mo
293.117 190.761 li
274.949 180.272 li
274.949 201.509 li
267.354 197.123 li
267.354 175.887 li
248.508 165.006 li
248.508 156.29 li
267.354 167.171 li
267.354 145.935 li
274.949 150.32 li
274.949 171.557 li
293.117 182.046 li
.929412 .203922 .101961 rgb
f
246.355 254.708 mo
246.355 211.309 li
246.355 207.793 248.492 206.178 251.128 207.7 cv
290.496 230.429 li
293.132 231.951 295.269 236.034 295.269 239.549 cv
295.269 282.949 li
295.269 286.464 293.132 288.08 290.496 286.558 cv
251.129 263.829 li
248.492 262.307 246.355 258.223 246.355 254.708 cv
1 1 1 rgb
f
290.34 283.997 mo
251.284 261.448 li
249.751 260.563 248.508 258.188 248.508 256.144 cv
248.508 212.359 li
248.508 210.315 249.751 209.375 251.284 210.26 cv
290.34 232.809 li
291.873 233.695 293.116 236.069 293.116 238.114 cv
293.116 281.898 li
293.116 283.942 291.873 284.882 290.34 283.997 cv
1 .666667 0 rgb
f
293.117 237.847 mo
293.117 245.623 li
248.508 219.869 li
248.508 212.092 li
248.508 210.195 249.848 209.431 251.501 210.385 cv
290.124 232.684 li
291.777 233.638 293.117 235.95 293.117 237.847 cv
.929412 .203922 .101961 rgb
f
293.117 275.137 mo
293.117 282.167 li
293.117 284.063 291.777 284.827 290.124 283.873 cv
251.501 261.574 li
249.848 260.62 248.508 258.308 248.508 256.411 cv
248.508 249.382 li
293.117 275.137 li
f
264.938 201.096 mo
264.938 201.422 li
262.7 200.129 li
262.7 202.536 li
264.938 203.828 li
264.938 204.154 li
262.7 202.862 li
262.7 205.268 li
264.938 206.56 li
264.938 206.886 li
262.417 205.43 li
262.417 199.639 li
264.938 201.096 li
0 0 0 rgb
f
266.092 204.79 mo
266.092 207.552 li
265.806 207.388 li
265.806 203.833 li
266.092 203.997 li
266.092 204.227 li
266.35 204.081 266.65 204.107 266.992 204.304 cv
267.358 204.515 267.654 204.818 267.884 205.214 cv
268.113 205.611 268.231 206.009 268.238 206.413 cv
268.238 208.791 li
267.954 208.627 li
267.954 206.279 li
267.954 205.976 267.86 205.664 267.668 205.341 cv
267.478 205.017 267.253 204.78 266.992 204.63 cv
266.73 204.48 266.507 204.457 266.319 204.555 cv
266.214 204.614 266.136 204.691 266.092 204.79 cv
f
272.241 208.878 mo
272.185 208.533 272.056 208.186 271.85 207.829 cv
271.568 207.346 271.23 206.992 270.836 206.764 cv
270.442 206.534 270.105 206.502 269.823 206.661 cv
269.544 206.818 269.406 207.126 269.406 207.581 cv
269.406 208.033 269.544 208.5 269.823 208.983 cv
270.105 209.466 270.442 209.82 270.836 210.05 cv
271.23 210.278 271.568 210.311 271.85 210.151 cv
272.054 210.036 272.185 209.842 272.241 209.565 cv
272.241 208.878 li
272.234 210.393 mo
272.065 210.519 li
271.725 210.712 271.317 210.672 270.836 210.395 cv
270.36 210.118 269.952 209.689 269.612 209.105 cv
269.275 208.519 269.106 207.953 269.106 207.407 cv
269.106 206.856 269.275 206.485 269.612 206.293 cv
269.952 206.103 270.36 206.145 270.836 206.42 cv
271.317 206.696 271.725 207.126 272.065 207.707 cv
272.129 207.822 272.187 207.937 272.244 208.052 cv
272.244 207.55 li
272.527 207.714 li
272.527 210.475 li
272.527 211.009 272.363 211.371 272.033 211.558 cv
271.693 211.751 271.287 211.708 270.808 211.434 cv
270.33 211.157 269.919 210.726 269.582 210.142 cv
269.511 210.022 269.45 209.905 269.396 209.785 cv
269.697 209.837 li
269.795 210.02 li
270.077 210.503 270.412 210.859 270.808 211.087 cv
271.2 211.314 271.538 211.347 271.819 211.188 cv
272.073 211.042 272.211 210.777 272.234 210.393 cv
f
273.773 206.197 mo
273.773 211.987 li
273.489 211.823 li
273.489 206.033 li
273.773 206.197 li
f
275.065 209.178 mo
275.065 212.733 li
274.779 212.569 li
274.779 209.014 li
275.065 209.178 li
275.121 208.045 mo
275.178 208.141 275.206 208.233 275.206 208.324 cv
275.206 208.415 275.178 208.477 275.121 208.505 cv
274.922 208.486 li
274.845 208.439 274.779 208.371 274.72 208.275 cv
274.666 208.181 274.638 208.087 274.638 207.996 cv
274.638 207.904 274.666 207.846 274.72 207.815 cv
274.922 207.836 li
274.999 207.881 275.065 207.951 275.121 208.045 cv
f
276.925 211.98 mo
276.683 211.69 276.517 211.467 276.423 211.305 cv
276.28 211.056 276.205 210.812 276.205 210.58 cv
276.205 210.343 276.28 210.184 276.423 210.1 cv
276.569 210.015 276.744 210.034 276.946 210.151 cv
277.155 210.268 277.324 210.444 277.46 210.676 cv
277.589 210.904 277.654 211.113 277.654 211.307 cv
277.654 211.324 li
277.408 211.296 li
277.385 211.099 277.338 210.934 277.258 210.796 cv
277.178 210.658 277.075 210.554 276.946 210.479 cv
276.822 210.407 276.714 210.395 276.622 210.447 cv
276.533 210.496 276.486 210.594 276.486 210.742 cv
276.486 210.888 276.533 211.038 276.622 211.192 cv
276.674 211.284 276.787 211.441 276.958 211.661 cv
277.225 211.985 277.415 212.245 277.53 212.44 cv
277.708 212.752 277.797 213.05 277.797 213.338 cv
277.797 213.632 277.708 213.831 277.53 213.934 cv
277.352 214.037 277.136 214.016 276.88 213.868 cv
276.627 213.721 276.411 213.493 276.233 213.184 cv
276.052 212.876 275.963 212.597 275.963 212.351 cv
276.245 212.431 li
276.245 212.642 276.308 212.855 276.43 213.069 cv
276.557 213.284 276.707 213.444 276.88 213.542 cv
277.054 213.643 277.204 213.66 277.331 213.589 cv
277.455 213.519 277.518 213.381 277.518 213.177 cv
277.518 212.975 277.457 212.768 277.333 212.555 cv
277.265 212.438 277.129 212.248 276.925 211.98 cv
f
278.602 208.985 mo
278.886 209.15 li
278.886 211.57 li
279.127 211.443 279.416 211.476 279.751 211.671 cv
280.115 211.882 280.415 212.187 280.645 212.581 cv
280.872 212.975 280.99 213.374 280.997 213.779 cv
280.997 216.158 li
280.713 215.993 li
280.713 213.646 li
280.713 213.343 280.617 213.031 280.427 212.708 cv
280.237 212.384 280.012 212.147 279.751 211.997 cv
279.491 211.847 279.266 211.821 279.076 211.922 cv
278.886 212.112 li
278.886 214.94 li
278.602 214.776 li
278.602 208.985 li
f
210.182 172.637 mo
207.606 171.15 li
207.606 168.829 li
210.182 170.316 li
210.182 172.637 li
204.585 169.406 mo
204.585 167.085 li
207.161 168.572 li
207.161 170.893 li
204.585 169.406 li
210.182 169.805 mo
207.606 168.318 li
207.606 167.479 li
207.961 167.684 li
207.961 167.385 li
207.606 167.18 li
207.161 166.923 li
207.161 167.222 li
207.161 168.061 li
204.585 166.574 li
204.585 166.56 li
204.139 166.302 li
204.139 166.316 li
204.139 166.828 li
204.139 169.149 li
204.139 169.66 li
204.139 170.421 li
204.585 170.679 li
204.585 169.917 li
207.161 171.404 li
207.161 174.368 li
207.606 174.625 li
207.606 171.662 li
210.182 173.149 li
210.182 173.91 li
210.627 174.167 li
210.627 173.406 li
210.627 172.895 li
210.627 170.574 li
210.627 170.062 li
210.627 170.048 li
210.182 169.791 li
210.182 169.805 li
f
213.671 172.331 mo
217.311 174.433 li
216.837 175.205 216.22 175.805 215.491 176.219 cv
214.762 174.963 214.145 173.651 213.671 172.331 cv
219.602 181.482 mo
218.223 180.192 216.949 178.599 215.873 176.866 cv
216.704 176.393 217.402 175.695 217.915 174.781 cv
218.814 175.3 li
218.814 174.789 li
215.904 173.109 li
215.904 172.27 li
216.259 172.475 li
216.259 172.176 li
215.904 171.971 li
215.459 171.714 li
215.459 172.013 li
215.459 172.852 li
212.326 171.043 li
212.326 171.554 li
213.067 171.982 li
213.58 173.489 214.277 174.992 215.109 176.425 cv
214.033 176.915 212.759 177.037 211.38 176.735 cv
211.539 177.412 li
213.002 177.733 214.353 177.599 215.491 177.073 cv
216.629 178.913 217.98 180.607 219.443 181.976 cv
219.602 181.482 li
f
263.322 275.985 mo
263.322 276.309 li
261.085 275.019 li
261.085 277.425 li
263.322 278.717 li
263.322 279.043 li
261.085 277.751 li
261.085 280.158 li
263.322 281.45 li
263.322 281.776 li
260.801 280.319 li
260.801 274.529 li
263.322 275.985 li
cp
f
265.041 280.939 mo
264.799 280.65 264.633 280.427 264.539 280.265 cv
264.394 280.017 264.321 279.775 264.321 279.541 cv
264.321 279.304 264.394 279.144 264.539 279.06 cv
264.685 278.975 264.861 278.992 265.062 279.109 cv
265.271 279.231 265.44 279.405 265.576 279.637 cv
265.705 279.864 265.771 280.075 265.771 280.268 cv
265.771 280.286 li
265.524 280.256 li
265.501 280.059 265.454 279.895 265.374 279.756 cv
265.294 279.62 265.191 279.513 265.062 279.44 cv
264.938 279.367 264.83 279.355 264.738 279.405 cv
264.649 279.456 264.603 279.555 264.603 279.703 cv
264.603 279.846 264.649 279.998 264.738 280.153 cv
264.79 280.244 264.903 280.399 265.074 280.622 cv
265.341 280.945 265.531 281.206 265.646 281.401 cv
265.824 281.712 265.914 282.01 265.914 282.299 cv
265.914 282.592 265.824 282.791 265.646 282.895 cv
265.468 282.998 265.252 282.977 264.996 282.829 cv
264.741 282.681 264.527 282.454 264.347 282.144 cv
264.169 281.834 264.079 281.558 264.079 281.311 cv
264.361 281.389 li
264.361 281.602 264.424 281.816 264.546 282.029 cv
264.673 282.245 264.823 282.402 264.996 282.503 cv
265.17 282.604 265.32 282.618 265.447 282.55 cv
265.571 282.479 265.634 282.341 265.634 282.137 cv
265.634 281.935 265.573 281.729 265.449 281.516 cv
265.379 281.398 265.245 281.208 265.041 280.939 cv
cp
f
267.004 281.675 mo
267.004 282.355 li
267.06 282.698 267.189 283.047 267.396 283.401 cv
267.675 283.884 268.013 284.241 268.409 284.468 cv
268.803 284.696 269.141 284.733 269.42 284.571 cv
269.699 284.412 269.84 284.107 269.84 283.652 cv
269.84 283.199 269.699 282.73 269.42 282.247 cv
269.141 281.766 268.803 281.41 268.409 281.182 cv
268.013 280.955 267.675 280.92 267.396 281.079 cv
267.189 281.197 267.06 281.396 267.004 281.675 cv
cp
266.72 280.183 mo
267.004 280.348 li
267.004 280.847 li
267.182 280.711 li
267.522 280.521 267.931 280.563 268.409 280.84 cv
268.888 281.117 269.296 281.544 269.633 282.128 cv
269.971 282.709 270.14 283.275 270.14 283.826 cv
270.14 284.372 269.971 284.743 269.633 284.937 cv
269.296 285.132 268.888 285.09 268.409 284.813 cv
267.931 284.536 267.522 284.107 267.182 283.523 cv
267.117 283.406 267.058 283.293 267.004 283.181 cv
267.004 285.259 li
266.72 285.095 li
266.72 280.183 li
cp
f
273.986 286.368 mo
273.986 285.723 li
273.932 285.376 273.803 285.019 273.592 284.658 cv
273.311 284.175 272.973 283.819 272.579 283.591 cv
272.185 283.364 271.847 283.328 271.566 283.488 cv
271.287 283.647 271.148 283.955 271.148 284.407 cv
271.148 284.862 271.287 285.329 271.566 285.81 cv
271.847 286.291 272.185 286.645 272.579 286.875 cv
272.973 287.102 273.311 287.135 273.592 286.975 cv
273.803 286.858 273.932 286.654 273.986 286.368 cv
cp
274.27 288.096 mo
273.986 287.932 li
273.986 287.208 li
273.808 287.346 li
273.468 287.541 273.06 287.498 272.579 287.222 cv
272.103 286.947 271.695 286.516 271.355 285.932 cv
271.017 285.348 270.848 284.783 270.848 284.234 cv
270.848 283.685 271.017 283.312 271.355 283.12 cv
271.695 282.927 272.103 282.97 272.579 283.244 cv
273.06 283.521 273.468 283.95 273.808 284.536 cv
273.871 284.649 273.93 284.764 273.986 284.881 cv
273.986 284.377 li
274.27 284.541 li
274.27 288.096 li
cp
f
276.416 284.792 mo
276.573 285.029 276.704 285.177 276.808 285.235 cv
276.822 285.245 li
276.927 285.296 277 285.237 277.042 285.066 cv
277.26 285.193 li
277.216 285.479 277.113 285.601 276.946 285.564 cv
276.815 285.507 li
276.695 285.439 276.576 285.315 276.454 285.132 cv
276.294 284.9 276.165 284.752 276.062 284.693 cv
276.046 284.684 li
275.942 284.63 275.867 284.689 275.825 284.86 cv
275.605 284.733 li
275.651 284.449 275.755 284.325 275.919 284.365 cv
276.052 284.419 li
276.172 284.489 276.294 284.614 276.416 284.792 cv
cp
275.501 286.044 mo
275.501 288.807 li
275.218 288.643 li
275.218 285.087 li
275.501 285.252 li
275.501 285.479 li
275.759 285.334 276.06 285.362 276.402 285.559 cv
276.768 285.77 277.066 286.075 277.296 286.469 cv
277.523 286.865 277.643 287.264 277.647 287.667 cv
277.647 290.046 li
277.364 289.881 li
277.364 287.534 li
277.364 287.231 277.27 286.919 277.08 286.595 cv
276.888 286.272 276.662 286.035 276.402 285.885 cv
276.142 285.735 275.917 285.709 275.729 285.812 cv
275.626 285.868 275.548 285.946 275.501 286.044 cv
cp
f
279.125 287.853 mo
278.844 288.01 278.705 288.317 278.705 288.77 cv
278.705 289.225 278.844 289.691 279.125 290.172 cv
279.402 290.653 279.742 291.009 280.136 291.237 cv
280.532 291.464 280.87 291.5 281.149 291.342 cv
281.428 291.183 281.569 290.878 281.569 290.423 cv
281.569 289.97 281.428 289.501 281.149 289.021 cv
280.87 288.537 280.532 288.183 280.136 287.953 cv
279.742 287.726 279.402 287.691 279.125 287.853 cv
cp
280.136 287.606 mo
280.614 287.883 281.025 288.312 281.362 288.899 cv
281.7 289.48 281.869 290.048 281.869 290.597 cv
281.869 291.146 281.7 291.516 281.362 291.708 cv
281.025 291.903 280.614 291.861 280.136 291.584 cv
279.66 291.31 279.252 290.878 278.914 290.297 cv
278.574 289.71 278.405 289.145 278.405 288.598 cv
278.405 288.047 278.574 287.674 278.914 287.482 cv
279.252 287.29 279.66 287.332 280.136 287.606 cv
cp
f
282.91 287.294 mo
282.91 293.085 li
282.626 292.921 li
282.626 287.13 li
282.91 287.294 li
cp
f
201.196 240.444 mo
201.196 243.568 li
202.052 244.063 li
202.427 244.278 202.748 244.311 203.014 244.161 cv
203.281 244.009 203.412 243.715 203.412 243.284 cv
203.412 242.852 203.281 242.409 203.014 241.949 cv
202.748 241.494 202.427 241.157 202.052 240.941 cv
201.196 240.444 li
201.196 243.898 mo
201.196 245.906 li
200.912 245.742 li
200.912 239.951 li
202.235 240.716 li
202.622 240.999 202.948 241.372 203.218 241.837 cv
203.539 242.39 203.701 242.93 203.701 243.45 cv
203.701 243.976 203.539 244.327 203.218 244.511 cv
202.896 244.693 202.507 244.656 202.052 244.393 cv
201.196 243.898 li
f
204.604 249.229 mo
204.285 249.044 li
205.103 247.503 li
203.926 243.929 li
204.245 244.112 li
205.26 247.182 li
206.283 245.289 li
206.6 245.472 li
204.604 249.229 li
f
209.78 250.008 mo
210.08 250.304 li
209.892 250.447 li
209.557 250.641 209.147 250.599 208.666 250.322 cv
208.19 250.045 207.782 249.616 207.444 249.032 cv
207.104 248.448 206.935 247.881 206.935 247.332 cv
206.935 246.783 207.104 246.413 207.444 246.22 cv
207.782 246.026 208.19 246.068 208.666 246.344 cv
209.147 246.621 209.557 247.05 209.892 247.634 cv
209.965 247.756 210.026 247.874 210.08 247.989 cv
209.78 247.942 li
209.679 247.754 li
209.4 247.273 209.062 246.919 208.666 246.692 cv
208.274 246.464 207.937 246.429 207.657 246.588 cv
207.378 246.748 207.237 247.053 207.237 247.506 cv
207.237 247.96 207.378 248.427 207.657 248.91 cv
207.937 249.393 208.274 249.748 208.666 249.973 cv
209.062 250.203 209.4 250.238 209.679 250.078 cv
209.78 250.008 li
f
213.493 252.152 mo
213.793 252.447 li
213.605 252.59 li
213.27 252.785 212.859 252.743 212.379 252.466 cv
211.902 252.189 211.494 251.76 211.157 251.176 cv
210.817 250.592 210.648 250.024 210.648 249.476 cv
210.648 248.927 210.817 248.556 211.157 248.364 cv
211.494 248.169 211.902 248.211 212.379 248.488 cv
212.859 248.765 213.27 249.194 213.605 249.778 cv
213.678 249.9 213.739 250.017 213.793 250.132 cv
213.493 250.085 li
213.392 249.898 li
213.113 249.417 212.775 249.063 212.379 248.835 cv
211.987 248.608 211.649 248.573 211.37 248.732 cv
211.091 248.892 210.95 249.196 210.95 249.649 cv
210.95 250.104 211.091 250.571 211.37 251.054 cv
211.649 251.537 211.987 251.891 212.379 252.116 cv
212.775 252.346 213.113 252.382 213.392 252.222 cv
213.493 252.152 li
f
216.302 251.073 mo
215.538 251.718 li
216.753 254.889 li
216.405 254.687 li
215.35 251.87 li
214.722 252.311 li
214.722 253.716 li
214.433 253.55 li
214.433 249.994 li
214.722 250.16 li
214.722 251.791 li
215.936 250.862 li
216.302 251.073 li
f
217.032 251.495 mo
217.313 251.657 li
217.313 254.668 li
219.293 252.801 li
219.597 252.977 li
219.597 256.53 li
219.316 256.369 li
219.316 253.331 li
217.313 255.208 li
217.313 255.212 li
217.032 255.048 li
217.032 251.495 li
f
221.016 252.508 mo
221.033 252.644 221.08 252.783 221.162 252.921 cv
221.263 253.094 221.385 253.223 221.528 253.306 cv
221.668 253.385 221.79 253.399 221.891 253.343 cv
221.973 253.296 222.02 253.216 222.034 253.094 cv
222.264 253.228 li
222.248 253.418 222.177 253.55 222.051 253.622 cv
221.908 253.707 221.732 253.688 221.528 253.568 cv
221.319 253.449 221.143 253.266 221.002 253.017 cv
220.864 252.778 220.791 252.564 220.782 252.372 cv
221.016 252.508 li
220.24 253.348 mo
220.522 253.51 li
220.522 256.521 li
222.503 254.654 li
222.806 254.83 li
222.806 258.383 li
222.525 258.221 li
222.525 255.184 li
220.522 257.06 li
220.522 257.065 li
220.24 256.901 li
220.24 253.348 li
f
180.617 247.407 mo
178.958 245.079 177.882 242.215 177.888 239.683 cv
177.906 234.099 li
177.889 239.681 li
177.882 242.212 178.959 245.078 180.617 247.407 cv
304.659 236.988 mo
304.741 210.308 li
304.66 236.988 li
.956863 .964706 .968627 rgb
f
205.753 263.319 mo
184.43 251.014 li
183.005 250.192 181.69 248.911 180.617 247.407 cv
178.959 245.078 177.882 242.212 177.889 239.681 cv
177.906 234.099 li
177.93 226.788 li
188.01 224.104 li
188.824 226.532 190.39 228.76 192.187 229.798 cv
231.554 252.527 li
232.228 252.916 232.868 253.1 233.449 253.1 cv
235.143 253.1 236.328 251.535 236.328 248.918 cv
236.328 211.241 li
247.061 208.384 li
246.613 209.094 246.355 210.087 246.355 211.309 cv
246.355 252.51 li
205.753 263.319 li
222.525 255.184 mo
222.525 258.221 li
222.806 258.383 li
222.806 254.83 li
222.503 254.654 li
220.522 256.521 li
220.522 253.51 li
220.24 253.348 li
220.24 256.901 li
220.522 257.065 li
220.522 257.06 li
222.525 255.184 li
219.316 253.331 mo
219.316 256.369 li
219.597 256.53 li
219.597 252.977 li
219.293 252.801 li
217.313 254.668 li
217.313 251.657 li
217.032 251.495 li
217.032 255.048 li
217.313 255.212 li
217.313 255.208 li
219.316 253.331 li
216.753 254.889 mo
216.753 254.889 li
215.538 251.718 li
216.302 251.073 li
215.936 250.862 li
214.722 251.791 li
214.722 250.16 li
214.433 249.994 li
214.433 253.55 li
214.722 253.716 li
214.722 252.311 li
215.35 251.87 li
216.405 254.687 li
216.753 254.889 li
220.782 252.372 mo
220.791 252.564 220.864 252.778 221.002 253.017 cv
221.143 253.266 221.319 253.449 221.528 253.568 cv
221.648 253.639 221.758 253.674 221.858 253.674 cv
221.928 253.674 221.992 253.657 222.051 253.622 cv
222.177 253.55 222.248 253.418 222.264 253.228 cv
222.034 253.094 li
222.02 253.216 221.973 253.296 221.891 253.343 cv
221.85 253.366 221.806 253.377 221.758 253.377 cv
221.688 253.377 221.611 253.353 221.528 253.306 cv
221.385 253.223 221.263 253.094 221.162 252.921 cv
221.08 252.783 221.033 252.644 221.016 252.508 cv
220.782 252.372 li
211.609 248.244 mo
211.447 248.244 211.296 248.284 211.157 248.364 cv
210.817 248.556 210.648 248.927 210.648 249.476 cv
210.648 250.024 210.817 250.592 211.157 251.176 cv
211.494 251.76 211.902 252.189 212.379 252.466 cv
212.661 252.629 212.92 252.71 213.153 252.71 cv
213.316 252.71 213.467 252.67 213.605 252.59 cv
213.793 252.447 li
213.493 252.152 li
213.392 252.222 li
213.277 252.287 213.153 252.32 213.019 252.32 cv
212.826 252.32 212.613 252.252 212.379 252.116 cv
211.987 251.891 211.649 251.537 211.37 251.054 cv
211.091 250.571 210.95 250.104 210.95 249.649 cv
210.95 249.196 211.091 248.892 211.37 248.732 cv
211.485 248.667 211.609 248.634 211.743 248.634 cv
211.936 248.634 212.148 248.701 212.379 248.835 cv
212.775 249.063 213.113 249.417 213.392 249.898 cv
213.493 250.085 li
213.793 250.132 li
213.739 250.017 213.678 249.9 213.605 249.778 cv
213.27 249.194 212.859 248.765 212.379 248.488 cv
212.098 248.325 211.842 248.244 211.609 248.244 cv
207.897 246.1 mo
207.734 246.1 207.583 246.14 207.444 246.22 cv
207.104 246.413 206.935 246.783 206.935 247.332 cv
206.935 247.881 207.104 248.448 207.444 249.032 cv
207.782 249.616 208.19 250.045 208.666 250.322 cv
208.949 250.485 209.207 250.567 209.44 250.567 cv
209.604 250.567 209.754 250.527 209.892 250.447 cv
210.08 250.304 li
209.78 250.008 li
209.679 250.078 li
209.565 250.144 209.44 250.176 209.306 250.176 cv
209.113 250.176 208.9 250.109 208.666 249.973 cv
208.274 249.748 207.937 249.393 207.657 248.91 cv
207.378 248.427 207.237 247.96 207.237 247.506 cv
207.237 247.053 207.378 246.748 207.657 246.588 cv
207.772 246.523 207.897 246.49 208.031 246.49 cv
208.223 246.49 208.435 246.558 208.666 246.692 cv
209.062 246.919 209.4 247.273 209.679 247.754 cv
209.78 247.942 li
210.08 247.989 li
210.026 247.874 209.965 247.756 209.892 247.634 cv
209.557 247.05 209.147 246.621 208.666 246.344 cv
208.386 246.182 208.129 246.1 207.897 246.1 cv
203.926 243.929 mo
205.103 247.503 li
204.285 249.044 li
204.604 249.229 li
206.6 245.472 li
206.283 245.289 li
205.26 247.182 li
204.245 244.112 li
203.926 243.929 li
200.912 239.951 mo
200.912 245.742 li
201.196 245.906 li
201.196 243.898 li
202.052 244.393 li
202.319 244.547 202.563 244.624 202.785 244.624 cv
202.941 244.624 203.085 244.586 203.218 244.511 cv
203.539 244.327 203.701 243.976 203.701 243.45 cv
203.701 242.93 203.539 242.39 203.218 241.837 cv
202.948 241.372 202.622 240.999 202.235 240.716 cv
200.912 239.951 li
202.659 244.253 mo
202.476 244.253 202.273 244.19 202.052 244.063 cv
201.196 243.568 li
201.196 240.444 li
202.052 240.941 li
202.427 241.157 202.748 241.494 203.014 241.949 cv
203.281 242.409 203.412 242.852 203.412 243.284 cv
203.412 243.715 203.281 244.009 203.014 244.161 cv
202.905 244.223 202.787 244.253 202.659 244.253 cv
295.269 239.488 mo
295.245 235.987 293.117 231.942 290.496 230.429 cv
251.128 207.7 li
250.954 207.599 250.782 207.512 250.612 207.438 cv
262.417 204.296 li
262.417 205.43 li
264.938 206.886 li
264.938 206.56 li
262.7 205.268 li
262.7 204.22 li
264.31 203.791 li
264.938 204.154 li
264.938 203.828 li
264.697 203.689 li
271.371 201.912 li
290.496 212.954 li
291.169 213.343 291.81 213.527 292.391 213.527 cv
294.084 213.527 295.269 211.962 295.269 209.345 cv
295.269 195.55 li
304.794 193.014 li
304.741 210.308 li
304.659 236.988 li
295.269 239.488 li
279.32 211.861 mo
279.451 211.861 279.595 211.907 279.751 211.997 cv
280.012 212.147 280.237 212.384 280.427 212.708 cv
280.617 213.031 280.713 213.343 280.713 213.646 cv
280.713 215.993 li
280.997 216.158 li
280.997 213.779 li
280.99 213.374 280.872 212.975 280.645 212.581 cv
280.415 212.187 280.115 211.882 279.751 211.671 cv
279.549 211.553 279.363 211.495 279.195 211.495 cv
279.084 211.495 278.981 211.52 278.886 211.57 cv
278.886 209.15 li
278.602 208.985 li
278.602 214.776 li
278.886 214.94 li
278.886 212.112 li
279.076 211.922 li
279.152 211.882 279.233 211.861 279.32 211.861 cv
275.963 212.351 mo
275.963 212.597 276.052 212.876 276.233 213.184 cv
276.411 213.493 276.627 213.721 276.88 213.868 cv
277.03 213.955 277.167 213.998 277.29 213.998 cv
277.376 213.998 277.456 213.977 277.53 213.934 cv
277.708 213.831 277.797 213.632 277.797 213.338 cv
277.797 213.05 277.708 212.752 277.53 212.44 cv
277.415 212.245 277.225 211.985 276.958 211.661 cv
276.787 211.441 276.674 211.284 276.622 211.192 cv
276.533 211.038 276.486 210.888 276.486 210.742 cv
276.486 210.594 276.533 210.496 276.622 210.447 cv
276.66 210.425 276.7 210.415 276.743 210.415 cv
276.805 210.415 276.873 210.437 276.946 210.479 cv
277.075 210.554 277.178 210.658 277.258 210.796 cv
277.338 210.934 277.385 211.099 277.408 211.296 cv
277.654 211.324 li
277.654 211.307 li
277.654 211.113 277.589 210.904 277.46 210.676 cv
277.324 210.444 277.155 210.268 276.946 210.151 cv
276.828 210.082 276.718 210.047 276.619 210.047 cv
276.548 210.047 276.483 210.065 276.423 210.1 cv
276.28 210.184 276.205 210.343 276.205 210.58 cv
276.205 210.812 276.28 211.056 276.423 211.305 cv
276.517 211.467 276.683 211.69 276.925 211.98 cv
277.129 212.248 277.265 212.438 277.333 212.555 cv
277.457 212.768 277.518 212.975 277.518 213.177 cv
277.518 213.381 277.455 213.519 277.331 213.589 cv
277.279 213.618 277.224 213.632 277.164 213.632 cv
277.078 213.632 276.983 213.602 276.88 213.542 cv
276.707 213.444 276.557 213.284 276.43 213.069 cv
276.308 212.855 276.245 212.642 276.245 212.431 cv
275.963 212.351 li
274.779 209.014 mo
274.779 212.569 li
275.065 212.733 li
275.065 209.178 li
274.779 209.014 li
273.489 206.033 mo
273.489 211.823 li
273.773 211.987 li
273.773 206.197 li
273.489 206.033 li
269.396 209.785 mo
269.45 209.905 269.511 210.022 269.582 210.142 cv
269.919 210.726 270.33 211.157 270.808 211.434 cv
271.09 211.596 271.347 211.677 271.58 211.677 cv
271.742 211.677 271.893 211.637 272.033 211.558 cv
272.363 211.371 272.527 211.009 272.527 210.475 cv
272.527 207.714 li
272.244 207.55 li
272.244 208.052 li
272.187 207.937 272.129 207.822 272.065 207.707 cv
271.725 207.126 271.317 206.696 270.836 206.42 cv
270.555 206.257 270.297 206.176 270.064 206.176 cv
269.902 206.176 269.751 206.215 269.612 206.293 cv
269.275 206.485 269.106 206.856 269.106 207.407 cv
269.106 207.953 269.275 208.519 269.612 209.105 cv
269.952 209.689 270.36 210.118 270.836 210.395 cv
271.119 210.558 271.376 210.638 271.61 210.638 cv
271.773 210.638 271.925 210.599 272.065 210.519 cv
272.234 210.393 li
272.211 210.777 272.073 211.042 271.819 211.188 cv
271.703 211.254 271.577 211.287 271.441 211.287 cv
271.249 211.287 271.038 211.22 270.808 211.087 cv
270.412 210.859 270.077 210.503 269.795 210.02 cv
269.697 209.837 li
269.396 209.785 li
266.562 204.496 mo
266.692 204.496 266.835 204.54 266.992 204.63 cv
267.253 204.78 267.478 205.017 267.668 205.341 cv
267.86 205.664 267.954 205.976 267.954 206.279 cv
267.954 208.627 li
268.238 208.791 li
268.238 206.413 li
268.231 206.009 268.113 205.611 267.884 205.214 cv
267.654 204.818 267.358 204.515 266.992 204.304 cv
266.795 204.191 266.612 204.134 266.443 204.134 cv
266.319 204.134 266.201 204.165 266.092 204.227 cv
266.092 203.997 li
265.806 203.833 li
265.806 207.388 li
266.092 207.552 li
266.092 204.79 li
266.136 204.691 266.214 204.614 266.319 204.555 cv
266.395 204.516 266.475 204.496 266.562 204.496 cv
274.72 207.815 mo
274.666 207.846 274.638 207.904 274.638 207.996 cv
274.638 208.087 274.666 208.181 274.72 208.275 cv
274.779 208.371 274.845 208.439 274.922 208.486 cv
275.121 208.505 li
275.178 208.477 275.206 208.415 275.206 208.324 cv
275.206 208.233 275.178 208.141 275.121 208.045 cv
275.065 207.951 274.999 207.881 274.922 207.836 cv
274.72 207.815 li
271.472 210.25 mo
271.279 210.25 271.067 210.184 270.836 210.05 cv
270.442 209.82 270.105 209.466 269.823 208.983 cv
269.544 208.5 269.406 208.033 269.406 207.581 cv
269.406 207.126 269.544 206.818 269.823 206.661 cv
269.939 206.595 270.065 206.562 270.2 206.562 cv
270.393 206.562 270.605 206.629 270.836 206.764 cv
271.23 206.992 271.568 207.346 271.85 207.829 cv
272.056 208.186 272.185 208.533 272.241 208.878 cv
272.241 209.565 li
272.185 209.842 272.054 210.036 271.85 210.151 cv
271.733 210.217 271.607 210.25 271.472 210.25 cv
.627451 .862745 .952941 rgb
f
233.449 253.1 mo
232.868 253.1 232.228 252.916 231.554 252.527 cv
192.187 229.798 li
190.39 228.76 188.824 226.532 188.01 224.104 cv
189.742 223.643 li
189.889 224.196 190.122 224.753 190.419 225.273 cv
190.918 226.201 191.596 226.986 192.343 227.417 cv
192.47 227.491 li
192.5 227.509 192.53 227.527 192.56 227.544 cv
231.183 249.843 li
231.213 249.861 231.244 249.878 231.274 249.894 cv
231.399 249.966 li
231.79 250.192 232.163 250.299 232.501 250.299 cv
232.804 250.299 233.078 250.213 233.314 250.05 cv
233.847 249.738 234.176 249.076 234.176 248.137 cv
234.176 235.721 li
234.175 217.888 li
234.176 217.888 li
234.176 211.814 li
236.328 211.241 li
236.328 248.918 li
236.328 251.535 235.143 253.1 233.449 253.1 cv
1 1 1 rgb
f
232.501 250.299 mo
232.163 250.299 231.79 250.192 231.399 249.966 cv
231.274 249.894 li
231.723 250.138 232.147 250.254 232.526 250.254 cv
232.819 250.254 233.085 250.184 233.314 250.05 cv
233.078 250.213 232.804 250.299 232.501 250.299 cv
234.176 235.721 mo
205.835 219.359 li
226.975 213.731 li
234.176 217.888 li
234.175 235.72 li
192.47 227.491 mo
192.343 227.417 li
191.596 226.986 190.918 226.201 190.419 225.273 cv
190.943 226.192 191.667 227 192.47 227.491 cv
.517647 .560784 .701961 rgb
f
234.176 217.888 mo
234.176 217.888 li
226.975 213.731 li
234.176 211.814 li
234.176 217.888 li
.964706 .968627 .968627 rgb
f
232.526 250.254 mo
232.147 250.254 231.723 250.138 231.274 249.894 cv
231.244 249.878 231.213 249.861 231.183 249.843 cv
192.56 227.544 li
192.53 227.527 192.5 227.509 192.47 227.491 cv
191.667 227 190.943 226.192 190.419 225.273 cv
190.122 224.753 189.889 224.196 189.742 223.643 cv
205.835 219.359 li
234.176 235.721 li
234.176 248.137 li
234.176 249.076 233.847 249.738 233.314 250.05 cv
233.085 250.184 232.819 250.254 232.526 250.254 cv
.952941 .501961 .462745 rgb
f
292.391 213.527 mo
291.81 213.527 291.169 213.343 290.496 212.954 cv
271.371 201.912 li
274.298 201.133 li
277.641 203.063 li
277.641 203.061 li
290.34 210.393 li
290.732 210.619 291.104 210.726 291.442 210.726 cv
291.751 210.726 292.03 210.637 292.269 210.468 cv
292.792 210.153 293.115 209.498 293.117 208.572 cv
293.117 208.569 293.117 208.566 293.117 208.563 cv
293.117 205.024 li
293.117 204.363 li
293.116 204.362 li
293.116 196.123 li
295.269 195.55 li
295.269 209.345 li
295.269 211.962 294.084 213.527 292.391 213.527 cv
1 1 1 rgb
f
291.442 210.726 mo
291.104 210.726 290.732 210.619 290.34 210.393 cv
277.641 203.061 li
277.641 200.243 li
284.225 198.49 li
291.287 210.669 li
291.349 210.675 291.411 210.678 291.471 210.678 cv
291.769 210.678 292.038 210.606 292.269 210.468 cv
292.03 210.637 291.751 210.726 291.442 210.726 cv
293.116 204.362 mo
288.978 197.224 li
293.116 196.123 li
293.116 204.362 li
.517647 .560784 .701961 rgb
f
291.471 210.678 mo
291.411 210.678 291.349 210.675 291.287 210.669 cv
284.225 198.49 li
286.726 197.824 li
293.106 208.829 li
293.111 208.742 293.117 208.661 293.117 208.572 cv
293.115 209.498 292.792 210.153 292.269 210.468 cv
292.038 210.606 291.769 210.678 291.471 210.678 cv
293.117 205.024 mo
288.646 197.313 li
288.978 197.224 li
293.116 204.362 li
293.117 204.363 li
293.117 205.024 li
.964706 .968627 .968627 rgb
f
293.106 208.829 mo
286.726 197.824 li
288.646 197.313 li
293.117 205.024 li
293.117 208.563 li
293.117 208.566 293.117 208.569 293.117 208.572 cv
293.117 208.661 293.111 208.742 293.106 208.829 cv
.952941 .501961 .462745 rgb
f
277.641 203.063 mo
274.298 201.133 li
274.298 201.133 li
274.949 201.509 li
274.949 200.959 li
277.641 200.243 li
277.641 203.061 li
277.641 203.063 li
.964706 .968627 .968627 rgb
f
274.949 201.509 mo
274.298 201.133 li
274.949 200.959 li
274.949 201.509 li
.952941 .501961 .462745 rgb
f
246.355 252.51 mo
246.355 211.309 li
246.355 210.087 246.613 209.094 247.061 208.384 cv
250.612 207.438 li
250.782 207.512 250.954 207.599 251.128 207.7 cv
290.496 230.429 li
293.117 231.942 295.245 235.987 295.269 239.488 cv
293.117 240.061 li
293.117 237.847 li
293.117 236.914 292.793 235.881 292.267 234.958 cv
291.768 234.028 291.088 233.241 290.34 232.809 cv
290.163 232.707 li
290.15 232.699 290.137 232.692 290.124 232.684 cv
251.501 210.385 li
251.487 210.377 251.473 210.369 251.459 210.361 cv
251.284 210.26 li
250.893 210.034 250.52 209.927 250.182 209.927 cv
249.87 209.927 249.588 210.018 249.348 210.191 cv
248.828 210.509 248.508 211.165 248.508 212.092 cv
248.508 212.359 li
248.508 212.359 li
248.508 251.937 li
246.355 252.51 li
1 1 1 rgb
f
248.508 251.937 mo
248.508 212.359 li
248.508 212.359 li
248.508 219.869 li
286.523 241.816 li
251.537 251.131 li
248.508 249.382 li
248.508 251.937 li
292.267 234.958 mo
291.732 234.019 290.987 233.195 290.163 232.707 cv
290.34 232.809 li
291.088 233.241 291.768 234.028 292.267 234.958 cv
251.459 210.361 mo
250.992 210.099 250.55 209.974 250.158 209.974 cv
249.855 209.974 249.581 210.049 249.348 210.191 cv
249.588 210.018 249.87 209.927 250.182 209.927 cv
250.52 209.927 250.893 210.034 251.284 210.26 cv
251.459 210.361 li
1 .792157 .4 rgb
f
286.523 241.816 mo
248.508 219.869 li
248.508 212.359 li
248.508 212.092 li
248.508 211.165 248.828 210.509 249.348 210.191 cv
249.581 210.049 249.855 209.974 250.158 209.974 cv
250.55 209.974 250.992 210.099 251.459 210.361 cv
251.473 210.369 251.487 210.377 251.501 210.385 cv
290.124 232.684 li
290.137 232.692 290.15 232.699 290.163 232.707 cv
290.987 233.195 291.732 234.019 292.267 234.958 cv
292.793 235.881 293.117 236.914 293.117 237.847 cv
293.117 240.061 li
286.523 241.816 li
.952941 .501961 .462745 rgb
f
248.508 251.937 mo
248.508 249.382 li
251.537 251.131 li
248.508 251.937 li
f
264.938 206.886 mo
262.417 205.43 li
262.417 204.296 li
262.7 204.22 li
262.7 205.268 li
264.938 206.56 li
264.938 206.886 li
264.938 204.154 mo
264.31 203.791 li
264.697 203.689 li
264.938 203.828 li
264.938 204.154 li
.309804 .372549 .4 rgb
f
268.238 208.791 mo
267.954 208.627 li
267.954 206.279 li
267.954 205.976 267.86 205.664 267.668 205.341 cv
267.478 205.017 267.253 204.78 266.992 204.63 cv
266.835 204.54 266.692 204.496 266.562 204.496 cv
266.475 204.496 266.395 204.516 266.319 204.555 cv
266.214 204.614 266.136 204.691 266.092 204.79 cv
266.092 207.552 li
265.806 207.388 li
265.806 203.833 li
266.092 203.997 li
266.092 204.227 li
266.201 204.165 266.319 204.134 266.443 204.134 cv
266.612 204.134 266.795 204.191 266.992 204.304 cv
267.358 204.515 267.654 204.818 267.884 205.214 cv
268.113 205.611 268.231 206.009 268.238 206.413 cv
268.238 208.791 li
f
271.58 211.677 mo
271.347 211.677 271.09 211.596 270.808 211.434 cv
270.33 211.157 269.919 210.726 269.582 210.142 cv
269.511 210.022 269.45 209.905 269.396 209.785 cv
269.697 209.837 li
269.795 210.02 li
270.077 210.503 270.412 210.859 270.808 211.087 cv
271.038 211.22 271.249 211.287 271.441 211.287 cv
271.577 211.287 271.703 211.254 271.819 211.188 cv
272.073 211.042 272.211 210.777 272.234 210.393 cv
272.065 210.519 li
271.925 210.599 271.773 210.638 271.61 210.638 cv
271.376 210.638 271.119 210.558 270.836 210.395 cv
270.36 210.118 269.952 209.689 269.612 209.105 cv
269.275 208.519 269.106 207.953 269.106 207.407 cv
269.106 206.856 269.275 206.485 269.612 206.293 cv
269.751 206.215 269.902 206.176 270.064 206.176 cv
270.297 206.176 270.555 206.257 270.836 206.42 cv
271.317 206.696 271.725 207.126 272.065 207.707 cv
272.129 207.822 272.187 207.937 272.244 208.052 cv
272.244 207.55 li
272.527 207.714 li
272.527 210.475 li
272.527 211.009 272.363 211.371 272.033 211.558 cv
271.893 211.637 271.742 211.677 271.58 211.677 cv
270.2 206.562 mo
270.065 206.562 269.939 206.595 269.823 206.661 cv
269.544 206.818 269.406 207.126 269.406 207.581 cv
269.406 208.033 269.544 208.5 269.823 208.983 cv
270.105 209.466 270.442 209.82 270.836 210.05 cv
271.067 210.184 271.279 210.25 271.472 210.25 cv
271.607 210.25 271.733 210.217 271.85 210.151 cv
272.054 210.036 272.185 209.842 272.241 209.565 cv
272.241 208.878 li
272.185 208.533 272.056 208.186 271.85 207.829 cv
271.568 207.346 271.23 206.992 270.836 206.764 cv
270.605 206.629 270.393 206.562 270.2 206.562 cv
f
273.773 211.987 mo
273.489 211.823 li
273.489 206.033 li
273.773 206.197 li
273.773 211.987 li
f
275.065 212.733 mo
274.779 212.569 li
274.779 209.014 li
275.065 209.178 li
275.065 212.733 li
275.121 208.505 mo
274.922 208.486 li
274.845 208.439 274.779 208.371 274.72 208.275 cv
274.666 208.181 274.638 208.087 274.638 207.996 cv
274.638 207.904 274.666 207.846 274.72 207.815 cv
274.922 207.836 li
274.999 207.881 275.065 207.951 275.121 208.045 cv
275.178 208.141 275.206 208.233 275.206 208.324 cv
275.206 208.415 275.178 208.477 275.121 208.505 cv
f
277.29 213.998 mo
277.167 213.998 277.03 213.955 276.88 213.868 cv
276.627 213.721 276.411 213.493 276.233 213.184 cv
276.052 212.876 275.963 212.597 275.963 212.351 cv
276.245 212.431 li
276.245 212.642 276.308 212.855 276.43 213.069 cv
276.557 213.284 276.707 213.444 276.88 213.542 cv
276.983 213.602 277.078 213.632 277.164 213.632 cv
277.224 213.632 277.279 213.618 277.331 213.589 cv
277.455 213.519 277.518 213.381 277.518 213.177 cv
277.518 212.975 277.457 212.768 277.333 212.555 cv
277.265 212.438 277.129 212.248 276.925 211.98 cv
276.683 211.69 276.517 211.467 276.423 211.305 cv
276.28 211.056 276.205 210.812 276.205 210.58 cv
276.205 210.343 276.28 210.184 276.423 210.1 cv
276.483 210.065 276.548 210.047 276.619 210.047 cv
276.718 210.047 276.828 210.082 276.946 210.151 cv
277.155 210.268 277.324 210.444 277.46 210.676 cv
277.589 210.904 277.654 211.113 277.654 211.307 cv
277.654 211.324 li
277.408 211.296 li
277.385 211.099 277.338 210.934 277.258 210.796 cv
277.178 210.658 277.075 210.554 276.946 210.479 cv
276.873 210.437 276.805 210.415 276.743 210.415 cv
276.7 210.415 276.66 210.425 276.622 210.447 cv
276.533 210.496 276.486 210.594 276.486 210.742 cv
276.486 210.888 276.533 211.038 276.622 211.192 cv
276.674 211.284 276.787 211.441 276.958 211.661 cv
277.225 211.985 277.415 212.245 277.53 212.44 cv
277.708 212.752 277.797 213.05 277.797 213.338 cv
277.797 213.632 277.708 213.831 277.53 213.934 cv
277.456 213.977 277.376 213.998 277.29 213.998 cv
f
280.997 216.158 mo
280.713 215.993 li
280.713 213.646 li
280.713 213.343 280.617 213.031 280.427 212.708 cv
280.237 212.384 280.012 212.147 279.751 211.997 cv
279.595 211.907 279.451 211.861 279.32 211.861 cv
279.233 211.861 279.152 211.882 279.076 211.922 cv
278.886 212.112 li
278.886 214.94 li
278.602 214.776 li
278.602 208.985 li
278.886 209.15 li
278.886 211.57 li
278.981 211.52 279.084 211.495 279.195 211.495 cv
279.363 211.495 279.549 211.553 279.751 211.671 cv
280.115 211.882 280.415 212.187 280.645 212.581 cv
280.872 212.975 280.99 213.374 280.997 213.779 cv
280.997 216.158 li
f
201.196 245.906 mo
200.912 245.742 li
200.912 239.951 li
202.235 240.716 li
202.622 240.999 202.948 241.372 203.218 241.837 cv
203.539 242.39 203.701 242.93 203.701 243.45 cv
203.701 243.976 203.539 244.327 203.218 244.511 cv
203.085 244.586 202.941 244.624 202.785 244.624 cv
202.563 244.624 202.319 244.547 202.052 244.393 cv
201.196 243.898 li
201.196 245.906 li
201.196 240.444 mo
201.196 243.568 li
202.052 244.063 li
202.273 244.19 202.476 244.253 202.659 244.253 cv
202.787 244.253 202.905 244.223 203.014 244.161 cv
203.281 244.009 203.412 243.715 203.412 243.284 cv
203.412 242.852 203.281 242.409 203.014 241.949 cv
202.748 241.494 202.427 241.157 202.052 240.941 cv
201.196 240.444 li
f
204.604 249.229 mo
204.285 249.044 li
205.103 247.503 li
203.926 243.929 li
204.245 244.112 li
205.26 247.182 li
206.283 245.289 li
206.6 245.472 li
204.604 249.229 li
f
209.44 250.567 mo
209.207 250.567 208.949 250.485 208.666 250.322 cv
208.19 250.045 207.782 249.616 207.444 249.032 cv
207.104 248.448 206.935 247.881 206.935 247.332 cv
206.935 246.783 207.104 246.413 207.444 246.22 cv
207.583 246.14 207.734 246.1 207.897 246.1 cv
208.129 246.1 208.386 246.182 208.666 246.344 cv
209.147 246.621 209.557 247.05 209.892 247.634 cv
209.965 247.756 210.026 247.874 210.08 247.989 cv
209.78 247.942 li
209.679 247.754 li
209.4 247.273 209.062 246.919 208.666 246.692 cv
208.435 246.558 208.223 246.49 208.031 246.49 cv
207.897 246.49 207.772 246.523 207.657 246.588 cv
207.378 246.748 207.237 247.053 207.237 247.506 cv
207.237 247.96 207.378 248.427 207.657 248.91 cv
207.937 249.393 208.274 249.748 208.666 249.973 cv
208.9 250.109 209.113 250.176 209.306 250.176 cv
209.44 250.176 209.565 250.144 209.679 250.078 cv
209.78 250.008 li
210.08 250.304 li
209.892 250.447 li
209.754 250.527 209.604 250.567 209.44 250.567 cv
f
213.153 252.71 mo
212.92 252.71 212.661 252.629 212.379 252.466 cv
211.902 252.189 211.494 251.76 211.157 251.176 cv
210.817 250.592 210.648 250.024 210.648 249.476 cv
210.648 248.927 210.817 248.556 211.157 248.364 cv
211.296 248.284 211.447 248.244 211.609 248.244 cv
211.842 248.244 212.098 248.325 212.379 248.488 cv
212.859 248.765 213.27 249.194 213.605 249.778 cv
213.678 249.9 213.739 250.017 213.793 250.132 cv
213.493 250.085 li
213.392 249.898 li
213.113 249.417 212.775 249.063 212.379 248.835 cv
212.148 248.701 211.936 248.634 211.743 248.634 cv
211.609 248.634 211.485 248.667 211.37 248.732 cv
211.091 248.892 210.95 249.196 210.95 249.649 cv
210.95 250.104 211.091 250.571 211.37 251.054 cv
211.649 251.537 211.987 251.891 212.379 252.116 cv
212.613 252.252 212.826 252.32 213.019 252.32 cv
213.153 252.32 213.277 252.287 213.392 252.222 cv
213.493 252.152 li
213.793 252.447 li
213.605 252.59 li
213.467 252.67 213.316 252.71 213.153 252.71 cv
f
216.753 254.889 mo
216.405 254.687 li
215.35 251.87 li
214.722 252.311 li
214.722 253.716 li
214.433 253.55 li
214.433 249.994 li
214.722 250.16 li
214.722 251.791 li
215.936 250.862 li
216.302 251.073 li
215.538 251.718 li
216.753 254.889 li
f
219.597 256.53 mo
219.316 256.369 li
219.316 253.331 li
217.313 255.208 li
217.313 255.212 li
217.032 255.048 li
217.032 251.495 li
217.313 251.657 li
217.313 254.668 li
219.293 252.801 li
219.597 252.977 li
219.597 256.53 li
f
222.806 258.383 mo
222.525 258.221 li
222.525 255.184 li
220.522 257.06 li
220.522 257.065 li
220.24 256.901 li
220.24 253.348 li
220.522 253.51 li
220.522 256.521 li
222.503 254.654 li
222.806 254.83 li
222.806 258.383 li
221.858 253.674 mo
221.758 253.674 221.648 253.639 221.528 253.568 cv
221.319 253.449 221.143 253.266 221.002 253.017 cv
220.864 252.778 220.791 252.564 220.782 252.372 cv
221.016 252.508 li
221.033 252.644 221.08 252.783 221.162 252.921 cv
221.263 253.094 221.385 253.223 221.528 253.306 cv
221.611 253.353 221.688 253.377 221.758 253.377 cv
221.806 253.377 221.85 253.366 221.891 253.343 cv
221.973 253.296 222.02 253.216 222.034 253.094 cv
222.264 253.228 li
222.248 253.418 222.177 253.55 222.051 253.622 cv
221.992 253.657 221.928 253.674 221.858 253.674 cv
f
178.065 181.352 mo
178.106 167.782 li
178.112 167.78 li
178.07 181.35 li
178.065 181.352 li
304.673 145.529 mo
304.277 143.742 303.456 141.919 302.362 140.327 cv
303.457 141.918 304.279 143.74 304.673 145.529 cv
.956863 .964706 .968627 rgb
f
178.07 181.35 mo
178.112 167.78 li
201.477 161.559 li
217.551 170.839 li
213.734 171.856 li
212.326 171.043 li
212.326 171.554 li
213.067 171.982 li
213.073 171.998 213.078 172.013 213.083 172.029 cv
210.627 172.683 li
210.627 170.574 li
210.627 170.062 li
210.627 170.048 li
210.182 169.791 li
210.182 169.805 li
207.606 168.318 li
207.606 167.479 li
207.961 167.684 li
207.961 167.385 li
207.606 167.18 li
207.161 166.923 li
207.161 167.222 li
207.161 168.061 li
204.585 166.574 li
204.585 166.56 li
204.139 166.302 li
204.139 166.316 li
204.139 166.828 li
204.139 169.149 li
204.139 169.66 li
204.139 170.421 li
204.585 170.679 li
204.585 169.917 li
207.161 171.404 li
207.161 173.606 li
196.837 176.354 li
192.187 173.669 li
191.514 173.28 190.873 173.096 190.292 173.096 cv
188.598 173.096 187.413 174.66 187.413 177.278 cv
187.413 178.863 li
178.07 181.35 li
207.606 173.487 mo
207.606 171.662 li
209.77 172.911 li
207.606 173.487 li
210.182 172.637 mo
207.606 171.15 li
207.606 168.829 li
210.182 170.316 li
210.182 172.637 li
207.161 170.893 mo
204.585 169.406 li
204.585 167.085 li
207.161 168.572 li
207.161 170.893 li
236.328 165.841 mo
236.328 152.28 li
246.355 149.61 li
246.355 163.171 li
236.328 165.841 li
284.089 153.126 mo
268.012 143.844 li
297.517 135.988 li
298.388 136.496 li
299.883 137.359 301.261 138.726 302.362 140.327 cv
303.456 141.919 304.277 143.742 304.673 145.529 cv
304.826 146.222 304.914 146.91 304.929 147.578 cv
284.089 153.126 li
.627451 .862745 .952941 rgb
f
217.551 170.839 mo
201.477 161.559 li
204.406 160.779 li
220.48 170.06 li
217.551 170.839 li
234.175 166.414 mo
234.175 152.853 li
236.328 152.28 li
236.328 165.841 li
234.175 166.414 li
1 1 1 rgb
f
220.48 170.06 mo
204.406 160.779 li
234.175 152.853 li
234.175 166.414 li
220.48 170.06 li
.952941 .501961 .462745 rgb
f
187.413 178.863 mo
187.413 177.278 li
187.413 174.66 188.598 173.096 190.292 173.096 cv
190.873 173.096 191.514 173.28 192.187 173.669 cv
196.837 176.354 li
193.91 177.133 li
192.933 176.57 li
192.343 176.23 li
191.951 176.004 191.579 175.896 191.241 175.896 cv
190.926 175.896 190.641 175.99 190.4 176.166 cv
189.884 176.485 189.567 177.14 189.567 178.062 cv
189.567 178.29 li
187.413 178.863 li
1 1 1 rgb
f
192.933 176.57 mo
192.56 176.355 li
192.077 176.077 191.621 175.945 191.217 175.945 cv
190.911 175.945 190.634 176.02 190.4 176.166 cv
190.641 175.99 190.926 175.896 191.241 175.896 cv
191.579 175.896 191.951 176.004 192.343 176.23 cv
192.933 176.57 li
.517647 .560784 .701961 rgb
f
189.567 178.29 mo
189.567 178.062 li
189.567 177.14 189.884 176.485 190.4 176.166 cv
190.634 176.02 190.911 175.945 191.217 175.945 cv
191.621 175.945 192.077 176.077 192.56 176.355 cv
192.933 176.57 li
193.91 177.133 li
189.567 178.29 li
.964706 .968627 .968627 rgb
f
246.355 163.171 mo
246.355 149.61 li
248.508 149.037 li
248.508 162.598 li
246.355 163.171 li
281.16 153.906 mo
265.083 144.624 li
268.012 143.844 li
284.089 153.126 li
281.16 153.906 li
1 1 1 rgb
f
248.508 162.598 mo
248.508 149.037 li
252.835 147.885 li
259.645 159.632 li
248.508 153.202 li
248.508 162.598 li
264.399 158.368 mo
257.588 146.62 li
264.663 144.736 li
264.663 158.297 li
264.399 158.368 li
277.641 154.842 mo
277.641 151.874 li
274.949 150.32 li
274.949 150.32 li
267.354 145.935 li
265.083 144.624 li
265.083 144.624 li
281.16 153.906 li
277.641 154.842 li
.517647 .560784 .701961 rgb
f
259.647 159.633 mo
259.645 159.632 li
252.835 147.885 li
253.306 147.759 li
260.117 159.507 li
259.647 159.633 li
262.035 158.997 mo
255.224 147.249 li
257.588 146.62 li
264.399 158.368 li
262.035 158.997 li
.964706 .968627 .968627 rgb
f
260.117 159.507 mo
253.306 147.759 li
255.224 147.249 li
262.035 158.997 li
260.117 159.507 li
.952941 .501961 .462745 rgb
f
248.508 162.598 mo
248.508 153.202 li
259.645 159.632 li
259.647 159.633 li
255.985 160.608 li
248.508 156.29 li
248.508 162.598 li
264.663 158.297 mo
264.663 144.736 li
265.083 144.624 li
267.354 145.935 li
267.354 157.581 li
264.663 158.297 li
274.949 155.559 mo
274.949 150.32 li
277.641 151.874 li
277.641 154.842 li
274.949 155.559 li
.964706 .968627 .968627 rgb
f
248.508 162.598 mo
248.508 156.29 li
255.985 160.608 li
248.508 162.598 li
267.354 157.581 mo
267.354 145.935 li
274.949 150.32 li
274.949 155.559 li
267.354 157.581 li
.952941 .501961 .462745 rgb
f
207.161 173.606 mo
207.161 171.404 li
204.585 169.917 li
204.585 170.679 li
204.139 170.421 li
204.139 169.66 li
204.139 169.149 li
204.139 166.828 li
204.139 166.316 li
204.139 166.302 li
204.585 166.56 li
204.585 166.574 li
207.161 168.061 li
207.161 167.222 li
207.161 166.923 li
207.606 167.18 li
207.961 167.385 li
207.961 167.684 li
207.606 167.479 li
207.606 168.318 li
210.182 169.805 li
210.182 169.791 li
210.627 170.048 li
210.627 170.062 li
210.627 170.574 li
210.627 172.683 li
209.77 172.911 li
207.606 171.662 li
207.606 173.487 li
207.161 173.606 li
207.606 168.829 mo
207.606 171.15 li
210.182 172.637 li
210.182 170.316 li
207.606 168.829 li
204.585 167.085 mo
204.585 169.406 li
207.161 170.893 li
207.161 168.572 li
204.585 167.085 li
.309804 .372549 .4 rgb
f
213.083 172.029 mo
213.078 172.013 213.073 171.998 213.067 171.982 cv
212.326 171.554 li
212.326 171.043 li
213.734 171.856 li
213.083 172.029 li
f
304.866 170.166 mo
304.908 156.597 li
304.908 156.596 li
304.867 170.166 li
.956863 .964706 .968627 rgb
f
178.003 203.95 mo
178.044 190.381 li
187.413 187.885 li
187.413 201.444 li
178.003 203.95 li
223.603 191.807 mo
207.531 182.528 li
217.487 179.877 li
218.108 180.635 218.764 181.34 219.443 181.976 cv
219.602 181.482 li
219.036 180.952 218.487 180.371 217.962 179.75 cv
228.243 177.012 li
231.554 178.924 li
232.228 179.313 232.869 179.497 233.45 179.497 cv
235.143 179.497 236.328 177.933 236.328 175.315 cv
236.328 174.859 li
246.355 172.189 li
246.355 181.104 li
246.355 182.543 246.713 184.077 247.317 185.492 cv
223.603 191.807 li
295.269 172.722 mo
295.269 165.945 li
295.269 163.838 294.501 161.525 293.317 159.683 cv
304.908 156.596 li
304.866 170.166 li
295.269 172.722 li
.627451 .862745 .952941 rgb
f
233.45 179.497 mo
232.869 179.497 232.228 179.313 231.554 178.924 cv
228.243 177.012 li
231.172 176.233 li
231.399 176.363 li
231.79 176.59 232.163 176.697 232.501 176.697 cv
233.185 176.697 233.726 176.258 233.993 175.481 cv
236.328 174.859 li
236.328 175.315 li
236.328 177.933 235.143 179.497 233.45 179.497 cv
1 1 1 rgb
f
232.501 176.697 mo
232.163 176.697 231.79 176.59 231.399 176.363 cv
231.172 176.233 li
233.993 175.481 li
233.726 176.258 233.185 176.697 232.501 176.697 cv
.952941 .501961 .462745 rgb
f
187.413 201.444 mo
187.413 187.885 li
189.567 187.312 li
189.567 200.871 li
187.413 201.444 li
220.72 192.575 mo
204.622 183.303 li
207.531 182.528 li
223.603 191.807 li
220.72 192.575 li
1 1 1 rgb
f
189.567 200.871 mo
189.567 187.312 li
189.567 192.133 li
199.924 198.113 li
189.567 200.871 li
.517647 .560784 .701961 rgb
f
199.924 198.113 mo
189.567 192.133 li
189.567 187.312 li
204.622 183.303 li
220.72 192.575 li
199.924 198.113 li
.964706 .968627 .968627 rgb
f
247.317 185.492 mo
246.713 184.077 246.355 182.543 246.355 181.104 cv
246.355 172.189 li
248.508 171.616 li
248.508 182.54 li
248.508 182.54 li
248.508 182.808 li
248.508 182.825 248.508 182.841 248.508 182.857 cv
248.508 182.858 li
248.515 183.558 248.704 184.314 249.025 185.037 cv
247.317 185.492 li
293.116 173.295 mo
293.116 169.34 li
293.117 169.34 li
293.117 165.016 li
293.117 164.244 li
293.117 164.244 li
293.117 164.238 293.117 164.232 293.117 164.226 cv
293.117 164.224 293.117 164.223 293.117 164.221 cv
293.117 164.216 293.117 164.211 293.117 164.207 cv
293.117 164.205 293.117 164.204 293.117 164.203 cv
293.117 164.197 293.117 164.191 293.117 164.186 cv
293.117 164.184 293.117 164.182 293.117 164.18 cv
293.116 164.176 293.116 164.172 293.116 164.168 cv
293.116 164.166 293.116 164.164 293.116 164.161 cv
293.116 164.156 293.116 164.151 293.116 164.145 cv
293.116 164.143 293.116 164.141 293.116 164.139 cv
293.116 164.135 293.116 164.131 293.115 164.127 cv
293.115 164.125 293.115 164.123 293.115 164.12 cv
293.115 164.116 293.115 164.112 293.115 164.107 cv
293.115 164.104 293.115 164.1 293.114 164.097 cv
293.114 164.094 293.114 164.091 293.114 164.087 cv
293.114 164.084 293.114 164.081 293.114 164.078 cv
293.114 164.076 293.113 164.072 293.113 164.07 cv
293.113 164.065 293.113 164.06 293.113 164.056 cv
293.113 164.053 293.112 164.049 293.112 164.046 cv
293.112 164.043 293.112 164.04 293.112 164.037 cv
293.112 164.034 293.112 164.032 293.111 164.029 cv
293.111 164.026 293.111 164.023 293.111 164.02 cv
293.111 164.015 293.111 164.011 293.11 164.006 cv
293.11 164.002 293.11 163.999 293.11 163.995 cv
293.109 163.993 293.109 163.99 293.109 163.988 cv
293.109 163.985 293.109 163.981 293.109 163.978 cv
293.108 163.976 293.108 163.975 293.108 163.973 cv
293.108 163.966 293.107 163.959 293.107 163.953 cv
293.107 163.951 293.107 163.949 293.107 163.947 cv
293.106 163.943 293.106 163.94 293.106 163.936 cv
293.106 163.934 293.105 163.932 293.105 163.93 cv
293.105 163.924 293.104 163.918 293.104 163.912 cv
293.104 163.91 293.104 163.907 293.103 163.904 cv
293.103 163.901 293.103 163.898 293.103 163.895 cv
293.102 163.892 293.102 163.889 293.102 163.886 cv
293.102 163.883 293.101 163.881 293.101 163.878 cv
293.101 163.873 293.1 163.867 293.1 163.862 cv
293.1 163.86 293.099 163.858 293.099 163.855 cv
293.099 163.851 293.098 163.847 293.098 163.843 cv
293.098 163.841 293.098 163.839 293.098 163.837 cv
293.097 163.831 293.096 163.825 293.096 163.819 cv
293.096 163.819 293.096 163.818 293.096 163.818 cv
293.095 163.811 293.094 163.805 293.094 163.798 cv
293.094 163.798 293.094 163.798 293.094 163.798 cv
293.01 162.987 292.71 162.129 292.264 161.349 cv
292.033 160.921 291.765 160.522 291.468 160.176 cv
293.317 159.683 li
294.501 161.525 295.269 163.838 295.269 165.945 cv
295.269 172.722 li
293.116 173.295 li
1 1 1 rgb
f
257.35 182.82 mo
264.663 178.651 li
264.663 180.873 li
257.35 182.82 li
248.508 182.54 mo
248.508 182.54 li
248.508 171.616 li
252.682 170.504 li
257.487 173.279 li
248.508 178.398 li
248.508 182.54 li
286.406 175.082 mo
284.736 174.118 li
293.116 169.34 li
293.116 173.295 li
286.406 175.082 li
277.641 168.7 mo
277.641 163.858 li
291.468 160.176 li
291.765 160.522 292.033 160.921 292.264 161.349 cv
292.122 161.102 291.966 160.862 291.798 160.635 cv
291.793 160.631 li
277.641 168.7 li
.517647 .560784 .701961 rgb
f
284.736 174.118 mo
280.971 171.945 li
293.117 165.016 li
293.117 169.34 li
293.116 169.34 li
284.736 174.118 li
277.645 170.024 mo
277.641 170.022 li
277.641 168.7 li
291.793 160.631 li
291.798 160.635 li
291.966 160.862 292.122 161.102 292.264 161.349 cv
292.71 162.129 293.01 162.987 293.094 163.798 cv
293.019 163.074 292.771 162.316 292.401 161.606 cv
277.645 170.024 li
293.117 164.244 mo
293.117 164.238 293.117 164.232 293.117 164.226 cv
293.117 164.232 293.117 164.238 293.117 164.244 cv
293.117 164.244 li
293.117 164.221 mo
293.117 164.216 293.117 164.211 293.117 164.207 cv
293.117 164.211 293.117 164.216 293.117 164.221 cv
293.117 164.203 mo
293.117 164.197 293.117 164.191 293.117 164.186 cv
293.117 164.191 293.117 164.197 293.117 164.203 cv
293.117 164.18 mo
293.116 164.176 293.116 164.172 293.116 164.168 cv
293.116 164.172 293.116 164.176 293.117 164.18 cv
293.116 164.161 mo
293.116 164.156 293.116 164.151 293.116 164.145 cv
293.116 164.151 293.116 164.156 293.116 164.161 cv
293.116 164.139 mo
293.116 164.135 293.116 164.131 293.115 164.127 cv
293.116 164.131 293.116 164.135 293.116 164.139 cv
293.115 164.12 mo
293.115 164.116 293.115 164.112 293.115 164.107 cv
293.115 164.112 293.115 164.116 293.115 164.12 cv
293.114 164.097 mo
293.114 164.094 293.114 164.091 293.114 164.087 cv
293.114 164.091 293.114 164.094 293.114 164.097 cv
293.114 164.078 mo
293.114 164.075 293.113 164.073 293.113 164.07 cv
293.113 164.072 293.114 164.076 293.114 164.078 cv
293.113 164.056 mo
293.113 164.053 293.112 164.049 293.112 164.046 cv
293.112 164.049 293.113 164.053 293.113 164.056 cv
293.112 164.037 mo
293.112 164.034 293.112 164.032 293.111 164.029 cv
293.112 164.032 293.112 164.034 293.112 164.037 cv
293.111 164.02 mo
293.111 164.015 293.111 164.011 293.11 164.006 cv
293.111 164.011 293.111 164.015 293.111 164.02 cv
293.11 163.995 mo
293.109 163.993 293.109 163.99 293.109 163.988 cv
293.109 163.99 293.109 163.993 293.11 163.995 cv
293.109 163.978 mo
293.108 163.976 293.108 163.975 293.108 163.973 cv
293.108 163.975 293.108 163.976 293.109 163.978 cv
293.107 163.953 mo
293.107 163.951 293.107 163.949 293.107 163.947 cv
293.107 163.949 293.107 163.951 293.107 163.953 cv
293.106 163.936 mo
293.106 163.934 293.105 163.932 293.105 163.93 cv
293.105 163.932 293.106 163.934 293.106 163.936 cv
293.104 163.912 mo
293.104 163.91 293.104 163.907 293.103 163.904 cv
293.104 163.907 293.104 163.91 293.104 163.912 cv
293.103 163.895 mo
293.102 163.892 293.102 163.889 293.102 163.886 cv
293.102 163.889 293.102 163.892 293.103 163.895 cv
293.101 163.878 mo
293.101 163.873 293.1 163.867 293.1 163.862 cv
293.1 163.867 293.101 163.873 293.101 163.878 cv
293.099 163.855 mo
293.099 163.851 293.098 163.847 293.098 163.843 cv
293.098 163.847 293.099 163.851 293.099 163.855 cv
293.098 163.837 mo
293.097 163.831 293.096 163.825 293.096 163.819 cv
293.096 163.825 293.097 163.831 293.098 163.837 cv
293.096 163.818 mo
293.095 163.811 293.094 163.805 293.094 163.798 cv
293.094 163.805 293.095 163.811 293.096 163.818 cv
.964706 .968627 .968627 rgb
f
280.971 171.945 mo
277.645 170.024 li
292.401 161.606 li
292.771 162.316 293.019 163.074 293.094 163.798 cv
293.094 163.798 293.094 163.798 293.094 163.798 cv
293.094 163.805 293.095 163.811 293.096 163.818 cv
293.096 163.818 293.096 163.819 293.096 163.819 cv
293.096 163.825 293.097 163.831 293.098 163.837 cv
293.098 163.839 293.098 163.841 293.098 163.843 cv
293.098 163.847 293.099 163.851 293.099 163.855 cv
293.099 163.858 293.1 163.86 293.1 163.862 cv
293.1 163.867 293.101 163.873 293.101 163.878 cv
293.101 163.881 293.102 163.883 293.102 163.886 cv
293.102 163.889 293.102 163.892 293.103 163.895 cv
293.103 163.898 293.103 163.901 293.103 163.904 cv
293.104 163.907 293.104 163.91 293.104 163.912 cv
293.104 163.918 293.105 163.924 293.105 163.93 cv
293.105 163.932 293.106 163.934 293.106 163.936 cv
293.106 163.94 293.106 163.943 293.107 163.947 cv
293.107 163.949 293.107 163.951 293.107 163.953 cv
293.107 163.959 293.108 163.966 293.108 163.973 cv
293.108 163.975 293.108 163.976 293.109 163.978 cv
293.109 163.981 293.109 163.985 293.109 163.988 cv
293.109 163.99 293.109 163.993 293.11 163.995 cv
293.11 163.999 293.11 164.002 293.11 164.006 cv
293.111 164.011 293.111 164.015 293.111 164.02 cv
293.111 164.023 293.111 164.026 293.111 164.029 cv
293.112 164.032 293.112 164.034 293.112 164.037 cv
293.112 164.04 293.112 164.043 293.112 164.046 cv
293.112 164.049 293.113 164.053 293.113 164.056 cv
293.113 164.06 293.113 164.065 293.113 164.07 cv
293.113 164.073 293.114 164.075 293.114 164.078 cv
293.114 164.081 293.114 164.084 293.114 164.087 cv
293.114 164.091 293.114 164.094 293.114 164.097 cv
293.115 164.1 293.115 164.104 293.115 164.107 cv
293.115 164.112 293.115 164.116 293.115 164.12 cv
293.115 164.123 293.115 164.125 293.115 164.127 cv
293.116 164.131 293.116 164.135 293.116 164.139 cv
293.116 164.141 293.116 164.143 293.116 164.145 cv
293.116 164.151 293.116 164.156 293.116 164.161 cv
293.116 164.164 293.116 164.166 293.116 164.168 cv
293.116 164.172 293.116 164.176 293.117 164.18 cv
293.117 164.182 293.117 164.184 293.117 164.186 cv
293.117 164.191 293.117 164.197 293.117 164.203 cv
293.117 164.204 293.117 164.205 293.117 164.207 cv
293.117 164.211 293.117 164.216 293.117 164.221 cv
293.117 164.223 293.117 164.224 293.117 164.226 cv
293.117 164.232 293.117 164.238 293.117 164.244 cv
293.117 164.244 li
293.117 165.016 li
280.971 171.945 li
.952941 .501961 .462745 rgb
f
253.467 183.854 mo
264.663 177.471 li
264.663 178.651 li
257.35 182.82 li
253.467 183.854 li
248.508 182.857 mo
248.508 182.841 248.508 182.825 248.508 182.808 cv
248.508 182.54 li
248.508 178.398 li
257.487 173.279 li
261.373 175.523 li
248.508 182.858 li
.964706 .968627 .968627 rgb
f
249.025 185.037 mo
248.704 184.314 248.515 183.558 248.508 182.858 cv
248.508 182.858 li
261.373 175.523 li
264.663 177.421 li
264.663 177.471 li
253.467 183.854 li
249.025 185.037 li
.952941 .501961 .462745 rgb
f
264.663 180.873 mo
264.663 178.651 li
264.663 177.471 li
264.663 177.421 li
261.373 175.523 li
257.487 173.279 li
252.682 170.504 li
256.343 169.53 li
267.354 175.887 li
267.354 180.156 li
264.663 180.873 li
282.745 176.057 mo
274.949 171.557 li
274.949 164.575 li
277.641 163.858 li
277.641 168.7 li
277.641 170.022 li
277.645 170.024 li
280.971 171.945 li
284.736 174.118 li
286.406 175.082 li
282.745 176.057 li
267.354 167.171 mo
266.674 166.778 li
267.354 166.597 li
267.354 167.171 li
.964706 .968627 .968627 rgb
f
267.354 180.156 mo
267.354 175.887 li
256.343 169.53 li
266.674 166.778 li
267.354 167.171 li
267.354 166.597 li
274.949 164.575 li
274.949 171.557 li
282.745 176.057 li
267.354 180.156 li
.952941 .501961 .462745 rgb
f
219.443 181.976 mo
218.764 181.34 218.108 180.635 217.487 179.877 cv
217.962 179.75 li
218.487 180.371 219.036 180.952 219.602 181.482 cv
219.443 181.976 li
.309804 .372549 .4 rgb
f
167.8 387.283 mo
151.067 396.944 123.852 396.895 107.014 387.173 cv
90.1764 377.452 90.0912 361.739 106.824 352.079 cv
123.557 342.418 150.772 342.467 167.61 352.189 cv
184.448 361.91 184.533 377.622 167.8 387.283 cv
cp
.890196 .92549 1 rgb
f
120.275 203.912 mo
119.95 201.874 119.407 199.81 118.183 198.149 cv
116.959 196.487 114.935 195.293 112.885 195.533 cv
111.165 195.735 110.539 196.976 109.794 198.365 cv
109.037 199.779 108.41 201.261 107.973 202.806 cv
107.319 205.115 106.825 207.466 106.341 209.816 cv
105.754 212.669 105.112 215.24 103.916 217.904 cv
103.692 218.404 103.473 218.908 103.261 219.414 cv
101.496 223.624 100.138 228.032 99.2932 232.52 cv
98.435 237.08 98.3565 241.772 98.2626 246.399 cv
98.1967 249.651 98.2208 252.804 97.05 255.9 cv
96.716 256.783 96.3655 257.66 95.999 258.53 cv
95.7908 259.024 95.5732 259.538 95.6008 260.073 cv
95.6216 260.476 95.7801 260.857 95.9365 261.229 cv
96.3376 262.183 96.7387 263.137 97.1398 264.091 cv
97.2659 264.391 97.3986 264.7 97.6373 264.922 cv
97.8291 265.099 98.0748 265.206 98.3166 265.305 cv
99.3762 265.741 100.465 266.106 101.573 266.397 cv
101.863 266.473 102.166 266.544 102.459 266.483 cv
102.648 266.443 102.823 266.35 103.01 266.301 cv
103.723 266.116 104.502 266.591 105.197 266.345 cv
105.354 266.29 105.498 266.199 105.66 266.159 cv
105.815 266.12 105.979 266.129 106.135 266.091 cv
106.665 265.965 106.936 265.326 106.848 264.789 cv
106.76 264.251 106.414 263.797 106.08 263.367 cv
105.272 262.33 104.465 261.293 103.657 260.255 cv
103.312 259.811 102.961 259.359 102.755 258.836 cv
103.115 258.819 103.475 258.818 103.835 258.83 cv
104.057 258.885 li
104.173 259.098 li
104.554 260.371 105.165 261.57 105.942 262.647 cv
106.161 262.951 106.403 263.253 106.73 263.434 cv
107.057 263.615 107.492 263.649 107.792 263.425 cv
108.249 263.082 108.171 262.386 108.046 261.828 cv
107.734 260.432 107.422 259.037 107.11 257.642 cv
106.933 256.849 106.714 255.989 106.065 255.5 cv
105.685 255.214 104.999 255.096 104.733 254.683 cv
104.361 254.106 104.391 252.868 104.468 252.214 cv
104.61 251.025 106.642 244.184 107.493 241.973 cv
109.167 237.627 110.544 233.124 112.308 228.824 cv
113.932 224.867 116.168 221.206 118.02 217.359 cv
119.125 215.063 120.627 212.262 120.676 209.673 cv
120.712 207.746 120.578 205.816 120.275 203.912 cv
cp
1 .717647 .54902 rgb
f
127.221 187.133 mo
127.662 186.617 128.093 186.093 128.474 185.531 cv
122.956 183.697 116.716 185.869 113.267 190.466 cv
110.371 194.326 108.618 198.918 107.242 203.544 cv
107.068 204.129 106.899 204.75 107.048 205.342 cv
107.131 205.671 107.309 205.969 107.492 206.255 cv
108.605 207.999 110.08 209.471 111.825 210.593 cv
114.297 212.182 117.264 212.83 120.193 213.066 cv
120.883 213.122 121.605 213.151 122.239 212.873 cv
123.718 212.223 123.192 210.673 123.008 209.444 cv
122.77 207.855 122.652 206.248 122.641 204.64 cv
122.618 201.414 123.027 198.188 123.785 195.054 cv
123.932 194.446 124.2 193.779 124.224 193.153 cv
124.242 192.68 124.152 192.295 124.268 191.806 cv
124.518 190.745 125.09 189.78 125.741 188.917 cv
126.207 188.301 126.72 187.722 127.221 187.133 cv
cp
.419608 .423529 .701961 rgb
f
101.572 371.473 mo
101.251 371.998 100.921 372.514 100.693 373.089 cv
99.6826 375.628 100.221 379.214 103.145 380.158 cv
104.154 380.484 105.255 380.36 106.286 380.107 cv
107.316 379.854 108.316 379.476 109.361 379.294 cv
111.314 378.954 113.31 379.314 115.278 379.554 cv
117.246 379.793 119.32 379.896 121.132 379.09 cv
122.752 378.369 123.918 376.86 124.492 375.212 cv
125.044 373.626 125.433 371.286 123.509 370.577 cv
122.288 370.127 120.949 370.176 119.657 370.022 cv
117.526 369.768 115.471 368.926 113.762 367.629 cv
113.372 367.333 112.954 367.027 112.673 366.621 cv
112.413 366.246 112.44 366.016 111.967 365.81 cv
110.926 365.356 109.406 365.216 108.281 364.998 cv
107.207 364.789 106.062 364.729 105.05 365.142 cv
102.913 366.014 102.947 368.791 102.066 370.587 cv
101.93 370.864 101.777 371.133 101.617 371.397 cv
101.572 371.473 li
cp
.301961 .301961 .501961 rgb
f
145.661 273.392 mo
144.568 271.703 144.174 269.672 143.711 267.714 cv
142.725 263.546 141.327 259.476 139.544 255.581 cv
138.927 254.234 138.244 252.879 137.179 251.848 cv
135.632 250.35 133.462 249.704 131.354 249.265 cv
129.608 248.901 127.68 249.221 126.58 250.756 cv
125.848 251.778 125.11 252.798 124.413 253.845 cv
123.947 254.547 123.197 254.879 122.771 255.557 cv
119.694 260.455 117.7 266.084 117.394 271.86 cv
117.21 275.325 117.594 278.823 117.78 282.266 cv
117.966 285.685 117.417 289.093 117.123 292.49 cv
116.418 300.642 113.941 308.755 110.577 316.213 cv
108.646 320.495 106.992 324.455 105.906 329.039 cv
105.094 332.468 104.623 335.971 104.332 339.481 cv
104.169 341.455 104.063 343.434 103.988 345.413 cv
103.784 350.797 103.794 356.19 103.429 361.567 cv
103.324 363.13 103.186 364.692 103.002 366.248 cv
102.911 367.026 102.776 367.801 102.691 368.579 cv
102.472 370.568 105.983 370.441 107.161 370.435 cv
109.276 370.425 111.391 369.991 113.33 369.144 cv
114.184 368.771 114.274 368.495 114.222 367.669 cv
114.156 366.629 114.813 360.065 115.116 357.866 cv
115.683 353.757 116.273 349.382 117.568 345.428 cv
118.855 341.503 120.449 337.639 121.864 333.748 cv
122.68 331.507 128.232 317.356 128.961 315.77 cv
130.668 312.056 132.376 308.341 134.084 304.626 cv
136.424 299.536 138.764 294.444 140.902 289.265 cv
142.786 284.703 144.512 280.074 146.016 275.372 cv
146.111 275.074 146.207 274.765 146.171 274.454 cv
146.125 274.06 145.877 273.725 145.661 273.392 cv
cp
1 .666667 0 rgb
f
148.057 372.642 mo
148.088 373.577 148.327 374.473 148.986 375.163 cv
149.591 375.796 150.483 376.101 151.359 376.126 cv
152.234 376.152 153.099 375.92 153.918 375.609 cv
156.833 374.503 159.295 372.4 162.234 371.358 cv
163.919 370.761 165.74 370.522 167.316 369.679 cv
168.2 369.207 168.979 368.56 169.702 367.867 cv
170.978 366.645 172.067 365.197 172.669 363.524 cv
173.156 362.172 173.854 359.37 172.469 358.331 cv
170.942 357.185 169.208 357.103 167.364 357.248 cv
164.226 357.496 161.277 358.08 158.318 359.196 cv
157.334 359.567 156.367 359.982 155.421 360.441 cv
154.643 360.818 153.727 361.134 153.058 361.675 cv
152.139 362.417 151.416 363.374 150.774 364.367 cv
149.675 366.064 148.776 367.93 148.369 369.921 cv
148.198 370.758 148.027 371.719 148.057 372.642 cv
cp
.419608 .423529 .701961 rgb
f
166.25 255.171 mo
165.853 257.885 165.31 259.89 162.51 260.768 cv
160.747 261.32 158.844 261.258 157.023 260.948 cv
154.484 260.516 152.027 259.609 149.817 258.289 cv
146.966 256.586 144.532 254.21 141.547 252.754 cv
138.301 251.171 134.934 251.26 132.589 254.364 cv
131.1 256.336 130.538 258.854 130.285 261.313 cv
129.418 269.746 132.765 277.897 139.913 282.678 cv
140.964 283.382 142.108 284.03 142.821 285.075 cv
143.484 286.045 143.696 287.245 143.85 288.409 cv
144.651 294.482 144.059 300.573 144.444 306.647 cv
144.847 313 144.922 319.375 144.667 325.737 cv
144.526 329.24 144.296 332.746 144.394 336.254 cv
144.494 339.826 145.218 343.019 146.066 346.455 cv
146.879 349.747 147.522 353.167 148.073 356.533 cv
148.377 358.392 148.644 360.257 148.894 362.125 cv
148.965 362.65 149.224 367.071 149.542 367.171 cv
152.631 368.136 156.203 367.354 158.606 365.187 cv
158.81 365.003 159.011 364.803 159.115 364.55 cv
159.207 364.325 159.217 364.076 159.225 363.833 cv
159.549 354.058 159.872 344.283 160.196 334.508 cv
160.489 325.677 161.57 317.584 164.329 309.145 cv
165.71 304.918 167.223 300.729 168.37 296.43 cv
169.501 292.189 170.017 287.893 170.486 283.547 cv
171.457 274.559 169.858 265.439 166.896 256.953 cv
166.688 256.356 166.473 255.762 166.25 255.171 cv
cp
1 .917647 0 rgb
f
124.94 184.937 mo
122.212 185.152 119.683 186.011 117.766 187.949 cv
113.979 191.779 113.158 198.21 113.754 203.332 cv
114.294 207.978 115.731 212.518 117.962 216.63 cv
119.793 220.005 122.174 223.14 123.275 226.819 cv
124.941 232.386 120.293 253.692 119.973 258.657 cv
119.873 260.211 119.93 260.673 121.036 261.876 cv
124.341 265.471 128.633 268.081 133.214 269.772 cv
137.796 271.464 142.669 272.266 147.543 272.574 cv
154.384 273.007 161.51 272.416 167.558 269.191 cv
168.047 268.93 168.535 268.647 168.911 268.241 cv
169.74 267.347 169.889 266.022 169.854 264.803 cv
169.788 262.56 168.942 260.437 168.504 258.244 cv
166.393 247.67 163.908 236.952 164.952 226.22 cv
165.367 221.955 166.336 217.775 167.175 213.581 cv
167.91 209.905 169.766 205.091 166.869 202.044 cv
162.257 197.196 155.943 194.411 149.806 191.746 cv
146.063 190.12 142.306 188.502 138.419 187.247 cv
134.657 186.031 129.517 184.577 124.94 184.937 cv
cp
.301961 .301961 .501961 rgb
f
153.623 164.074 mo
153.611 164.258 153.599 164.442 153.588 164.625 cv
153.531 165.548 153.42 166.463 153.681 167.36 cv
153.936 168.232 154.371 169.051 154.528 169.951 cv
154.71 170.998 154.487 172.069 154.252 173.105 cv
153.911 174.614 153.544 176.117 153.151 177.613 cv
152.852 178.753 152.496 179.958 151.609 180.736 cv
151.186 181.108 150.667 181.354 150.213 181.689 cv
148.675 182.821 148.037 184.835 147.936 186.742 cv
147.834 188.649 148.173 190.555 148.146 192.465 cv
144.838 193.358 141.382 193.699 137.964 193.469 cv
135.068 193.275 132.067 192.609 129.862 190.721 cv
129.754 190.629 129.645 190.53 129.59 190.399 cv
129.521 190.236 129.544 190.051 129.563 189.876 cv
130.065 185.214 126.906 181.2 125.999 176.804 cv
125.113 172.514 124.394 168.091 125.11 163.769 cv
125.826 159.447 128.212 155.188 132.139 153.247 cv
134.76 151.952 137.792 151.793 140.713 151.912 cv
143.236 152.015 145.797 152.32 148.106 153.343 cv
150.415 154.366 152.462 156.195 153.269 158.588 cv
153.866 160.357 153.744 162.237 153.623 164.074 cv
cp
1 .717647 .54902 rgb
f
149.374 153.231 mo
148.199 152.388 146.857 151.827 145.393 151.372 cv
143.736 150.855 141.939 150.511 140.205 150.46 cv
132.776 150.238 126.617 154.89 124.352 161.93 cv
124.153 162.548 123.979 163.173 123.83 163.804 cv
122.833 168.011 122.935 172.459 124.027 176.638 cv
124.573 178.728 125.367 180.754 126.399 182.652 cv
126.915 183.6 127.49 184.517 128.121 185.392 cv
128.876 186.439 129.278 186.983 130.599 187.176 cv
134.072 187.683 137.59 186.492 140.669 184.808 cv
144.733 182.587 148.335 179.442 150.805 175.524 cv
154.561 169.566 155.874 160.777 151.179 154.937 cv
150.635 154.26 150.031 153.702 149.374 153.231 cv
cp
.458824 .27451 0 rgb
f
208.807 153.505 mo
208.417 152.987 207.677 152.921 207.029 152.9 cv
207.027 152.483 206.67 152.156 206.312 151.942 cv
205.953 151.728 205.546 151.553 205.31 151.208 cv
205.155 150.98 205.088 150.696 204.901 150.492 cv
204.44 149.989 203.615 150.271 202.999 150.568 cv
202.384 150.864 201.523 151.09 201.121 150.537 cv
200.948 150.3 200.929 149.986 200.931 149.692 cv
200.951 146.976 202.212 144.301 201.758 141.623 cv
201.679 141.162 201.45 140.62 200.984 140.58 cv
200.582 140.545 200.27 140.918 200.072 141.27 cv
199.431 142.416 199.188 143.736 198.955 145.029 cv
198.75 146.163 198.546 147.298 198.341 148.432 cv
197.993 150.362 197.646 152.291 197.325 154.225 cv
197.085 155.674 196.86 157.144 196.989 158.607 cv
197.076 159.598 197.459 160.635 197.475 161.615 cv
197.489 162.431 193.603 176.145 192.671 178.965 cv
191.98 181.053 191.326 183.154 190.778 185.284 cv
190.571 186.09 190.383 186.929 190.324 187.759 cv
187.94 189.159 179.283 194.037 177.264 194.805 cv
175.302 195.552 173.386 195.857 171.889 197.442 cv
171.673 197.67 171.461 197.913 171.346 198.206 cv
171.137 198.739 171.284 199.335 171.4 199.896 cv
172.141 203.462 171.52 207.294 169.692 210.445 cv
169.352 211.031 168.959 211.634 168.951 212.312 cv
171.686 212.18 174.456 212.042 177.066 211.219 cv
180.135 210.251 182.83 208.385 185.428 206.487 cv
187.433 205.022 189.413 203.522 191.365 201.987 cv
194.118 199.823 196.833 197.576 199.116 194.921 cv
201.307 192.374 201.801 189.482 202.664 186.378 cv
203.692 182.681 204.127 178.823 204.329 175.001 cv
204.48 172.137 204.497 169.241 205.169 166.452 cv
205.472 165.192 205.447 163.943 206.135 162.815 cv
207.038 161.337 207.316 160.038 207.546 158.327 cv
207.618 157.786 207.711 157.239 207.937 156.741 cv
208.182 156.2 208.574 155.737 208.826 155.199 cv
209.077 154.662 209.165 153.98 208.807 153.505 cv
cp
1 .898039 .8 rgb
f
164.926 195.501 mo
163.303 195.54 161.683 195.624 160.069 195.797 cv
157.459 196.076 154.337 196.361 152.199 198.005 cv
150.476 199.33 150.005 201.424 150.01 203.485 cv
150.014 205.538 151.531 208.15 152.67 209.822 cv
155.356 213.766 160.341 215.371 164.929 215.307 cv
166.956 215.278 168.979 215.049 170.961 214.625 cv
171.959 214.412 173.33 214.103 174.12 213.406 cv
175.08 212.56 175.765 211.017 176.295 209.877 cv
177.491 207.303 178.102 204.454 178.029 201.615 cv
177.964 199.07 177.07 195.542 173.931 195.508 cv
172.317 195.49 170.704 195.479 169.09 195.473 cv
167.703 195.468 166.314 195.468 164.926 195.501 cv
cp
.419608 .423529 .701961 rgb
f
128.112 190.719 mo
125.906 193.123 125.033 196.678 125.872 199.83 cv
126.003 200.32 126.173 200.809 126.171 201.317 cv
126.169 201.865 125.967 202.389 125.818 202.917 cv
125.413 204.344 125.387 205.877 125.744 207.317 cv
125.916 208.009 126.176 208.7 126.123 209.411 cv
126.078 210.005 125.818 210.558 125.622 211.121 cv
124.988 212.938 125.024 214.981 125.721 216.775 cv
125.984 217.453 126.343 218.115 126.388 218.84 cv
126.427 219.461 126.232 220.069 126.107 220.679 cv
125.731 222.518 126.011 224.483 126.885 226.144 cv
127.143 226.635 127.457 227.115 127.553 227.662 cv
127.648 228.203 127.52 228.755 127.393 229.29 cv
126.819 231.699 126.245 234.109 125.671 236.518 cv
125.033 239.197 124.391 241.9 124.318 244.653 cv
124.217 248.407 125.203 252.183 127.126 255.408 cv
128.794 254.858 129.836 253.213 130.533 251.601 cv
132.22 247.701 132.687 243.283 131.851 239.116 cv
131.405 236.89 130.599 234.746 129.6 232.707 cv
129.424 232.35 129.238 231.965 129.299 231.572 cv
129.36 231.177 129.657 230.866 129.919 230.564 cv
132.104 228.042 132.61 224.194 131.152 221.192 cv
130.855 220.581 130.478 219.979 130.425 219.301 cv
130.359 218.446 130.818 217.652 131.136 216.855 cv
131.763 215.285 131.859 213.507 131.405 211.878 cv
131.287 211.455 131.131 211.024 131.189 210.589 cv
131.24 210.201 131.455 209.858 131.633 209.51 cv
132.786 207.26 132.409 204.318 130.725 202.432 cv
131.573 201.211 132.431 199.972 132.93 198.571 cv
133.428 197.171 133.532 195.565 132.88 194.229 cv
132.676 193.811 132.395 193.401 132.395 192.936 cv
132.396 192.495 132.65 192.1 132.881 191.724 cv
134.03 189.859 134.837 187.666 134.518 185.499 cv
134.165 183.098 131.68 180.163 129.212 182.139 cv
128.085 183.042 127.678 184.577 127.507 185.947 cv
127.407 186.751 127.405 187.569 127.505 188.373 cv
127.536 188.626 128.161 190.665 128.112 190.719 cv
cp
.458824 .27451 0 rgb
f
347.159 441.2 mo
283.987 404.727 li
281.633 403.368 281.928 400.994 284.647 399.424 cv
381.124 343.723 li
383.842 342.153 387.955 341.983 390.309 343.342 cv
453.481 379.815 li
455.836 381.174 455.54 383.548 452.822 385.118 cv
356.344 440.819 li
353.626 442.388 349.514 442.559 347.159 441.2 cv
cp
.890196 .92549 1 rgb
f
291.576 398.501 mo
347.864 365.849 li
355.595 409.048 li
347.435 430.618 li
341.211 429.33 li
291.576 398.501 li
cp
1 .917647 0 rgb
f
297.562 381.523 mo
297.562 397.266 li
347.623 426.191 li
347.623 413.716 li
343.518 408.324 li
297.562 381.523 li
cp
.937255 .941176 .94902 rgb
f
297.562 390.399 mo
322.592 404.837 li
297.562 392.076 li
297.562 390.399 li
cp
.807843 .827451 .870588 rgb
f
346.77 432.15 mo
432.739 382.598 li
432.983 382.457 li
434.142 381.749 434.954 380.499 434.954 378.954 cv
434.954 364.841 li
432.391 366.321 li
419.63 373.687 li
416.565 375.451 li
349.422 414.199 li
348.019 429.047 li
346.77 432.15 li
cp
1 .666667 0 rgb
f
338.979 404.207 mo
349.422 414.199 li
416.565 375.451 li
419.63 373.687 li
432.391 366.321 li
434.954 364.841 li
434.954 362.368 433.64 360.089 431.49 358.84 cv
424.51 354.822 li
424.484 354.835 li
421.432 356.599 li
405.735 365.665 li
402.67 367.429 li
338.979 404.207 li
cp
1 .839216 .0392157 rgb
f
347.625 413.72 mo
347.625 426.193 li
345.839 425.166 li
345.839 421.432 li
345.839 420.242 345.921 418.994 345.699 417.827 cv
345.466 416.59 344.778 415.482 343.938 414.584 cv
343.774 414.42 li
341.149 411.737 337.649 410.08 334.429 408.237 cv
331.29 406.451 328.163 404.655 325.036 402.87 cv
321.676 400.944 318.316 399.019 314.956 397.106 cv
311.84 395.321 308.714 393.536 305.599 391.751 cv
303.183 390.362 300.757 388.985 298.341 387.597 cv
298.085 387.445 297.816 387.294 297.56 387.154 cv
297.56 381.518 li
343.518 408.33 li
347.625 413.72 li
cp
.807843 .827451 .870588 rgb
f
343.753 428.624 mo
338.978 425.866 li
291.576 398.501 li
291.576 402.029 li
338.978 429.394 li
343.262 431.865 li
343.896 432.235 344.569 432.409 345.226 432.424 cv
347.402 432.462 349.419 430.739 349.419 428.306 cv
349.419 414.201 li
349.419 411.723 348.105 409.441 345.959 408.202 cv
338.978 404.175 li
338.978 404.21 li
291.576 376.845 li
291.576 380.373 li
338.978 407.738 li
343.262 410.209 li
343.401 410.29 343.543 410.358 343.686 410.421 cv
344.252 410.748 li
345.868 411.677 346.858 413.4 346.858 415.258 cv
346.858 426.826 li
346.858 428.42 345.135 429.417 343.753 428.624 cv
cp
1 .768627 0 rgb
f
291.576 376.845 mo
338.978 404.21 li
424.511 354.818 li
377.109 327.488 li
291.576 376.845 li
cp
1 .917647 0 rgb
f
380.093 408.415 mo
380.093 409.184 li
374.912 412.174 li
374.912 403.383 li
379.995 400.449 li
379.995 401.217 li
375.673 403.712 li
375.673 406.882 li
379.44 404.707 li
379.44 405.437 li
375.673 407.612 li
375.673 410.968 li
380.093 408.415 li
cp
.94902 .94902 .94902 rgb
f
383.186 407.522 mo
382.745 407.777 382.315 407.941 381.893 408.019 cv
381.474 408.096 381.112 408.065 380.808 407.928 cv
381.145 407.163 li
381.462 407.278 381.786 407.312 382.115 407.273 cv
382.446 407.23 382.799 407.1 383.176 406.884 cv
383.631 406.62 383.996 406.304 384.267 405.938 cv
384.537 405.571 384.675 405.193 384.675 404.805 cv
384.675 404.624 384.637 404.495 384.565 404.416 cv
384.493 404.337 384.387 404.295 384.244 404.285 cv
384.104 404.275 383.925 404.298 383.712 404.35 cv
383.5 404.403 383.251 404.475 382.97 404.563 cv
382.644 404.661 382.361 404.733 382.122 404.779 cv
381.883 404.828 381.687 404.838 381.531 404.812 cv
381.374 404.786 381.258 404.711 381.184 404.586 cv
381.107 404.462 381.068 404.27 381.068 404.013 cv
381.068 403.691 381.125 403.374 381.237 403.061 cv
381.35 402.75 381.502 402.459 381.693 402.187 cv
381.885 401.914 382.109 401.664 382.367 401.431 cv
382.623 401.202 382.898 401.002 383.186 400.836 cv
383.621 400.583 384.015 400.436 384.369 400.394 cv
384.725 400.349 385.01 400.397 385.228 400.534 cv
384.869 401.238 li
384.66 401.11 384.405 401.073 384.104 401.122 cv
383.804 401.171 383.49 401.29 383.164 401.48 cv
382.97 401.591 382.788 401.719 382.623 401.86 cv
382.454 402.002 382.309 402.158 382.181 402.331 cv
382.055 402.503 381.957 402.686 381.883 402.881 cv
381.811 403.076 381.775 403.275 381.775 403.483 cv
381.775 403.655 381.8 403.781 381.85 403.859 cv
381.901 403.938 381.984 403.982 382.101 403.994 cv
382.217 404.005 382.362 403.99 382.539 403.951 cv
382.718 403.909 382.932 403.85 383.186 403.77 cv
383.549 403.658 383.866 403.575 384.141 403.516 cv
384.418 403.454 384.647 403.437 384.832 403.464 cv
385.015 403.49 385.156 403.57 385.249 403.706 cv
385.342 403.841 385.391 404.044 385.391 404.316 cv
385.391 404.91 385.192 405.496 384.793 406.073 cv
384.395 406.651 383.86 407.132 383.186 407.522 cv
cp
f
389.278 403.261 mo
389.582 403.086 389.859 402.852 390.109 402.557 cv
390.359 402.266 390.572 401.947 390.749 401.601 cv
390.927 401.254 391.063 400.899 391.158 400.534 cv
391.251 400.171 391.297 399.824 391.297 399.495 cv
391.297 399.148 391.243 398.849 391.135 398.597 cv
391.027 398.348 390.878 398.157 390.69 398.024 cv
390.502 397.895 390.279 397.834 390.022 397.841 cv
389.765 397.851 389.487 397.939 389.191 398.111 cv
389.003 398.221 388.806 398.376 388.599 398.582 cv
388.394 398.787 388.201 399.016 388.024 399.261 cv
387.848 399.507 387.695 399.765 387.568 400.032 cv
387.442 400.299 387.363 400.549 387.335 400.78 cv
387.335 402.76 li
387.422 402.943 387.532 403.094 387.666 403.215 cv
387.8 403.334 387.952 403.418 388.122 403.464 cv
388.293 403.509 388.474 403.519 388.671 403.488 cv
388.865 403.457 389.068 403.382 389.278 403.261 cv
cp
389.486 403.886 mo
389.008 404.161 388.586 404.265 388.219 404.2 cv
387.854 404.134 387.56 403.956 387.335 403.665 cv
387.335 407.64 li
386.597 408.065 li
386.597 398.977 li
387.258 398.595 li
387.258 399.845 li
387.489 399.307 387.79 398.806 388.16 398.34 cv
388.53 397.877 388.931 397.519 389.365 397.268 cv
389.756 397.042 390.114 396.928 390.44 396.925 cv
390.767 396.921 391.048 397.008 391.287 397.18 cv
391.526 397.35 391.713 397.599 391.847 397.926 cv
391.981 398.255 392.047 398.633 392.047 399.062 cv
392.047 399.517 391.986 399.98 391.863 400.456 cv
391.741 400.932 391.564 401.389 391.336 401.824 cv
391.107 402.262 390.837 402.662 390.523 403.018 cv
390.207 403.378 389.86 403.668 389.486 403.886 cv
cp
f
394.892 400.119 mo
395.275 399.896 395.629 399.612 395.951 399.261 cv
396.272 398.909 396.517 398.548 396.682 398.181 cv
396.748 398.068 396.797 397.959 396.83 397.854 cv
396.862 397.749 396.879 397.659 396.879 397.586 cv
396.879 396.534 li
396.632 396.568 396.376 396.633 396.113 396.727 cv
395.848 396.823 395.579 396.948 395.305 397.108 cv
394.783 397.409 394.36 397.776 394.035 398.211 cv
393.707 398.649 393.545 399.068 393.545 399.472 cv
393.545 399.67 393.58 399.837 393.648 399.971 cv
393.717 400.102 393.812 400.201 393.93 400.259 cv
394.049 400.318 394.193 400.338 394.36 400.315 cv
394.526 400.292 394.702 400.227 394.892 400.119 cv
cp
394.717 400.865 mo
394.449 401.019 394.202 401.11 393.974 401.137 cv
393.747 401.166 393.547 401.14 393.377 401.055 cv
393.207 400.973 393.074 400.836 392.979 400.646 cv
392.886 400.459 392.84 400.222 392.84 399.942 cv
392.84 399.661 392.897 399.369 393.012 399.062 cv
393.128 398.756 393.292 398.456 393.501 398.162 cv
393.711 397.867 393.961 397.587 394.251 397.326 cv
394.54 397.064 394.859 396.833 395.206 396.632 cv
395.496 396.465 395.789 396.326 396.087 396.211 cv
396.383 396.097 396.648 396.028 396.879 396 cv
396.879 395.419 li
396.879 394.848 396.738 394.477 396.455 394.306 cv
396.172 394.136 395.781 394.195 395.283 394.483 cv
394.992 394.65 394.696 394.887 394.393 395.195 cv
394.089 395.501 393.781 395.869 393.469 396.298 cv
393.208 395.89 li
393.94 394.907 394.65 394.218 395.337 393.82 cv
396.046 393.41 396.604 393.315 397.008 393.536 cv
397.414 393.755 397.617 394.267 397.617 395.066 cv
397.617 397.975 li
397.617 398.207 397.707 398.27 397.888 398.165 cv
397.888 398.908 li
397.766 399.004 397.671 399.072 397.607 399.109 cv
397.419 399.219 397.271 399.248 397.167 399.202 cv
397.06 399.157 397.005 399.039 396.998 398.854 cv
396.977 398.358 li
396.715 398.898 396.388 399.382 395.993 399.816 cv
395.599 400.253 395.174 400.6 394.717 400.865 cv
cp
f
402.287 388.47 mo
402.118 388.566 401.978 388.623 401.857 388.645 cv
401.737 388.664 401.626 388.672 401.521 388.671 cv
401.416 388.669 401.313 388.671 401.217 388.674 cv
401.118 388.676 401.012 388.71 400.896 388.779 cv
400.773 388.849 400.678 388.933 400.608 389.031 cv
400.541 389.127 400.485 389.224 400.446 389.315 cv
400.405 389.41 400.38 389.489 400.371 389.558 cv
400.353 389.685 li
399.896 389.949 li
399.896 389.908 399.909 389.816 399.935 389.672 cv
399.96 389.531 400.011 389.371 400.083 389.198 cv
400.155 389.024 400.256 388.848 400.385 388.671 cv
400.516 388.491 400.683 388.344 400.886 388.226 cv
401.038 388.137 401.169 388.09 401.282 388.078 cv
401.393 388.067 401.501 388.065 401.601 388.072 cv
401.704 388.082 401.807 388.08 401.912 388.073 cv
402.017 388.067 402.138 388.023 402.275 387.944 cv
402.413 387.866 402.523 387.771 402.606 387.666 cv
402.689 387.561 402.753 387.457 402.796 387.358 cv
402.84 387.26 402.868 387.175 402.879 387.106 cv
402.894 386.979 li
403.351 386.717 li
403.351 386.759 403.336 386.848 403.306 386.99 cv
403.279 387.129 403.226 387.29 403.149 387.463 cv
403.074 387.64 402.964 387.82 402.824 388.006 cv
402.683 388.19 402.503 388.344 402.287 388.47 cv
cp
403.969 395.398 mo
403.231 395.825 li
403.231 392.222 li
403.231 391.453 403.131 390.953 402.932 390.723 cv
402.732 390.49 402.428 390.494 402.014 390.733 cv
401.798 390.857 401.58 391.029 401.364 391.243 cv
401.146 391.461 400.945 391.705 400.762 391.976 cv
400.575 392.248 400.412 392.539 400.266 392.85 cv
400.122 393.161 400.017 393.465 399.952 393.766 cv
399.952 397.717 li
399.214 398.144 li
399.214 391.693 li
399.886 391.305 li
399.886 392.765 li
400.119 392.161 400.449 391.59 400.88 391.052 cv
401.312 390.515 401.778 390.101 402.287 389.808 cv
402.598 389.628 402.861 389.541 403.079 389.548 cv
403.297 389.554 403.47 389.639 403.599 389.803 cv
403.73 389.97 403.823 390.209 403.882 390.52 cv
403.94 390.834 403.969 391.201 403.969 391.621 cv
403.969 395.398 li
cp
f
405.903 391.088 mo
405.903 391.451 405.957 391.755 406.064 392.002 cv
406.173 392.251 406.319 392.438 406.505 392.565 cv
406.689 392.696 406.906 392.754 407.155 392.742 cv
407.405 392.729 407.671 392.642 407.955 392.479 cv
408.237 392.317 408.504 392.094 408.752 391.813 cv
409.003 391.534 409.22 391.22 409.408 390.877 cv
409.597 390.533 409.745 390.173 409.855 389.797 cv
409.963 389.42 410.017 389.05 410.017 388.687 cv
410.017 388.334 409.963 388.026 409.855 387.771 cv
409.745 387.517 409.597 387.326 409.408 387.2 cv
409.22 387.074 409.003 387.015 408.752 387.021 cv
408.504 387.028 408.237 387.116 407.955 387.278 cv
407.671 387.442 407.407 387.661 407.162 387.939 cv
406.916 388.219 406.697 388.533 406.51 388.88 cv
406.322 389.227 406.173 389.59 406.064 389.973 cv
405.957 390.353 405.903 390.724 405.903 391.088 cv
cp
407.955 393.221 mo
407.541 393.46 407.165 393.586 406.825 393.606 cv
406.486 393.626 406.19 393.554 405.939 393.393 cv
405.691 393.233 405.496 392.991 405.358 392.665 cv
405.221 392.34 405.154 391.953 405.154 391.508 cv
405.154 391.053 405.224 390.582 405.365 390.098 cv
405.506 389.612 405.702 389.144 405.951 388.695 cv
406.201 388.245 406.496 387.831 406.834 387.453 cv
407.175 387.075 407.549 386.769 407.955 386.535 cv
408.359 386.301 408.734 386.175 409.078 386.157 cv
409.422 386.141 409.719 386.213 409.968 386.377 cv
410.218 386.537 410.413 386.779 410.555 387.1 cv
410.696 387.424 410.767 387.813 410.767 388.267 cv
410.767 388.713 410.698 389.176 410.56 389.662 cv
410.421 390.147 410.23 390.612 409.979 391.06 cv
409.729 391.512 409.433 391.924 409.088 392.3 cv
408.746 392.675 408.368 392.984 407.955 393.221 cv
cp
f
412.038 381.7 mo
412.776 381.274 li
412.776 388.852 li
412.776 389.091 412.833 389.247 412.949 389.315 cv
413.066 389.386 413.228 389.358 413.437 389.237 cv
413.517 389.191 413.612 389.126 413.72 389.039 cv
413.828 388.949 413.93 388.859 414.025 388.762 cv
414.155 389.368 li
414.018 389.515 413.848 389.666 413.648 389.823 cv
413.45 389.978 413.278 390.098 413.134 390.18 cv
412.792 390.378 412.526 390.425 412.331 390.317 cv
412.135 390.211 412.038 389.96 412.038 389.564 cv
412.038 381.7 li
cp
f
368.175 418.618 mo
357.849 424.581 li
357.443 424.815 357.115 424.566 357.115 424.026 cv
357.115 412.448 li
357.115 411.908 357.443 411.28 357.849 411.046 cv
368.175 405.084 li
368.581 404.85 368.909 405.098 368.909 405.639 cv
368.909 417.216 li
368.909 417.756 368.581 418.384 368.175 418.618 cv
cp
1 .917647 0 rgb
f
368.91 405.568 mo
368.91 407.624 li
357.115 414.434 li
357.115 412.378 li
357.115 411.876 357.469 411.265 357.906 411.013 cv
368.118 405.117 li
368.555 404.864 368.91 405.066 368.91 405.568 cv
cp
.905882 .0117647 .0901961 rgb
f
368.91 415.428 mo
368.91 417.286 li
368.91 417.788 368.555 418.399 368.118 418.651 cv
357.906 424.548 li
357.469 424.8 357.115 424.598 357.115 424.096 cv
357.115 422.238 li
368.91 415.428 li
cp
f
307.397 396.187 mo
307.172 396.312 306.97 396.488 306.77 396.663 cv
306.169 397.239 305.717 397.966 305.316 398.693 cv
305.191 398.944 305.041 399.22 304.941 399.495 cv
304.163 401.124 303.587 402.853 302.685 404.432 cv
301.357 406.688 299.276 408.518 296.871 409.545 cv
297.29 406.027 li
291.074 406.127 li
293.481 405.099 295.536 403.269 296.864 401.014 cv
297.766 399.46 298.342 397.731 299.095 396.102 cv
299.22 395.826 299.346 395.55 299.496 395.275 cv
299.897 394.548 300.348 393.821 300.949 393.245 cv
301.125 393.069 301.325 392.919 301.526 392.793 cv
307.397 396.187 li
cp
f
303.204 373.092 mo
359.493 340.44 li
367.224 383.64 li
359.064 405.209 li
352.839 403.922 li
303.204 373.092 li
cp
.843137 .866667 .909804 rgb
f
309.191 356.115 mo
309.191 371.858 li
359.251 400.783 li
359.251 388.308 li
355.147 382.915 li
309.191 356.115 li
cp
.901961 .901961 .901961 rgb
f
309.191 369.228 mo
334.221 383.667 li
309.191 370.906 li
309.191 369.228 li
cp
.701961 .701961 .701961 rgb
f
358.398 406.742 mo
444.367 357.19 li
444.612 357.048 li
445.771 356.34 446.582 355.091 446.582 353.546 cv
446.582 339.432 li
444.02 340.913 li
431.258 348.279 li
428.193 350.043 li
361.051 388.791 li
359.647 403.638 li
358.398 406.742 li
cp
.701961 .729412 .788235 rgb
f
350.607 378.798 mo
361.051 388.791 li
428.193 350.043 li
431.258 348.279 li
444.02 340.913 li
446.582 339.432 li
446.582 336.96 445.269 334.68 443.118 333.431 cv
436.139 329.413 li
436.113 329.426 li
433.061 331.19 li
417.363 340.256 li
414.299 342.02 li
350.607 378.798 li
cp
.843137 .866667 .909804 rgb
f
359.253 388.312 mo
359.253 400.784 li
357.468 399.757 li
357.468 396.024 li
357.468 394.834 357.549 393.585 357.328 392.418 cv
357.094 391.182 356.406 390.073 355.566 389.175 cv
355.403 389.012 li
352.778 386.328 349.277 384.671 346.057 382.828 cv
342.919 381.043 339.792 379.246 336.665 377.461 cv
333.305 375.536 329.944 373.611 326.584 371.697 cv
323.469 369.912 320.342 368.127 317.227 366.342 cv
314.812 364.953 312.385 363.577 309.97 362.188 cv
309.713 362.037 309.445 361.885 309.188 361.745 cv
309.188 356.11 li
355.146 382.921 li
359.253 388.312 li
cp
.94902 .94902 .94902 rgb
f
355.381 403.215 mo
350.607 400.457 li
303.204 373.092 li
303.204 376.62 li
350.607 403.986 li
354.89 406.456 li
355.525 406.827 356.197 407 356.855 407.015 cv
359.031 407.053 361.048 405.331 361.048 402.898 cv
361.048 388.792 li
361.048 386.314 359.733 384.032 357.588 382.793 cv
350.607 378.766 li
350.607 378.801 li
303.204 351.436 li
303.204 354.965 li
350.607 382.33 li
354.89 384.8 li
355.03 384.882 355.172 384.95 355.315 385.013 cv
355.88 385.339 li
357.497 386.268 358.487 387.991 358.487 389.85 cv
358.487 401.417 li
358.487 403.011 356.764 404.008 355.381 403.215 cv
cp
.807843 .827451 .870588 rgb
f
303.204 351.436 mo
350.607 378.801 li
436.14 329.41 li
388.738 302.08 li
303.204 351.436 li
cp
.901961 .901961 .901961 rgb
f
386.102 383.009 mo
388.566 381.585 li
388.79 381.454 388.995 381.281 389.18 381.065 cv
389.363 380.846 389.52 380.607 389.651 380.346 cv
389.782 380.085 389.883 379.811 389.955 379.527 cv
390.027 379.242 390.065 378.967 390.065 378.702 cv
390.065 378.43 390.022 378.196 389.939 378.002 cv
389.857 377.805 389.744 377.656 389.603 377.556 cv
389.461 377.457 389.296 377.409 389.104 377.417 cv
388.911 377.426 388.71 377.491 388.5 377.612 cv
386.102 378.996 li
386.102 383.009 li
cp
385.341 387.46 mo
385.341 378.669 li
388.533 376.827 li
388.865 376.634 389.171 376.537 389.451 376.535 cv
389.729 376.539 389.97 376.607 390.173 376.751 cv
390.376 376.895 390.534 377.097 390.651 377.36 cv
390.767 377.625 390.824 377.925 390.824 378.263 cv
390.824 378.627 390.77 379.006 390.662 379.402 cv
390.552 379.802 390.4 380.185 390.206 380.551 cv
390.009 380.921 389.777 381.261 389.505 381.575 cv
389.234 381.89 388.931 382.143 388.599 382.335 cv
386.102 383.778 li
386.102 387.021 li
385.341 387.46 li
cp
.94902 .94902 .94902 rgb
f
391.942 385.355 mo
392.05 385.411 392.159 385.426 392.269 385.405 cv
392.375 385.382 392.492 385.336 392.616 385.266 cv
392.709 385.211 392.801 385.126 392.892 385.012 cv
392.982 384.897 393.073 384.74 393.164 384.534 cv
393.253 384.329 393.347 384.071 393.441 383.762 cv
393.534 383.451 393.639 383.065 393.755 382.601 cv
391.29 377.573 li
392.05 377.134 li
394.146 381.595 li
396.09 374.802 li
396.797 374.395 li
394.157 383.434 li
394.048 383.817 393.938 384.151 393.825 384.431 cv
393.714 384.711 393.598 384.95 393.478 385.149 cv
393.359 385.352 393.231 385.519 393.099 385.65 cv
392.965 385.779 392.819 385.892 392.659 385.984 cv
392.333 386.172 392.082 386.216 391.909 386.118 cv
391.942 385.355 li
cp
f
397.24 377.345 mo
397.24 376.891 397.309 376.422 397.447 375.94 cv
397.584 375.454 397.779 374.991 398.027 374.546 cv
398.278 374.099 398.576 373.688 398.922 373.315 cv
399.271 372.942 399.654 372.634 400.076 372.391 cv
400.611 372.081 401.078 371.95 401.475 371.996 cv
401.875 372.042 402.174 372.242 402.377 372.597 cv
401.66 373.271 li
401.501 373.032 401.279 372.903 400.992 372.883 cv
400.706 372.86 400.39 372.952 400.043 373.151 cv
399.752 373.32 399.484 373.541 399.233 373.817 cv
398.985 374.092 398.765 374.398 398.582 374.732 cv
398.397 375.066 398.253 375.419 398.148 375.793 cv
398.044 376.167 397.991 376.542 397.991 376.912 cv
397.991 377.275 398.045 377.586 398.152 377.848 cv
398.261 378.105 398.41 378.299 398.599 378.424 cv
398.785 378.551 399.006 378.61 399.255 378.604 cv
399.505 378.594 399.77 378.509 400.053 378.347 cv
400.235 378.242 400.413 378.11 400.592 377.949 cv
400.768 377.789 400.932 377.612 401.084 377.422 cv
401.236 377.233 401.366 377.039 401.475 376.843 cv
401.585 376.65 401.66 376.465 401.704 376.29 cv
402.431 376.12 li
402.351 376.396 402.235 376.676 402.084 376.958 cv
401.932 377.239 401.752 377.511 401.546 377.774 cv
401.34 378.039 401.112 378.283 400.862 378.506 cv
400.613 378.728 400.353 378.916 400.086 379.072 cv
399.674 379.309 399.292 379.438 398.945 379.461 cv
398.599 379.486 398.299 379.415 398.045 379.252 cv
397.79 379.088 397.594 378.846 397.453 378.522 cv
397.312 378.2 397.24 377.807 397.24 377.345 cv
cp
f
403.138 373.94 mo
403.138 373.485 403.207 373.017 403.344 372.534 cv
403.482 372.048 403.675 371.585 403.925 371.14 cv
404.175 370.694 404.473 370.284 404.82 369.911 cv
405.169 369.537 405.551 369.229 405.972 368.985 cv
406.507 368.678 406.974 368.545 407.373 368.592 cv
407.77 368.638 408.072 368.838 408.273 369.191 cv
407.556 369.866 li
407.397 369.627 407.175 369.497 406.888 369.478 cv
406.602 369.457 406.286 369.548 405.939 369.748 cv
405.65 369.915 405.38 370.137 405.131 370.412 cv
404.881 370.687 404.663 370.995 404.478 371.328 cv
404.295 371.662 404.149 372.016 404.044 372.389 cv
403.94 372.762 403.887 373.137 403.887 373.508 cv
403.887 373.871 403.941 374.182 404.049 374.443 cv
404.159 374.699 404.306 374.894 404.496 375.02 cv
404.683 375.148 404.902 375.207 405.152 375.198 cv
405.401 375.19 405.668 375.105 405.949 374.942 cv
406.131 374.837 406.309 374.706 406.487 374.546 cv
406.666 374.384 406.829 374.208 406.982 374.019 cv
407.132 373.827 407.263 373.634 407.373 373.439 cv
407.481 373.245 407.556 373.06 407.6 372.886 cv
408.327 372.716 li
408.248 372.991 408.132 373.272 407.98 373.552 cv
407.829 373.835 407.649 374.107 407.443 374.369 cv
407.237 374.634 407.008 374.878 406.759 375.1 cv
406.509 375.323 406.25 375.511 405.982 375.667 cv
405.569 375.904 405.19 376.035 404.843 376.058 cv
404.496 376.081 404.195 376.012 403.941 375.848 cv
403.688 375.685 403.491 375.441 403.349 375.118 cv
403.208 374.794 403.138 374.402 403.138 373.94 cv
cp
f
412.843 365.13 mo
413.669 364.652 li
411.531 369.008 li
413.854 370.998 li
413.03 371.473 li
411.032 369.679 li
410.228 370.144 li
410.228 373.091 li
409.5 373.511 li
409.5 367.061 li
410.228 366.64 li
410.228 369.488 li
410.966 369.06 li
412.843 365.13 li
cp
f
415.484 368.867 mo
418.862 361.656 li
419.457 361.311 li
419.457 367.761 li
418.731 368.182 li
418.731 363.019 li
415.419 370.095 li
414.756 370.478 li
414.756 364.027 li
415.484 363.605 li
415.484 368.867 li
cp
f
425.06 355.662 mo
425.046 356.058 424.906 356.434 424.643 356.788 cv
424.378 357.144 424.013 357.455 423.552 357.722 cv
423.082 357.994 422.715 358.103 422.455 358.051 cv
422.193 358 422.053 357.786 422.031 357.409 cv
422.498 357.141 li
422.512 357.413 422.606 357.557 422.781 357.567 cv
422.954 357.578 423.21 357.485 423.552 357.288 cv
423.892 357.092 424.147 356.891 424.317 356.685 cv
424.488 356.48 424.584 356.226 424.605 355.924 cv
425.06 355.662 li
cp
421.846 365.195 mo
425.224 357.982 li
425.821 357.639 li
425.821 364.089 li
425.093 364.508 li
425.093 359.345 li
421.781 366.419 li
421.118 366.802 li
421.118 360.352 li
421.846 359.933 li
421.846 365.195 li
cp
f
378.553 393.695 mo
368.526 399.484 li
368.133 399.712 367.814 399.471 367.814 398.946 cv
367.814 387.705 li
367.814 387.18 368.133 386.57 368.526 386.343 cv
378.553 380.554 li
378.947 380.327 379.266 380.568 379.266 381.093 cv
379.266 392.334 li
379.266 392.858 378.947 393.468 378.553 393.695 cv
cp
0 .223529 .65098 rgb
f
379.266 381.024 mo
379.266 384.637 li
367.814 391.249 li
367.814 387.636 li
367.814 387.15 368.158 386.556 368.582 386.311 cv
378.498 380.586 li
378.922 380.341 379.266 380.537 379.266 381.024 cv
cp
.94902 .94902 .94902 rgb
f
379.266 389.215 mo
379.266 392.402 li
379.266 392.889 378.922 393.483 378.498 393.728 cv
368.582 399.453 li
368.158 399.698 367.814 399.502 367.814 399.015 cv
367.814 395.827 li
379.266 389.215 li
cp
.835294 .168627 .117647 rgb
f
325.698 378.986 mo
325.472 379.111 325.271 379.287 325.071 379.462 cv
324.47 380.039 324.018 380.766 323.617 381.492 cv
323.492 381.743 323.342 382.019 323.242 382.294 cv
322.464 383.923 321.888 385.653 320.986 387.232 cv
319.657 389.488 317.577 391.317 315.171 392.345 cv
315.591 388.826 li
309.375 388.927 li
311.782 387.899 313.836 386.069 315.165 383.814 cv
316.067 382.259 316.643 380.531 317.396 378.901 cv
317.521 378.626 317.647 378.35 317.796 378.074 cv
318.198 377.348 318.649 376.621 319.25 376.044 cv
319.425 375.868 319.626 375.719 319.827 375.593 cv
325.698 378.986 li
cp
0 .223529 .65098 rgb
f
289.359 355.291 mo
345.647 322.639 li
353.378 365.839 li
345.218 387.408 li
338.994 386.121 li
289.359 355.291 li
cp
.34902 .34902 .580392 rgb
f
295.345 338.314 mo
295.345 354.056 li
345.406 382.982 li
345.406 370.507 li
341.301 365.115 li
295.345 338.314 li
cp
.937255 .941176 .94902 rgb
f
295.345 344.556 mo
320.375 358.995 li
295.345 346.234 li
295.345 344.556 li
cp
.807843 .827451 .870588 rgb
f
344.553 388.941 mo
430.522 339.389 li
430.767 339.247 li
431.926 338.539 432.737 337.29 432.737 335.745 cv
432.737 321.631 li
430.174 323.112 li
417.413 330.478 li
414.348 332.242 li
347.205 370.99 li
345.802 385.837 li
344.553 388.941 li
cp
.188235 .188235 .419608 rgb
f
378.82 364.021 mo
378.82 364.786 li
373.641 367.778 li
373.641 358.987 li
378.721 356.053 li
378.721 356.82 li
374.4 359.316 li
374.4 362.486 li
378.168 360.309 li
378.168 361.039 li
374.4 363.215 li
374.4 366.572 li
378.82 364.021 li
cp
.94902 .94902 .94902 rgb
f
384.791 361.34 mo
384.053 361.766 li
384.053 358.162 li
384.053 357.395 383.953 356.896 383.755 356.663 cv
383.554 356.433 383.249 356.434 382.835 356.673 cv
382.619 356.799 382.402 356.971 382.186 357.185 cv
381.968 357.403 381.767 357.645 381.584 357.917 cv
381.397 358.19 381.233 358.48 381.089 358.791 cv
380.944 359.102 380.839 359.408 380.773 359.709 cv
380.773 363.659 li
380.035 364.086 li
380.035 357.635 li
380.708 357.246 li
380.708 358.707 li
380.94 358.103 381.271 357.531 381.701 356.994 cv
382.133 356.457 382.601 356.042 383.109 355.75 cv
383.42 355.57 383.683 355.482 383.901 355.49 cv
384.118 355.495 384.292 355.582 384.421 355.745 cv
384.552 355.911 384.645 356.15 384.704 356.46 cv
384.761 356.775 384.791 357.141 384.791 357.563 cv
384.791 361.34 li
cp
f
388.842 358.382 mo
389.059 358.257 389.271 358.089 389.482 357.874 cv
389.692 357.665 389.882 357.432 390.052 357.18 cv
390.222 356.932 390.366 356.676 390.482 356.419 cv
390.597 356.163 390.672 355.927 390.708 355.708 cv
390.708 353.713 li
390.629 353.528 390.521 353.376 390.384 353.256 cv
390.246 353.139 390.091 353.058 389.916 353.021 cv
389.742 352.978 389.556 352.975 389.358 353.008 cv
389.158 353.04 388.957 353.116 388.754 353.233 cv
388.435 353.417 388.152 353.656 387.902 353.953 cv
387.653 354.25 387.44 354.572 387.267 354.921 cv
387.093 355.269 386.961 355.624 386.871 355.991 cv
386.779 356.357 386.735 356.701 386.735 357.023 cv
386.735 357.37 386.789 357.668 386.897 357.92 cv
387.007 358.17 387.157 358.359 387.349 358.483 cv
387.54 358.607 387.762 358.666 388.016 358.655 cv
388.27 358.643 388.545 358.555 388.842 358.382 cv
cp
388.635 359.206 mo
388.244 359.432 387.888 359.545 387.564 359.547 cv
387.244 359.547 386.964 359.461 386.728 359.291 cv
386.494 359.123 386.311 358.876 386.18 358.555 cv
386.049 358.234 385.985 357.864 385.985 357.442 cv
385.985 356.997 386.049 356.534 386.177 356.051 cv
386.303 355.57 386.481 355.109 386.714 354.67 cv
386.944 354.232 387.223 353.828 387.543 353.459 cv
387.866 353.093 388.222 352.797 388.613 352.571 cv
389.098 352.291 389.518 352.186 389.873 352.258 cv
390.228 352.33 390.531 352.504 390.785 352.779 cv
390.785 351.429 li
391.448 351.046 li
391.448 357.521 li
391.448 357.967 391.372 358.404 391.223 358.833 cv
391.076 359.26 390.876 359.661 390.628 360.038 cv
390.377 360.414 390.085 360.756 389.747 361.065 cv
389.412 361.376 389.054 361.638 388.679 361.855 cv
388.028 362.232 387.502 362.404 387.105 362.368 cv
386.705 362.335 386.383 362.166 386.138 361.864 cv
386.594 361.19 li
386.818 361.474 387.115 361.605 387.484 361.586 cv
387.853 361.566 388.25 361.435 388.679 361.188 cv
388.954 361.029 389.214 360.834 389.459 360.607 cv
389.706 360.378 389.921 360.126 390.106 359.851 cv
390.291 359.573 390.438 359.275 390.546 358.951 cv
390.654 358.629 390.708 358.295 390.708 357.948 cv
390.708 356.673 li
390.492 357.21 390.196 357.707 389.818 358.165 cv
389.443 358.62 389.047 358.969 388.635 359.206 cv
cp
f
393.108 347.498 mo
393.846 347.071 li
393.846 354.651 li
393.846 354.889 393.904 355.043 394.02 355.112 cv
394.136 355.184 394.3 355.156 394.509 355.035 cv
394.588 354.989 394.683 354.922 394.791 354.837 cv
394.9 354.747 395 354.657 395.095 354.561 cv
395.226 355.166 li
395.089 355.312 394.92 355.462 394.72 355.619 cv
394.522 355.776 394.35 355.894 394.205 355.978 cv
393.865 356.176 393.596 356.221 393.401 356.113 cv
393.207 356.009 393.108 355.757 393.108 355.361 cv
393.108 347.498 li
cp
f
396.029 354.85 mo
396.029 348.4 li
396.767 347.974 li
396.767 354.425 li
396.029 354.85 li
cp
396.029 347.051 mo
396.029 345.811 li
396.767 345.385 li
396.767 346.624 li
396.029 347.051 li
cp
f
400.276 352.523 mo
399.834 352.779 399.404 352.944 398.983 353.021 cv
398.563 353.099 398.202 353.068 397.896 352.929 cv
398.235 352.167 li
398.553 352.281 398.877 352.315 399.206 352.275 cv
399.536 352.232 399.888 352.103 400.266 351.885 cv
400.721 351.623 401.084 351.307 401.356 350.939 cv
401.628 350.573 401.763 350.196 401.763 349.807 cv
401.763 349.627 401.726 349.496 401.654 349.418 cv
401.582 349.339 401.475 349.296 401.335 349.288 cv
401.194 349.277 401.016 349.3 400.803 349.352 cv
400.588 349.406 400.34 349.476 400.058 349.566 cv
399.732 349.663 399.451 349.735 399.211 349.782 cv
398.973 349.83 398.775 349.84 398.62 349.814 cv
398.464 349.787 398.348 349.712 398.273 349.588 cv
398.196 349.463 398.158 349.273 398.158 349.015 cv
398.158 348.694 398.214 348.377 398.327 348.064 cv
398.438 347.752 398.59 347.46 398.783 347.189 cv
398.975 346.917 399.198 346.665 399.456 346.433 cv
399.713 346.204 399.986 346.004 400.276 345.837 cv
400.711 345.587 401.104 345.44 401.459 345.395 cv
401.814 345.353 402.099 345.398 402.318 345.538 cv
401.958 346.24 li
401.749 346.112 401.493 346.076 401.194 346.125 cv
400.893 346.174 400.58 346.294 400.254 346.482 cv
400.058 346.595 399.876 346.721 399.711 346.862 cv
399.544 347.005 399.399 347.161 399.271 347.334 cv
399.145 347.506 399.045 347.69 398.973 347.883 cv
398.901 348.079 398.864 348.279 398.864 348.485 cv
398.864 348.658 398.89 348.783 398.94 348.861 cv
398.99 348.94 399.073 348.986 399.189 348.995 cv
399.305 349.008 399.451 348.994 399.629 348.953 cv
399.806 348.912 400.022 348.853 400.276 348.773 cv
400.637 348.661 400.955 348.576 401.23 348.517 cv
401.506 348.457 401.737 348.441 401.92 348.465 cv
402.105 348.491 402.244 348.573 402.339 348.707 cv
402.433 348.845 402.48 349.048 402.48 349.319 cv
402.48 349.912 402.28 350.499 401.883 351.077 cv
401.483 351.653 400.948 352.135 400.276 352.523 cv
cp
f
408.441 347.686 mo
407.702 348.112 li
407.702 344.508 li
407.702 343.774 407.592 343.289 407.371 343.054 cv
407.15 342.818 406.826 342.823 406.399 343.07 cv
406.19 343.191 405.98 343.36 405.776 343.572 cv
405.568 343.787 405.375 344.027 405.195 344.297 cv
405.013 344.567 404.856 344.852 404.72 345.153 cv
404.588 345.453 404.488 345.754 404.424 346.055 cv
404.424 350.005 li
403.684 350.432 li
403.684 341.393 li
404.424 340.966 li
404.424 345.016 li
404.647 344.399 404.959 343.834 405.357 343.324 cv
405.754 342.813 406.185 342.427 406.648 342.159 cv
406.974 341.97 407.248 341.879 407.474 341.884 cv
407.698 341.893 407.882 341.975 408.027 342.136 cv
408.173 342.294 408.278 342.528 408.343 342.833 cv
408.409 343.137 408.441 343.497 408.441 343.909 cv
408.441 347.686 li
cp
f
365.39 375.78 mo
354.66 381.975 li
354.239 382.218 353.898 381.96 353.898 381.398 cv
353.898 369.37 li
353.898 368.808 354.239 368.156 354.66 367.913 cv
365.39 361.718 li
365.811 361.475 366.152 361.733 366.152 362.295 cv
366.152 374.323 li
366.152 374.885 365.811 375.537 365.39 375.78 cv
cp
.419608 .423529 .701961 rgb
f
366.153 362.221 mo
366.153 363.621 li
361.749 371.217 li
360.616 370.571 li
365.789 361.649 li
365.79 361.648 li
366.009 361.691 366.153 361.895 366.153 362.221 cv
cp
.94902 .94902 .94902 rgb
f
360.215 370.83 mo
359.082 372.784 li
353.898 369.828 li
353.898 369.297 li
353.898 368.776 354.266 368.141 354.72 367.878 cv
354.878 367.787 li
360.215 370.83 li
cp
f
366.153 373.243 mo
366.153 374.397 li
366.153 374.787 365.946 375.242 365.65 375.556 cv
361.54 373.213 li
362.673 371.259 li
366.153 373.243 li
cp
f
366.153 362.221 mo
366.153 362.433 li
361.364 370.694 li
360.906 371.483 li
360.456 372.259 li
359.999 373.049 li
359.739 373.496 li
359.288 373.239 li
359.282 373.235 li
359.542 372.788 li
359.999 371.998 li
360.449 371.223 li
360.65 370.876 li
360.907 370.434 li
365.956 361.724 li
366.079 361.818 366.153 361.987 366.153 362.221 cv
cp
.784314 .0627451 .180392 rgb
f
361.19 372.679 mo
360.733 373.467 li
359.999 373.049 li
359.548 372.791 li
359.542 372.788 li
353.898 369.57 li
353.898 369.297 li
353.898 369.078 353.961 368.842 354.071 368.62 cv
359.547 371.742 li
359.999 371.998 li
360.456 372.259 li
361.19 372.679 li
cp
f
366.153 373.424 mo
366.153 374.397 li
366.15 374.473 li
360.906 371.483 li
360.254 371.112 li
360.455 370.765 li
360.711 370.322 li
366.153 373.424 li
cp
f
358.85 374.318 mo
354.366 382.052 li
354.089 382.061 353.898 381.847 353.898 381.472 cv
353.898 380.26 li
357.717 373.672 li
358.85 374.318 li
cp
.94902 .94902 .94902 rgb
f
360.656 370.879 mo
360.455 371.226 li
360.005 372.001 li
359.548 372.791 li
359.288 373.239 li
354.194 382.026 li
354.015 381.958 353.901 381.769 353.898 381.486 cv
359.09 372.53 li
359.547 371.742 li
360.199 370.617 li
360.455 370.765 li
360.65 370.876 li
360.656 370.879 li
cp
.784314 .0627451 .180392 rgb
f
366.153 366.263 mo
366.153 370.355 li
361.901 372.809 li
361.901 377.795 li
358.336 379.853 li
358.336 374.868 li
353.898 377.43 li
353.898 373.339 li
358.336 370.776 li
358.336 365.791 li
361.901 363.732 li
361.901 368.718 li
366.153 366.263 li
cp
.94902 .94902 .94902 rgb
f
366.153 367.112 mo
366.153 369.506 li
361.162 372.388 li
361.162 378.222 li
359.075 379.426 li
359.075 373.592 li
353.898 376.582 li
353.898 374.187 li
359.075 371.198 li
359.075 365.364 li
361.162 364.159 li
361.162 369.993 li
366.153 367.112 li
cp
.784314 .0627451 .180392 rgb
f
336.762 360.997 mo
347.205 370.99 li
414.348 332.242 li
417.413 330.478 li
430.174 323.112 li
432.737 321.631 li
432.737 319.159 431.423 316.879 429.273 315.63 cv
422.293 311.612 li
422.267 311.625 li
419.216 313.389 li
403.518 322.455 li
400.453 324.219 li
336.762 360.997 li
cp
.34902 .34902 .580392 rgb
f
345.408 370.511 mo
345.408 382.983 li
343.622 381.956 li
343.622 378.223 li
343.622 377.033 343.704 375.784 343.482 374.617 cv
343.249 373.381 342.561 372.272 341.72 371.374 cv
341.557 371.211 li
338.932 368.527 335.432 366.87 332.212 365.027 cv
329.073 363.242 325.946 361.445 322.819 359.66 cv
319.459 357.735 316.099 355.81 312.739 353.896 cv
309.624 352.111 306.497 350.326 303.382 348.541 cv
300.966 347.153 298.54 345.776 296.125 344.387 cv
295.868 344.236 295.599 344.084 295.343 343.944 cv
295.343 338.309 li
341.301 365.12 li
345.408 370.511 li
cp
.807843 .827451 .870588 rgb
f
341.536 385.414 mo
336.761 382.656 li
289.359 355.291 li
289.359 358.819 li
336.761 386.185 li
341.045 388.655 li
341.68 389.026 342.352 389.199 343.009 389.214 cv
345.185 389.252 347.202 387.53 347.202 385.097 cv
347.202 370.991 li
347.202 368.513 345.888 366.231 343.742 364.992 cv
336.761 360.965 li
336.761 361 li
289.359 333.635 li
289.359 337.164 li
336.761 364.529 li
341.045 366.999 li
341.185 367.081 341.327 367.149 341.469 367.212 cv
342.035 367.538 li
343.651 368.467 344.641 370.19 344.641 372.049 cv
344.641 383.616 li
344.641 385.21 342.919 386.207 341.536 385.414 cv
cp
.301961 .301961 .501961 rgb
f
289.359 333.635 mo
336.761 361 li
422.294 311.609 li
374.892 284.279 li
289.359 333.635 li
cp
.419608 .423529 .701961 rgb
f
321.077 359.467 mo
320.851 359.592 320.65 359.767 320.45 359.943 cv
319.849 360.519 319.397 361.246 318.996 361.973 cv
318.871 362.223 318.721 362.499 318.621 362.775 cv
317.843 364.404 317.267 366.133 316.365 367.712 cv
315.036 369.968 312.956 371.798 310.55 372.825 cv
310.97 369.307 li
304.754 369.407 li
307.161 368.379 309.216 366.549 310.544 364.294 cv
311.446 362.74 312.022 361.011 312.775 359.382 cv
312.9 359.106 313.026 358.83 313.176 358.555 cv
313.577 357.828 314.028 357.101 314.629 356.525 cv
314.805 356.349 315.005 356.199 315.206 356.073 cv
321.077 359.467 li
cp
.980392 .517647 .0235294 rgb
f
313.102 313.394 mo
369.39 280.742 li
377.121 323.942 li
368.961 345.511 li
362.737 344.224 li
313.102 313.394 li
cp
1 .341176 .25098 rgb
f
319.088 296.416 mo
319.088 312.159 li
369.149 341.085 li
369.149 328.61 li
365.044 323.217 li
319.088 296.416 li
cp
.937255 .941176 .94902 rgb
f
319.088 306.162 mo
364.473 332.342 li
319.088 307.839 li
319.088 306.162 li
cp
.807843 .827451 .870588 rgb
f
368.296 347.044 mo
454.265 297.491 li
454.509 297.35 li
455.668 296.642 456.48 295.392 456.48 293.847 cv
456.48 279.734 li
453.917 281.215 li
441.156 288.58 li
438.091 290.345 li
370.948 329.093 li
369.545 343.94 li
368.296 347.044 li
cp
.870588 .160784 .0627451 rgb
f
411.482 314.155 mo
407.48 316.466 li
407.48 312.859 li
411.482 310.549 li
411.482 314.155 li
cp
402.786 319.176 mo
402.786 315.57 li
406.788 313.259 li
406.788 316.865 li
402.786 319.176 li
cp
411.482 309.755 mo
407.48 312.065 li
407.48 310.762 li
408.032 310.443 li
408.032 309.978 li
407.48 310.297 li
406.788 310.697 li
406.788 311.161 li
406.788 312.465 li
402.786 314.775 li
402.786 314.754 li
402.094 315.153 li
402.094 315.175 li
402.094 315.969 li
402.094 319.576 li
402.094 320.37 li
402.094 321.553 li
402.786 321.153 li
402.786 319.97 li
406.788 317.66 li
406.788 322.264 li
407.48 321.865 li
407.48 317.26 li
411.482 314.949 li
411.482 316.133 li
412.174 315.733 li
412.174 314.55 li
412.174 313.755 li
412.174 310.149 li
412.174 309.355 li
412.174 309.333 li
411.482 309.733 li
411.482 309.755 li
cp
.94902 .94902 .94902 rgb
f
416.903 307.419 mo
422.559 304.154 li
421.822 306.205 420.864 308.243 419.731 310.194 cv
418.598 309.552 417.64 308.619 416.903 307.419 cv
cp
426.119 310.996 mo
423.976 311.466 421.996 311.277 420.325 310.515 cv
421.617 308.289 422.7 305.953 423.497 303.612 cv
424.894 302.806 li
424.894 302.011 li
420.373 304.621 li
420.373 303.318 li
420.925 302.999 li
420.925 302.535 li
420.373 302.853 li
419.681 303.253 li
419.681 303.718 li
419.681 305.021 li
414.814 307.831 li
414.814 308.626 li
415.965 307.961 li
416.762 309.381 417.845 310.466 419.137 311.201 cv
417.466 313.892 415.486 316.368 413.343 318.372 cv
413.591 319.139 li
415.864 317.013 417.963 314.381 419.731 311.522 cv
421.499 312.339 423.598 312.548 425.871 312.049 cv
426.119 310.996 li
cp
f
388.931 334.009 mo
378.604 339.971 li
378.199 340.205 377.87 339.956 377.87 339.416 cv
377.87 327.839 li
377.87 327.298 378.199 326.67 378.604 326.436 cv
388.931 320.474 li
389.337 320.24 389.665 320.488 389.665 321.029 cv
389.665 332.606 li
389.665 333.147 389.337 333.775 388.931 334.009 cv
cp
.901961 .901961 .901961 rgb
f
388.521 333.708 mo
379.015 339.196 li
378.642 339.412 378.339 339.183 378.339 338.685 cv
378.339 328.028 li
378.339 327.53 378.642 326.952 379.015 326.737 cv
388.521 321.248 li
388.894 321.033 389.197 321.261 389.197 321.759 cv
389.197 332.417 li
389.197 332.914 388.894 333.492 388.521 333.708 cv
cp
.870588 .160784 .0627451 rgb
f
380.867 330.055 mo
379.796 331.319 li
380 329.832 li
379.134 329.363 li
380.331 328.472 li
380.867 326.918 li
381.403 327.854 li
382.6 327.362 li
381.734 328.832 li
381.938 330.082 li
380.867 330.055 li
cp
1 .870588 0 rgb
f
383.536 325.664 mo
383.229 326.027 li
383.287 325.6 li
383.038 325.465 li
383.382 325.209 li
383.536 324.763 li
383.69 325.031 li
384.034 324.89 li
383.785 325.312 li
383.844 325.671 li
383.536 325.664 li
cp
f
383.536 330.171 mo
383.229 330.534 li
383.287 330.107 li
383.038 329.972 li
383.382 329.716 li
383.536 329.27 li
383.69 329.539 li
384.034 329.397 li
383.785 329.819 li
383.844 330.178 li
383.536 330.171 li
cp
f
384.846 328.009 mo
384.538 328.372 li
384.597 327.945 li
384.348 327.81 li
384.692 327.555 li
384.846 327.108 li
384.999 327.377 li
385.343 327.236 li
385.094 327.658 li
385.153 328.017 li
384.846 328.009 li
cp
f
384.846 326.256 mo
384.538 326.619 li
384.597 326.192 li
384.348 326.057 li
384.692 325.802 li
384.846 325.355 li
384.999 325.624 li
385.343 325.483 li
385.094 325.905 li
385.153 326.264 li
384.846 326.256 li
cp
f
360.505 319.1 mo
370.948 329.093 li
438.091 290.345 li
441.156 288.58 li
453.917 281.215 li
456.48 279.734 li
456.48 277.261 455.166 274.982 453.016 273.733 cv
446.036 269.715 li
446.01 269.728 li
442.958 271.492 li
427.261 280.558 li
424.196 282.322 li
360.505 319.1 li
cp
1 .254902 .14902 rgb
f
369.15 328.613 mo
369.15 341.086 li
367.365 340.059 li
367.365 336.326 li
367.365 335.135 367.447 333.887 367.225 332.72 cv
366.992 331.484 366.304 330.375 365.464 329.477 cv
365.3 329.313 li
362.675 326.63 359.175 324.973 355.955 323.13 cv
352.816 321.345 349.689 319.548 346.562 317.763 cv
343.202 315.838 339.842 313.913 336.482 311.999 cv
333.366 310.214 330.24 308.429 327.125 306.644 cv
324.709 305.255 322.283 303.879 319.867 302.49 cv
319.611 302.339 319.342 302.187 319.086 302.047 cv
319.086 296.411 li
365.044 323.223 li
369.15 328.613 li
cp
.807843 .827451 .870588 rgb
f
365.279 343.517 mo
360.504 340.759 li
313.102 313.394 li
313.102 316.922 li
360.504 344.288 li
364.788 346.758 li
365.422 347.128 366.095 347.302 366.752 347.317 cv
368.928 347.355 370.945 345.632 370.945 343.199 cv
370.945 329.094 li
370.945 326.616 369.631 324.334 367.485 323.095 cv
360.504 319.068 li
360.504 319.103 li
313.102 291.738 li
313.102 295.266 li
360.504 322.632 li
364.788 325.102 li
364.927 325.184 365.069 325.252 365.212 325.315 cv
365.778 325.641 li
367.394 326.57 368.384 328.293 368.384 330.151 cv
368.384 341.719 li
368.384 343.313 366.661 344.31 365.279 343.517 cv
cp
.929412 .203922 .101961 rgb
f
313.102 291.738 mo
360.504 319.103 li
446.037 269.711 li
398.635 242.381 li
313.102 291.738 li
cp
1 .341176 .25098 rgb
f
363.488 331.765 mo
363.262 331.89 363.061 332.066 362.861 332.241 cv
362.259 332.818 361.808 333.545 361.407 334.271 cv
361.282 334.522 361.132 334.798 361.031 335.073 cv
360.254 336.703 359.678 338.432 358.775 340.011 cv
357.447 342.267 355.367 344.096 352.961 345.124 cv
353.381 341.605 li
347.165 341.706 li
349.571 340.678 351.626 338.848 352.954 336.593 cv
353.857 335.039 354.433 333.31 355.186 331.68 cv
355.311 331.405 355.436 331.129 355.586 330.853 cv
355.987 330.127 356.438 329.4 357.04 328.823 cv
357.215 328.647 357.416 328.498 357.616 328.372 cv
363.488 331.765 li
cp
.701961 .701961 .701961 rgb
f
375.691 306.681 mo
336.382 283.993 li
335.164 283.29 335.317 282.062 336.724 281.25 cv
364.001 265.435 li
365.407 264.623 367.534 264.535 368.752 265.238 cv
408.061 287.925 li
409.279 288.629 409.126 289.857 407.72 290.669 cv
380.443 306.484 li
379.036 307.296 376.909 307.384 375.691 306.681 cv
cp
.929412 .203922 .101961 rgb
f
342.926 281.339 mo
362.782 269.8 li
366.903 272.179 li
347.047 283.718 li
342.926 281.339 li
cp
1 .917647 0 rgb
f
359.425 290.865 mo
379.282 279.326 li
382.275 281.054 li
362.418 292.593 li
359.425 290.865 li
cp
f
386.442 281.734 mo
366.585 293.274 li
365.62 293.835 364.269 293.661 362.418 292.593 cv
382.275 281.054 li
384.125 282.122 385.476 282.295 386.442 281.734 cv
cp
f
359.495 266.438 mo
379.351 254.898 li
379.282 279.326 li
359.425 290.865 li
359.495 266.438 li
cp
1 .54902 0 rgb
f
359.499 265.047 mo
379.355 253.508 li
381.007 254.461 li
361.15 266.001 li
359.499 265.047 li
cp
1 .917647 0 rgb
f
385.113 255.211 mo
365.257 266.75 li
364.338 267.284 363.013 267.076 361.15 266.001 cv
381.007 254.461 li
382.869 255.537 384.195 255.745 385.113 255.211 cv
cp
f
398.763 286.758 mo
378.906 298.297 li
380.768 297.215 381.805 294.854 381.816 290.862 cv
381.838 283.196 377.155 276.634 369.146 270.693 cv
389.003 259.153 li
397.012 265.095 401.694 271.656 401.672 279.323 cv
401.661 283.315 400.624 285.676 398.763 286.758 cv
cp
1 .54902 0 rgb
f
359.562 242.574 mo
379.419 231.035 li
379.355 253.508 li
359.499 265.047 li
359.562 242.574 li
cp
f
343.066 231.657 mo
362.923 220.118 li
381.908 231.079 li
362.052 242.619 li
343.066 231.657 li
cp
1 .917647 0 rgb
f
396.931 259.706 mo
377.075 271.246 li
378.755 270.269 379.653 268.164 379.662 264.775 cv
379.688 255.737 373.221 249.067 362.052 242.619 cv
381.908 231.079 li
393.077 237.527 399.544 244.197 399.519 253.236 cv
399.509 256.624 398.611 258.73 396.931 259.706 cv
cp
1 .839216 .0392157 rgb
f
368.728 285.282 mo
368.709 291.99 367.307 295.416 362.418 292.593 cv
359.425 290.865 li
359.495 266.438 li
360.966 267.287 li
367.115 270.837 368.756 275.436 368.739 281.411 cv
368.728 285.282 li
cp
359.562 242.574 mo
361.606 243.754 li
366.038 246.313 367.109 249.642 367.09 256.65 cv
367.08 260.07 li
367.063 266.046 365.729 268.644 361.15 266.001 cv
359.499 265.047 li
359.562 242.574 li
cp
369.146 270.693 mo
375.822 273.305 379.642 271.784 379.662 264.775 cv
379.688 255.737 373.221 249.067 362.052 242.618 cv
343.066 231.657 li
343.063 233.048 li
347.183 235.427 li
347.047 283.718 li
342.926 281.339 li
342.922 282.729 li
361.58 293.502 li
373.517 300.394 381.784 302.174 381.816 290.862 cv
381.838 283.196 377.155 276.634 369.146 270.693 cv
cp
1 .768627 0 rgb
f
272.063 400.321 mo
255.751 390.897 li
259.504 388.73 li
262.236 387.153 262.533 384.767 260.166 383.4 cv
259.499 383.015 li
257.132 381.649 252.999 381.82 250.267 383.397 cv
246.517 385.562 li
227.794 374.746 li
226.251 373.855 223.555 373.967 221.773 374.996 cv
172.165 403.631 li
170.383 404.66 170.19 406.216 171.733 407.108 cv
190.948 418.208 li
181.906 423.429 li
179.173 425.006 178.877 427.393 181.243 428.759 cv
181.911 429.145 li
184.277 430.511 188.41 430.339 191.143 428.762 cv
200.182 423.543 li
216.002 432.682 li
217.545 433.573 220.241 433.461 222.023 432.433 cv
271.63 403.797 li
273.413 402.768 273.606 401.212 272.063 400.321 cv
cp
.890196 .92549 1 rgb
f
258.441 379.06 mo
257.675 379.638 256.727 380.065 255.692 380.355 cv
255.365 380.444 255.164 380.492 254.963 380.531 cv
254.258 380.703 li
252.895 381.031 251.608 381.44 250.408 381.918 cv
249.2 382.399 248.57 383.164 248.568 383.936 cv
248.547 391.513 li
248.549 390.742 249.179 389.976 250.386 389.495 cv
251.587 389.018 252.874 388.609 254.237 388.28 cv
254.941 388.109 li
255.142 388.07 255.343 388.022 255.67 387.933 cv
256.706 387.643 257.654 387.215 258.419 386.638 cv
259.488 385.836 260.017 384.868 260.02 383.897 cv
260.042 376.32 li
260.039 377.29 259.509 378.259 258.441 379.06 cv
cp
.705882 .737255 .811765 rgb
f
212.337 384.465 mo
211.53 383.999 210.598 383.656 209.598 383.439 cv
209.326 383.382 li
209.208 383.359 209.093 383.334 208.979 383.314 cv
205.832 382.708 203.01 381.69 200.704 380.358 cv
200.436 380.203 200.304 380.003 200.305 379.803 cv
200.283 387.38 li
200.283 387.58 200.414 387.78 200.682 387.935 cv
202.989 389.267 205.811 390.286 208.957 390.891 cv
209.072 390.912 209.186 390.937 209.305 390.96 cv
209.577 391.017 li
210.576 391.234 211.509 391.577 212.316 392.043 cv
213.86 392.934 214.632 394.104 214.628 395.272 cv
214.65 387.694 li
214.653 386.527 213.881 385.357 212.337 384.465 cv
cp
.929412 .203922 .101961 rgb
f
239.551 400.039 mo
239.538 407.615 li
236.473 406.235 232.001 406.381 229.255 407.96 cv
228.247 408.53 227.557 409.22 227.225 409.963 cv
227.172 410.083 li
227.013 410.441 226.933 410.813 226.933 411.171 cv
226.933 410.083 li
226.96 403.581 li
226.96 403.197 227.053 402.799 227.225 402.427 cv
227.57 401.671 228.247 400.968 229.268 400.384 cv
232.028 398.805 236.486 398.659 239.551 400.039 cv
cp
f
227.225 402.427 mo
227.225 410.083 li
226.933 410.083 li
226.96 403.581 li
226.96 403.197 227.053 402.799 227.225 402.427 cv
cp
.705882 .737255 .811765 rgb
f
263.991 395.169 mo
263.964 402.746 li
263.964 403.542 263.434 404.338 262.385 404.948 cv
259.732 406.487 li
253.005 410.401 li
249.754 412.298 li
247.897 413.373 li
247.91 405.797 li
249.754 404.723 li
253.005 402.838 li
259.732 398.924 li
262.412 397.372 li
263.46 396.762 263.991 395.966 263.991 395.169 cv
cp
.227451 .227451 .380392 rgb
f
263.991 395.169 mo
263.964 402.746 li
263.964 403.077 263.871 403.396 263.686 403.714 cv
263.447 404.165 263.009 404.59 262.385 404.948 cv
259.732 406.487 li
259.732 398.924 li
262.412 397.372 li
263.009 397.027 263.434 396.616 263.686 396.191 cv
263.885 395.859 263.991 395.514 263.991 395.169 cv
cp
.705882 .737255 .811765 rgb
f
263.991 395.169 mo
263.964 402.746 li
263.964 403.077 263.871 403.396 263.686 403.714 cv
263.686 396.191 li
263.885 395.859 263.991 395.514 263.991 395.169 cv
cp
.929412 .203922 .101961 rgb
f
249.754 404.723 mo
249.754 412.298 li
247.897 413.373 li
247.91 405.797 li
249.754 404.723 li
cp
f
253.005 402.838 mo
253.005 410.401 li
249.754 412.298 li
249.754 404.723 li
253.005 402.838 li
cp
.705882 .737255 .811765 rgb
f
242.403 402.461 mo
242.105 402.052 li
242.038 401.936 241.954 401.824 241.863 401.707 cv
241.423 401.189 240.928 400.774 240.295 400.409 cv
240.066 400.277 239.82 400.151 239.554 400.033 cv
239.533 407.61 li
239.798 407.729 240.045 407.854 240.274 407.986 cv
240.906 408.352 241.402 408.766 241.841 409.285 cv
241.933 409.401 242.016 409.513 242.084 409.63 cv
242.382 410.039 li
243.252 411.247 244.446 412.36 245.971 413.38 cv
245.992 405.803 li
244.467 404.782 243.274 403.67 242.403 402.461 cv
cp
.929412 .203922 .101961 rgb
f
247.912 405.796 mo
247.89 413.374 li
247.357 413.684 246.495 413.683 245.971 413.38 cv
245.992 405.803 li
246.517 406.106 247.379 406.106 247.912 405.796 cv
cp
f
191.109 406.434 mo
191.096 414.01 li
191.096 413.387 190.685 412.763 189.849 412.272 cv
188.336 411.396 li
177.603 405.2 li
176.409 404.51 175.811 403.608 175.825 402.706 cv
175.838 395.13 li
175.838 396.032 176.435 396.934 177.629 397.624 cv
188.336 403.807 li
189.876 404.696 li
190.711 405.174 191.123 405.81 191.109 406.434 cv
cp
.227451 .227451 .380392 rgb
f
191.109 406.434 mo
191.096 414.01 li
191.096 413.387 190.685 412.763 189.849 412.272 cv
188.336 411.396 li
188.336 403.807 li
189.876 404.696 li
190.711 405.174 191.123 405.81 191.109 406.434 cv
cp
.705882 .737255 .811765 rgb
f
203.13 412.352 mo
203.104 419.928 li
202.255 419.437 201.167 419.211 200.079 419.211 cv
198.765 419.224 197.452 419.583 196.655 420.273 cv
195.912 420.909 195.262 421.586 194.745 422.303 cv
194.506 422.621 194.294 422.94 194.108 423.271 cv
194.002 423.47 li
193.896 423.629 li
193.922 416.053 li
194.015 415.894 li
194.121 415.695 li
194.307 415.377 194.519 415.058 194.745 414.74 cv
195.276 414.023 195.926 413.333 196.669 412.697 cv
197.465 412.007 198.765 411.648 200.079 411.635 cv
201.18 411.635 202.281 411.861 203.13 412.352 cv
cp
.929412 .203922 .101961 rgb
f
193.922 416.053 mo
193.896 423.629 li
193.524 424.2 192.94 424.744 192.131 425.208 cv
190.831 425.965 189.212 426.402 187.527 426.509 cv
185.232 426.668 182.843 426.23 181.079 425.208 cv
179.553 424.319 178.797 423.139 178.797 421.971 cv
178.823 414.422 li
178.823 415.589 179.593 416.757 181.105 417.632 cv
182.857 418.641 185.245 419.079 187.527 418.919 cv
189.225 418.827 190.871 418.389 192.158 417.632 cv
192.954 417.168 193.551 416.624 193.922 416.053 cv
cp
f
194.745 414.74 mo
194.745 422.303 li
194.506 422.621 194.294 422.94 194.108 423.271 cv
194.002 423.47 li
193.896 423.629 li
193.524 424.2 192.94 424.744 192.131 425.208 cv
190.831 425.965 189.212 426.402 187.527 426.509 cv
187.527 418.919 li
189.225 418.827 190.871 418.389 192.158 417.632 cv
192.954 417.168 193.551 416.624 193.922 416.053 cv
194.015 415.894 li
194.121 415.695 li
194.307 415.377 194.519 415.058 194.745 414.74 cv
cp
.705882 .737255 .811765 rgb
f
239.286 410.507 mo
239.259 418.083 li
239.259 418.269 239.126 418.468 238.874 418.614 cv
237.163 419.609 li
229.335 424.16 li
228.605 424.585 li
225.805 426.203 li
224.558 426.933 li
224.173 427.159 li
224.187 419.583 li
224.558 419.37 li
225.805 418.641 li
228.605 417.022 li
229.335 416.597 li
237.163 412.046 li
238.901 411.038 li
239.153 410.892 239.286 410.693 239.286 410.507 cv
cp
.227451 .227451 .380392 rgb
f
229.335 416.597 mo
229.335 424.16 li
228.605 424.585 li
225.805 426.203 li
225.805 418.641 li
228.605 417.022 li
229.335 416.597 li
cp
.705882 .737255 .811765 rgb
f
228.605 417.022 mo
228.605 424.585 li
224.558 426.933 li
224.558 419.37 li
228.605 417.022 li
cp
.929412 .203922 .101961 rgb
f
239.286 410.507 mo
239.259 418.083 li
239.259 418.269 239.126 418.468 238.874 418.614 cv
237.163 419.609 li
237.163 412.046 li
238.901 411.038 li
239.153 410.892 239.286 410.693 239.286 410.507 cv
cp
.705882 .737255 .811765 rgb
f
215.695 419.609 mo
215.629 427.159 li
204.298 420.618 li
203.104 419.928 li
203.13 412.352 li
204.298 413.028 li
215.695 419.609 li
cp
.227451 .227451 .380392 rgb
f
204.298 413.028 mo
204.298 420.618 li
203.104 419.928 li
202.255 419.437 201.167 419.211 200.079 419.211 cv
200.079 411.635 li
201.18 411.635 202.281 411.861 203.13 412.352 cv
204.298 413.028 li
cp
.705882 .737255 .811765 rgb
f
239.554 400.033 mo
236.49 398.66 232.026 398.806 229.275 400.378 cv
226.181 402.144 226.181 405.036 229.264 406.815 cv
230.067 407.279 231.003 407.619 232.002 407.841 cv
232.279 407.896 li
232.393 407.921 232.512 407.944 232.626 407.964 cv
234.861 408.394 236.935 409.036 238.773 409.851 cv
239.427 410.219 239.438 410.721 238.902 411.032 cv
224.193 419.58 li
221.842 420.947 218.017 420.947 215.65 419.581 cv
203.128 412.35 li
201.26 411.272 198.146 411.432 196.674 412.695 cv
195.602 413.612 194.736 414.619 194.127 415.693 cv
194.018 415.889 li
193.92 416.051 li
193.545 416.627 192.956 417.171 192.158 417.634 cv
189.113 419.404 184.162 419.402 181.099 417.634 cv
178.326 416.01 178.063 413.422 180.412 411.654 cv
181.182 411.074 182.133 410.649 183.173 410.356 cv
183.5 410.267 183.697 410.221 183.898 410.178 cv
184.603 410.007 li
186.371 409.584 188.012 409.025 189.499 408.348 cv
191.494 407.446 191.669 405.735 189.869 404.696 cv
177.623 397.625 li
175.257 396.259 175.245 394.044 177.596 392.678 cv
191.841 384.399 li
192.352 384.102 193.172 384.088 193.71 384.367 cv
194.016 384.524 194.313 384.686 194.603 384.853 cv
196.552 385.978 198.122 387.325 199.202 388.817 cv
199.496 389.224 li
199.567 389.342 199.651 389.454 199.742 389.571 cv
200.182 390.09 200.677 390.504 201.31 390.869 cv
201.538 391.001 201.785 391.127 202.051 391.245 cv
205.115 392.618 209.578 392.472 212.33 390.9 cv
215.424 389.134 215.419 386.245 212.337 384.465 cv
211.53 383.999 210.598 383.656 209.598 383.439 cv
209.326 383.382 li
209.208 383.359 209.093 383.334 208.979 383.314 cv
205.832 382.708 203.01 381.69 200.704 380.358 cv
200.166 380.047 200.179 379.554 200.702 379.25 cv
215.816 370.466 li
217.923 369.242 221.358 369.24 223.482 370.466 cv
236.278 377.854 li
238.237 378.985 241.497 378.745 242.897 377.372 cv
243.642 376.632 244.257 375.844 244.73 375.019 cv
244.847 374.823 li
244.94 374.658 li
245.316 374.082 245.9 373.546 246.706 373.077 cv
249.751 371.308 254.702 371.309 257.765 373.077 cv
260.53 374.706 260.801 377.29 258.441 379.06 cv
257.675 379.638 256.727 380.065 255.692 380.355 cv
255.365 380.444 255.164 380.492 254.963 380.531 cv
254.258 380.703 li
252.895 381.031 251.608 381.44 250.408 381.918 cv
248.228 382.786 247.93 384.581 249.81 385.667 cv
262.388 392.928 li
264.513 394.155 264.52 396.145 262.413 397.369 cv
247.912 405.796 li
247.379 406.106 246.517 406.106 245.992 405.803 cv
244.467 404.782 243.274 403.67 242.403 402.461 cv
242.105 402.052 li
242.038 401.936 241.954 401.824 241.863 401.707 cv
241.423 401.189 240.928 400.774 240.295 400.409 cv
240.066 400.277 239.82 400.151 239.554 400.033 cv
cp
.286275 .623529 .823529 rgb
f
224.187 419.583 mo
224.173 427.159 li
222.833 427.942 221.002 428.273 219.238 428.154 cv
217.924 428.074 216.637 427.743 215.629 427.159 cv
215.655 419.583 li
216.664 420.153 217.924 420.498 219.238 420.578 cv
221.002 420.697 222.833 420.366 224.187 419.583 cv
cp
.227451 .227451 .380392 rgb
f
224.558 419.37 mo
224.558 426.933 li
224.173 427.159 li
222.833 427.942 221.002 428.273 219.238 428.154 cv
219.238 420.578 li
221.002 420.697 222.833 420.366 224.187 419.583 cv
224.558 419.37 li
cp
.705882 .737255 .811765 rgb
f
gsave
239.554 400.033 mo
236.49 398.66 232.026 398.806 229.275 400.378 cv
226.181 402.144 226.181 405.036 229.263 406.815 cv
230.067 407.279 231.003 407.619 232.002 407.841 cv
232.279 407.896 li
232.393 407.921 232.512 407.944 232.626 407.964 cv
234.861 408.394 236.935 409.036 238.773 409.851 cv
239.427 410.219 239.438 410.721 238.902 411.032 cv
224.193 419.58 li
221.842 420.946 218.017 420.946 215.651 419.58 cv
203.128 412.35 li
201.26 411.272 198.146 411.432 196.674 412.695 cv
195.602 413.611 194.736 414.619 194.127 415.693 cv
194.018 415.889 li
193.92 416.051 li
193.545 416.627 192.956 417.171 192.158 417.634 cv
189.113 419.404 184.162 419.402 181.099 417.634 cv
178.326 416.01 178.063 413.422 180.412 411.654 cv
181.182 411.074 182.134 410.649 183.173 410.356 cv
183.5 410.267 183.697 410.221 183.898 410.178 cv
184.603 410.007 li
186.371 409.584 188.012 409.025 189.499 408.348 cv
191.494 407.446 191.669 405.735 189.869 404.696 cv
177.623 397.625 li
175.257 396.259 175.245 394.044 177.596 392.678 cv
191.841 384.399 li
192.352 384.102 193.172 384.088 193.71 384.367 cv
194.016 384.524 194.313 384.686 194.602 384.853 cv
196.552 385.978 198.122 387.325 199.201 388.817 cv
199.496 389.223 li
199.567 389.342 199.651 389.454 199.742 389.571 cv
200.182 390.09 200.677 390.504 201.31 390.869 cv
201.538 391.001 201.785 391.127 202.051 391.245 cv
205.115 392.618 209.578 392.472 212.33 390.9 cv
215.424 389.134 215.419 386.245 212.337 384.465 cv
211.53 383.999 210.598 383.656 209.598 383.439 cv
209.326 383.382 li
209.208 383.36 209.093 383.334 208.979 383.314 cv
205.832 382.708 203.01 381.69 200.704 380.358 cv
200.166 380.047 200.179 379.554 200.701 379.25 cv
215.816 370.466 li
217.923 369.242 221.358 369.24 223.482 370.466 cv
236.278 377.854 li
238.237 378.985 241.497 378.745 242.897 377.372 cv
243.642 376.632 244.257 375.844 244.729 375.019 cv
244.847 374.823 li
244.94 374.658 li
245.316 374.082 245.9 373.546 246.706 373.077 cv
249.751 371.308 254.702 371.309 257.765 373.077 cv
260.53 374.706 260.801 377.29 258.441 379.06 cv
257.675 379.638 256.727 380.065 255.692 380.355 cv
255.365 380.444 255.164 380.492 254.963 380.531 cv
254.258 380.703 li
252.895 381.031 251.608 381.44 250.408 381.918 cv
248.228 382.786 247.93 384.581 249.81 385.667 cv
262.388 392.928 li
264.512 394.155 264.52 396.145 262.413 397.369 cv
247.912 405.796 li
247.379 406.106 246.517 406.106 245.992 405.803 cv
244.467 404.782 243.274 403.67 242.403 402.461 cv
242.105 402.052 li
242.038 401.936 241.954 401.824 241.863 401.707 cv
241.423 401.188 240.928 400.774 240.295 400.409 cv
240.066 400.277 239.82 400.151 239.554 400.033 cv
clp
217.807 423.155 mo
169.796 395.436 li
167.911 394.347 168.147 392.447 170.324 391.19 cv
216.937 364.278 li
219.113 363.021 222.406 362.885 224.291 363.973 cv
272.302 391.692 li
274.187 392.781 273.951 394.681 271.774 395.938 cv
225.161 422.85 li
222.984 424.107 219.692 424.243 217.807 423.155 cv
cp
.301961 .301961 .501961 rgb
f
272.06 395.775 mo
266.634 398.907 li
227.344 398.836 li
227.313 393.001 li
273.463 393.084 li
273.47 393.088 li
273.792 394.033 273.322 395.046 272.06 395.775 cv
cp
.94902 .94902 .94902 rgb
f
225.414 392.026 mo
215.308 392.008 li
215.163 365.302 li
217.221 364.114 li
219.24 362.948 222.525 362.954 224.557 364.127 cv
225.265 364.536 li
225.414 392.026 li
cp
f
229.348 420.434 mo
224.876 423.016 li
223.364 423.889 221.135 424.106 219.259 423.661 cv
219.145 402.492 li
229.251 402.511 li
229.348 420.434 li
cp
f
272.06 395.775 mo
271.237 396.249 li
228.51 396.176 li
224.427 396.164 li
220.416 396.157 li
216.333 396.154 li
214.018 396.146 li
214.005 393.822 li
214.005 393.792 li
216.32 393.8 li
220.404 393.803 li
224.414 393.811 li
226.209 393.814 li
228.498 393.822 li
273.547 393.9 li
273.458 394.585 272.967 395.25 272.06 395.775 cv
cp
1 .341176 .25098 rgb
f
220.43 399.939 mo
216.353 399.932 li
216.333 396.154 li
216.32 393.83 li
216.32 393.8 li
216.163 364.725 li
217.221 364.114 li
218.07 363.624 219.124 363.344 220.231 363.27 cv
220.384 391.476 li
220.404 393.803 li
220.416 396.157 li
220.43 399.939 li
cp
f
228.644 420.84 mo
224.876 423.016 li
224.777 423.073 224.679 423.122 224.574 423.175 cv
224.427 396.164 li
224.409 392.805 li
226.203 392.809 li
228.492 392.809 li
228.644 420.84 li
cp
f
208.844 394.54 mo
168.841 394.468 li
168.182 393.412 168.585 392.194 170.038 391.355 cv
174.733 388.644 li
208.812 388.706 li
208.844 394.54 li
cp
.94902 .94902 .94902 rgb
f
226.209 393.844 mo
224.415 393.841 li
220.404 393.834 li
216.32 393.83 li
214.005 393.822 li
168.553 393.74 li
168.417 392.895 168.894 392.031 169.985 391.385 cv
216.308 391.469 li
220.384 391.476 li
226.203 391.487 li
226.203 392.809 li
226.209 393.814 li
226.209 393.844 li
cp
1 .341176 .25098 rgb
f
256.395 404.818 mo
240.54 413.972 li
221.515 402.988 li
180.549 426.843 li
164.594 417.632 li
205.561 393.777 li
185.702 382.311 li
201.557 373.157 li
221.416 384.623 li
254.607 365.682 li
270.561 374.894 li
237.37 393.834 li
256.395 404.818 li
cp
.94902 .94902 .94902 rgb
f
253.107 406.716 mo
243.828 412.074 li
221.495 399.179 li
180.007 423.3 li
170.669 417.91 li
212.158 393.789 li
188.99 380.413 li
198.269 375.056 li
221.437 388.431 li
256.344 368.263 li
265.681 373.654 li
230.774 393.822 li
253.107 406.716 li
cp
1 .341176 .25098 rgb
f
grestore
395.032 217.965 mo
397.47 216.557 li
398.585 215.913 398.445 214.789 397.158 214.046 cv
340.811 181.514 li
339.524 180.77 337.577 180.69 336.462 181.333 cv
334.023 182.741 li
332.908 183.385 333.048 184.509 334.335 185.252 cv
390.682 217.784 li
391.97 218.527 393.917 218.608 395.032 217.965 cv
cp
.890196 .92549 1 rgb
f
333.239 90.2378 mo
337.825 87.5786 li
338.728 87.0538 339.979 87.129 341.363 87.9277 cv
336.776 90.5869 li
335.393 89.7882 334.142 89.713 333.239 90.2378 cv
cp
.937255 .941176 .94902 rgb
f
406.935 176.184 mo
402.349 178.844 li
403.242 178.325 403.796 177.223 403.801 175.659 cv
408.387 173 li
408.382 174.564 407.828 175.666 406.935 176.184 cv
cp
f
403.916 135.069 mo
408.502 132.41 li
408.387 173 li
403.801 175.659 li
403.916 135.069 li
cp
f
336.776 90.5869 mo
341.363 87.9277 li
403.548 123.831 li
398.962 126.49 li
336.776 90.5869 li
cp
f
398.962 126.49 mo
403.548 123.831 li
406.288 125.413 408.511 129.251 408.502 132.41 cv
403.916 135.069 li
403.925 131.911 401.702 128.072 398.962 126.49 cv
cp
f
398.962 126.49 mo
401.702 128.072 403.925 131.911 403.916 135.069 cv
403.801 175.659 li
403.792 178.808 401.555 180.082 398.815 178.5 cv
360.214 156.214 li
338.155 168.827 li
338.205 143.507 li
336.629 142.597 li
333.88 141.01 331.667 137.166 331.676 134.018 cv
331.791 93.4281 li
331.8 90.2694 334.028 88.9998 336.776 90.5869 cv
398.962 126.49 li
cp
.807843 .827451 .870588 rgb
f
357.338 139.117 mo
357.338 141.011 356 141.774 354.349 140.821 cv
352.698 139.868 351.36 137.56 351.36 135.666 cv
351.36 133.772 352.698 133.009 354.349 133.962 cv
356 134.915 357.338 137.223 357.338 139.117 cv
cp
.419608 .423529 .701961 rgb
f
365.747 143.972 mo
365.747 145.866 364.409 146.629 362.758 145.676 cv
361.107 144.723 359.769 142.415 359.769 140.521 cv
359.769 138.627 361.107 137.864 362.758 138.817 cv
364.409 139.77 365.747 142.078 365.747 143.972 cv
cp
f
374.156 148.827 mo
374.156 150.721 372.818 151.484 371.167 150.531 cv
369.516 149.578 368.178 147.27 368.178 145.376 cv
368.178 143.482 369.516 142.719 371.167 143.672 cv
372.818 144.625 374.156 146.933 374.156 148.827 cv
cp
f
382.565 153.682 mo
382.565 155.576 381.227 156.339 379.576 155.386 cv
377.925 154.433 376.587 152.125 376.587 150.231 cv
376.587 148.337 377.925 147.574 379.576 148.527 cv
381.227 149.48 382.565 151.788 382.565 153.682 cv
cp
f
278.993 40.6562 mo
282.311 38.7323 li
282.964 38.3527 283.869 38.4071 284.87 38.9849 cv
281.552 40.9088 li
280.551 40.331 279.646 40.2766 278.993 40.6562 cv
cp
1 .917647 0 rgb
f
318.384 94.8993 mo
315.066 96.8232 li
315.712 96.4479 316.113 95.6509 316.116 94.5193 cv
319.434 92.5954 li
319.431 93.727 319.03 94.524 318.384 94.8993 cv
cp
1 .54902 0 rgb
f
316.199 65.1531 mo
319.517 63.2292 li
319.434 92.5954 li
316.116 94.5193 li
316.199 65.1531 li
cp
f
281.552 40.9088 mo
284.87 38.9849 li
315.934 57.022 li
312.616 58.9459 li
281.552 40.9088 li
cp
1 .917647 0 rgb
f
312.616 58.9459 mo
315.934 57.022 li
317.916 58.1665 319.524 60.9439 319.517 63.2292 cv
316.199 65.1531 li
316.206 62.8678 314.598 60.0904 312.616 58.9459 cv
cp
f
312.616 58.9459 mo
314.598 60.0904 316.206 62.8678 316.199 65.1531 cv
316.116 94.5193 li
316.109 96.7971 314.491 97.7194 312.509 96.5749 cv
281.445 78.5378 li
279.457 77.3896 277.855 74.6085 277.862 72.3306 cv
277.945 42.9644 li
277.952 40.6791 279.563 39.7606 281.552 40.9088 cv
312.616 58.9459 li
cp
1 .768627 0 rgb
f
312.335 70.2576 mo
282.855 53.2373 li
282.345 52.9427 281.931 52.1523 281.931 51.4718 cv
281.931 49.7748 li
281.931 49.0944 282.345 48.7817 282.855 49.0763 cv
312.335 66.0966 li
312.846 66.3912 313.259 67.1816 313.259 67.862 cv
313.259 69.5591 li
313.259 70.2395 312.846 70.5522 312.335 70.2576 cv
cp
1 1 1 rgb
f
312.335 76.7082 mo
282.855 59.6879 li
282.345 59.3933 281.931 58.6028 281.931 57.9224 cv
281.931 56.2254 li
281.931 55.545 282.345 55.2322 282.855 55.5269 cv
312.335 72.5472 li
312.846 72.8418 313.259 73.6322 313.259 74.3126 cv
313.259 76.0096 li
313.259 76.6901 312.846 77.0028 312.335 76.7082 cv
cp
f
312.335 83.1588 mo
282.855 66.1385 li
282.345 65.8438 281.931 65.0534 281.931 64.373 cv
281.931 62.676 li
281.931 61.9956 282.345 61.6828 282.855 61.9774 cv
312.335 78.9977 li
312.846 79.2924 313.259 80.0828 313.259 80.7632 cv
313.259 82.4602 li
313.259 83.1406 312.846 83.4534 312.335 83.1588 cv
cp
f
312.335 89.6093 mo
282.855 72.5891 li
282.345 72.2944 281.931 71.504 281.931 70.8236 cv
281.931 69.1266 li
281.931 68.4461 282.345 68.1334 282.855 68.428 cv
312.335 85.4483 li
312.846 85.7429 313.259 86.5334 313.259 87.2138 cv
313.259 88.9108 li
313.259 89.5912 312.846 89.904 312.335 89.6093 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2011.i301.038.S.m004.c13.Language courses isometric composition-01.eps)
%%CreationDate: 2/6/2021 3:48 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9RffC8Z_Y&""=\=s7@?c7q(;%s`"f)PgqJRF#rl2L2Mp@k(LJ?T<aVgAD^m^^@EQ'84/qbi^%l>"7Nf8EhG*&7HGnOSfj
%+Ng40(M-BmA_Fiu>$X;B0%K(a<)=,/&OG(mcc@rYGFIG5dY(E9N'b.Rels$@.&bC&eBeZ2\`8PG;!OW.V$qP^c^h*%`ck3H<shrP
%-Cj.(&t5sM%'uh<4@5,RNU.$upo4Wr5mMX/g;TCh%@XS;Ws+]>^(GbcngNK;&mECA^5#@hX>O4ZdaF*NdftDYPCh>-<c'89%HqWK
%6c2,P\ESjL-)I`QX>)k$.(F)1Gd%Rj-f)S(-@&46JS=TbAcH9=U8;`pkFVa6s6kLJ?f<m&@6L,<:*pXl0c19`TKF2)[i,&DH>!:p
%nW?Be"`nF\Tdq^[Y`NG,+AE]m$XAc[*Y(,O*X$qRLB<VUA7V![$\8f9plNR<6%Qk-(kE4?]n^pH=2/J7pDqSbWYAI^AoZI>A[S/G
%8koRA"NkVrD!S*H<S(D>97aIl(3e&_U8e=`]uLet6MTq5Sc#l=Ef+"#>9LG1hF?XXcr-E]kNuGFq4XN2de4gJL0Dn@f4:TV=q6,u
%"-tJ_=lR[/J]Oc'1r]%,8fS1e&T2ggD0M%h@8EFK6tBU.Ublq'AZ`Z[OF[!*_q5$<A89)Tr/-G'ZMkDOJs,/$\b!!fBco^BV:I_1
%d*,/Tbb5>Bn19Jba6U^C;+"YHnRhuHTFU7\)eJnamg$B.?*kP//u7IfgjfX:3d1Gq?g$!'kp<+6iT?8:Zl@,5anY`d?ase1<DQ5f
%WugT(LYU_Tpdgl`[_<\m'n.KfWm]AeTV=;%-?P]YWi\U!YZna4hfO7J(0ZG!Z<6apo5F+#HU4.\adGa%0S\Ij(cNH:=3M0Rn1=Cg
%q6-:N_;N,iHQ?4jnbP1E2]@^:/N>[PAoslPQsHG/\F^6u.)=A>QO'OuDI)oAU>5gTOC%dO1(h<AbLKE]Wri8dXV[J_hQ<E`R3OUj
%S!tIoMQU`+;e]4<JgY$9Rh\`E0_B8O,OTbGEo&%Mn4As[ZrFB'Y$:Z0O(nb*%LBMgH=hn%lTR1@,e,j1UN?bT05@0P*shUCR-]##
%XAV[6]+W-MO':De[:ZPq]<`dc[S8:9CA(0(V7P+KCk58t'TMs-Fm3EqIu6jJH5'mo8ZP4si5rF8QJ0e^UXm4_e<@!_%@'bg".AP!
%ahN@5F8E"(@%p/d.I1U>q?U=s$Y,Ihm^6[4IbgTlc63`Bf.jCXEJ7m$QuFS:nblD8lYnW[">I62];:*&gB,0pBe"`hKo2`D9sm_=
%(sd@<%!;4jrb;<r[,ImC>2A[aB;*Lp\KBn%U:5!,Im*k3.l@\9LULeNX!mmbJ\mK4Tg2OoOJo*]\^GML8I'4CdJ9p[>87t,fPo;+
%-CfGil]$em6;L'B/%WM$JYn-[6,HPj,!HmB'!Y^fTlP]h+7tj\<+aB%[b>=7P/qr8SP1'iWJP0MG!6XoR)sU&gU2-sV0l4t0\Hap
%/Y%noPL2/9Am9Ih1-:$86Dn^3>8fnWP>Q'-339$f@9"EAe3%i7i[5t:=.3m@<8ZH'H#EQQ!5(s7o+;3!3".,Q8MrHKBK2kQSe!WY
%:0RT@;psje&8GCSL3^W]1lR0(.Zeb_^nh8s/VLE!gFT9n<jf^PMd178lM<hfYU7K7>c>gfRKX!u-;S#2VNs?<74L50-nJ9,fgBE/
%;E8WWb5H7SE[=Y86q'=![,tF]k$6!q,+2X\F+5m3F&<3IjDp/`DNW*oEk+UkpM5?n@(nlak73>Ocf_gAQ-[!-B7BE^M#'irZPB<M
%I/i"1FRtmg\4@*uX^Y!&VND=dY$t-RpiIN(8`"s#gRJU/H+j0=VtubEc8;;H,Gj44C.^Y[0m9lD2nMnXU)S#NS>*W9-X&=0+`:E@
%-Mf/d1&NauV5DrbUCD:GlY1t*>\^g0!>t7e/!0Kd^/mMD>Pc"p&)Brsd"\$UbdghfDmmoR;Ga\'`>q9ni!ZmbYL(':lfn+5H8CVY
%:7?2HEI`19=3UG(%AU)Wh4QY'aOCcCO'gD82d=G&nEW4mV[5kDV^N?*0^Fu2RW=,%N7TN\N&rkF\j5<=e74GrU"*?rGBK1Q5<"S'
%Xf<g3DOAV?kEG`5@V&qZ,D6$`(h\:u3G-M;HpYV\?MbI9CK5+abKUsZ>Zh(D^:X5=5jH8jJS#dTO30P43,gYooN0j^8Tfn_nd!d8
%B9jpH)kO:__a2mXjE:9PF8T+XT/GO&R7cq\m--K.c*E4kSBGTd]qTpLIf.Sr/9^je[c6!*r0P]6D((hB_V&#Fj?nF!9g2Flcm,Ef
%rcGDA[s2iO/%i>geF8^50:(GC5o236Rn?On]4#acE4Yl,=4rbu!f+<hPBFd(hn0KjO2[TCfr3iNJh@+\),*C5Ao-VSfN0b5?g6B,
%2fC<#N7WQCfmSSQY[9]0?'N(d8&(tkQH#Opn2]>/qZU>cG9pCuY3R\unBTkErHU?lik3pI0E,k($Wd6'GPc#R$KoCubkV8CY#mFU
%gQ4VQD;_c%DVqaeo'7#t_0+mGn7-@kN#Q;>I]4RY@UUro;<i:(c`0&%5_bbN_P'JsL#8_be_AF12uLa]]hM192KYdgioa[oPf?t>
%S=0N8\QEU9MbL&CFXGG]-/Ec*).@RM-:$qucEp$1Gou.BVD^Y&l8Kf[3)(?)I3EEsOdL"_k2nP?Gs(l>Q&Nu#f"7mGb`C>e5j#*h
%ZVtnT)6'Fr]"8tEqXbWi_CdfEl4/8<&=A:.!;s3cX;c9ur)*lUG-*o>c+X]E#Oo+I;Y9G#O,p$EId>E[9UFn\Jt*TK/j*:Y1hppX
%ML\D/%i8i`A[k;hN9T;/W[.+UTfC#cL>QH^UGcE)BjmiRF]EGOW^];%$i&+O(J+3aV^?:6X?b1X_-@c*e5BKeB]R^LX,tY^RqcQ/
%e?t_qGI$n>B(,s6Ad_.fSL?:Va:uA::)#Y.bY.b@YnL]7lEdW=CY!Xac,j:5[hYaDfSVFC>>bBhD[+Lg(s\'*RIe*?Y#mFUHVn$9
%aE+X'j\%SZ_H5HLiWbgi?BiE8PlJVT/G>g^=KXGg"3T6NMrMl'cFf578paFj+>YY_ojTSs:e3V\HVn%ifZ\.0=5&Sl#+9baqVShU
%1QQlt>k.@ug,2T2cM-:CY',%A3&,o<;p5asrobo13J/u-IUP53&gJdZ]_pn!d6.9/06u-0Rkj-=SFlDA5JI';;e?egm5&o[=P1#7
%C"HVZF^`l;G4"VK[C?MpMfA&:T8J<s@TI=XXY$X.s0,L-"D_AmW\%\fKiS#BZtdl$TpI40DpK=n>`dn$Xt.iK!oQD)5-IH86B,63
%@%g$t2<pACT(;A'2Xjj??b4t/kCB+(1^:rCU]$tQ).!(.nseM@S-hT@D[X)uP,[#k%o4[B\&2DsC#%_/Q;O$o^r\18LCQ&'LZ[PK
%jahnKE"2gV_%"^,g+*%):T4)XVkQ!eGV7-LUuprA'\^fW,'.]SMH2C1-*@1:pQbV4WM(fDQn+sPYgYr+J,.$L=UU5gK@FjtA_4-V
%Xhq`O%uno[-@U1&r%DsJT8t:UR=@0p6\V,`'eu$n1[B4c@+6)a'4RDPq]e2q0C@FL%7.@Rh&KW"f,f"qD1H)1X\)<)\M7f>AIDaB
%AZHo<2P$3Xcn+5HdGeLT%bqaS9c#e!d?<c/Q/lujH05'`)jYlYAZh(?ltioe%irCZ-(O$Y/jt)M[r\knB^qtW@f:NMepi2@OaN)[
%hcVhKMtPuHqX=(.Iu-V5'jub'\[8Mt2;dYloJP6J^Z:_8(2LXB2;cBAmpaOcZ0(APr%l7S/Co4KX'jG2%;;4W#_93u%h\74T9blC
%:j(Uh4rH@d.p#mS&1HJaRkE&,Hsg]oNf-Fu/!\g_2/:VaKW_pA%RX%9\<WG(gMPF2$^kqb.hQ[D73D0GoBE<j+nh`^A?KbGU.dJ?
%AMVG]LWZKoejJ@+e.AFp>1j10dgTN!KhSlk1/+PDiEFR%I^Z2I/a?u@Epd;q;mM>XfqNrh?`8nD@d-AXWR]_)O1s,qB@Ju(dul<!
%"ZiXn^KaeA*O&Hpe&4)+c_`B=SEesqR$D?\m)X94`VuphN$+km_?H\f;Gq3ee,j/-jr\qk@!6\8`]X5r"#<&Aot96RVM:`OhpRq[
%-OQ0WO":VkMo*Z3nFA6=-S2T+Kbq?.6g?=__TS\CZ7*B`)>Clo]IXCCMo*Z3nF?ek0@L:0^Wo$8R407im=],T.nF%7(%X)&bf$E:
%/;o\=1bI1(+#`),j3?ppJM2AsKU]I8(C*[Y"qItgd)7%(%*$N^ACaPFd'ZnDd6=Y@0:_&b`%;?%3SR#2i?2bX:mlG2l/!9']Pm]T
%V_E8GYrI=!CRr95$,/#e?Wru61bCEk-XX.oV.b6`I&,nSjcCZ&Vbo&&b+EuroB4uQT;E!aqq'M,Hml;ai_-*NBXU?Fju('d.m@tR
%IB<3VM@Q[dC8rl8##d+b1gT^Mo4`g:s'cK-/):)lahXutk,Wq^H]b"M\I:&To;e'$e;^5mU7ZL^KU]bkMK'<S;D+'0W:'@uFTJCp
%%d+%emon,h*_./e>0-@$(lQ:ts$u>k_P3&F#?fcTN\Q^uYdC?=b_h.b@E"t$0n#U"e1h_]N*52bU5lLWA'@Lb"#I<MibEDg,!Yr3
%q,tg=$8"\22`*J^?WbWK,YY]EWM!5cc+A75p8!q!]9WZ`I<0P<JeNBDS8hF"R@D*?l:/4Y[0e"@h>.Hu#aa"^=,cEsSec?Gd)AjM
%H)7Je9_H*$edHBDciNoEQGUTIcWu;cqZdS@Oi,-u6_c?)JTHR[i/p+(N+^6hC2PkdJ5$Of(LID^)/_c-@sV6.N^0&&,ENZg+AFP,
%c4c;:=8_m<YsEl>n<7XWq6gbcJ"DRMMpkHc^h*AGF1OsWk+kuR\X0rEKi/_LdH]M*pMto'XDdg,^=HmL=6RlSB!7eaIei1:ho12a
%(L'^L9a])+D)oGOcB#Ld`$:H]V>,<b`Dce./Uj/YkouH5noK^omQ\1)Mem9nbq663=\jM_g"c5+3>V_<,+JH:g"[D!*p2HMJjhl4
%aQNP153G66([9^!SQhn2Mf`i==Vg8WAGHMX?Qc%`LW$9lFSs`_l!0o<5:PEJ@2-n^il488o!trccaa<EkP.#kYOb&:5Be6f%&5U3
%T7NL/F!VUbA'U%-0@%V.ERSKX4&BArNS!VZ+CdIOBH=rilYH&QH!Mju6QW;MBIF%dojc$BBs$(bTt@:%gMkW)4+cT2dNb+Rb_mAc
%;"3UFMgk&`Qpm-Y<Y]5t,FgD-*AklXQI2mIgZJB[GqSe;1tuV6.B(pOi[tl-".tmXIBU/,SPZd[#p'pr5Fg@84tnSd>b'MWIj[3j
%eB)peh5!Jl:FsrEIt`XC0/_(8"aBo:2n.A4%smC6o[OI5Tii325l%D0g9-`X\rbBMXPi)C-rl%00$Eu!fP.$I*7,DFjS;a5;bSFM
%-KT,>F6cUsKG]9)mGJf.g`i1k`&jU8mlp@5mJ2Ta>W@iUk4*p>7U:-OC_&`c_a.R@ZCaZ7L*'P$7>mi&%gGI\R-;"T,\u`8>R*]U
%%E^J5]Dkj_YR#gr`U5rtkF$`KTU8o`;H$jA5!N-"^dU(`r<UE"#m*g/#8[tQoqTbJI5l2PNIr0%WD6;^^=l%X2a$p"m&3+>Yg\Q]
%>8]m,0SNaka*EJF((PAnNPNCsc:4H^lOM@V0qN[Jk_:)ch`1AEE?6XOMiS=mC=)Qbm,.a1j,_Jp/g]KbT&K:K^:sOl^\'MT%%)<F
%3<.D3'.qLtSTRS3;kQ2gk8MQu%Au@RrQhFCDTcR,ae]q.lN#4_8Xt((FTbK!a)&;Ulc`*_bd2<#2VVj'CEN-;<MI2ls$kd#F_L3h
%a9]9]L1^FHN'CC:R1<$,_J'nPs6+m`BkmYf+#<@:m$WL6__8L<mM#-RbhG![8jJ6VrNTk&^ViI\FOF,I+*4$sE;FWR2ciW4ibcPX
%e"XA`W5"e;^+H<r68PNAs-PYR\!4NEm`n7DP4?%aPT^<>].H8@5u61&,hhq.j]n7:Y9[XEd6i2n\sOKi`,+.:7Xohr(7FIM&<c&2
%/'g4SWAdIf^8*H81B6T_$Pla'fa^.-,*'+-DRtu&U@^0t4(QN==P"?,cEGCV@Z0??fjac4B(3p'+K^B^2"_Kb(V:bV,&KG#]pp&7
%%.lm3iX+9)&[e^jSTk)4lb#OO8_1S6hM/dZng+s::q13"<DUPL2_1IUV66%_duu\J0ZQaD4kAGfU?c"9Ep,Dpc7nm-ptIE#7blkW
%n-&+b!>>@[q#dRD0L*M6UD[t%>DF'@6W4]p(]RpFrBe8KqQb5sCppWo+F"RLn[*1]YEN=lPJ2"lW-]AQ_o9`=O:k2t_'"/)]0P,h
%'=@)EhFFo"d>F[K4VgT*(-P&pgP4B"rE-M)'WRdTbfsf5V5Y4+L,+ag3rU:Wr6Woi%D4Q+Ne&NHlV];O+IY`>f)i<Nj4O!Hqr@.[
%.*i3)]g:Cs@'/V9oC,.nMLWOg9=tT2/RnaYIicsMT;/TmEl-b5SY#5-@^\bc("(QXE<7`3j$7qS7tGZ4Jn+)Z/j>m&GVl-a^"Cn>
%+/.']n8ApGjRp9]*.ULD_`b`7VAfK3f$d(bP>TtPO.^3;$jrLuEBr*J5]\^,=^i$)BN^uR]O4j5Ol8X&TS`Bt.bO\IUkp.WVX>G<
%]I\IOSD]h15AHmOPHf"K5#F;f9FJ570[gCc]eIpM`D$:NR91<\q8;H<`g3BuKrnY5g4cY7f\2%]rPQ(0VhBc+?.dkbXo3\0#E#6e
%M=XP0L?0[]J.#MGYQ<u/'Eq'9E<!qPm'*_>PHD1(Yg*XB]Wf\rd5j(H.*=eG1r^6KYWNh;MO,Ti(fN7C$J7\e=<(Wal%P7kCntcg
%@AF]/H=<V!T96!"JYpg[b6#kn[]QDqRDuI7_W<klT^>Q:LdmjI(WLc0XBcZYIUT;o`d2'pJ![E0dk"(B`6(%@7+;o&Z/h)4m'@6G
%NKk:1H"!6k>A%QQo!bjK$g[^P6YVRI_>9=&RZ]';%5Pm/,/[kE>2iWs;c=5uF'/10-&RtUKs=r$CDY!:;4Lr0l\2VCS],<*U4l@u
%"3duLUR#R'pFT#^<iJ[HK+]JceQs*YKs@4_XBB.DX;Am&@B=sRZ)0s@-/l3Vn0G0&AR_<hg$Vu.Klp^(kAf)K!SWgIhKj42kH%^"
%kWSNR$(NS52#51TW_;ooP:Tn\+G.ZjecdSo,%bm?/+Ykq-I%DV:\$T%jos2Mn=8jU%=^u0l&K_G:W;tb7:(7uf8GY**[e]_R8J(6
%eP\![13pf-j=,g1aN+Du'&eFO(l"iiZs^YmjmbK=_Xl$<8^>2"g)tLJrJC15^[_&*R0*:*l-6(ek3$(/9L5S)ll&@H!r9h07;9oU
%RJg"+)`i08s."!7&%$dBJj&@c;/"S2H7Pl"5Yb?e[Q=pH:&)'`]m"./]G*Tip;aA("*!u\oDbh[h_`JGmt.aWN.%%Bou4C@Dn^Tt
%b[tPJMu3R62^TT)e"'4>s6&1$$:<(\`uP/MDA9*cd1r'1TNa4'?s]lM@D\3m2Z^-*1Kh,.:9\_hW"])Q$H9b-b1P_e<aXXE6Go"[
%>\Sp3:/>.,5&V-Y^:?01#Wit,O*DGoc'D4r!V?%U7<GH,?ke>Z'_KbcV#D0VPF[(nqL:Z#YGKCdde=W@ml@W59jK8s*A]<>5sZ&M
%ch=38ki:=`No`'+Zid&H#'i\8-fR#R_^&b.5@t$O:7rqC<)L&D`Kd^pK$FR<nmpOiCW4jph\>EIc%__pbihf]m6ePW7LS46PZhgu
%9s$PR0JkPQiJ2"lPTVm43r^d`7F'SB-,@LE`&qdL9.<2hoc#5&s6IcX([XhO/"(HDPGYM*7W_W^U+BV43q!iN_b$<jF<:*g9g_uc
%W[Ejm72Tu/Mo&'=e&(-R)iBIo_t90fXlsJ65<I]l%*(mK@)ZsD%E0lE$MZbF%g*i5RY'm?-k4^[Sn`,UpIU2_7u-uI!<f!,q2YcV
%@>8N`,njqS"J48P"-n]`S)#R1`,9pp+7Q442[WQ[h1F;um7)k-!\:P3DEB/QW)EYm1p]@Ed!]239XUjghc*BHrMSb6(U]Qlf6".f
%UGi4c6NHP?m3',\2`rOc?>_9)eWV^+h-'Bnga0NcVpOt)gIJi;=7f.ndFOdMB(nN\1E+POLO91sFf&5VBYf_,ZC?B3*=6/.::C\/
%3(2Jhd]<qe.D"(MUfXm2[!K;!:3seEQJoARRP!(VOgh6dUI^[Nd;Gq+OE3b`QH)iul/I^YEMbWEh7e_,GV3"Cb][b)Z1*<d]@?n4
%R/BL1S]j_B&@+J4BbX'2+0]N1h_ag90+k$WD)\cf;G$au82;3)B1c13?ou<mc-ZQXJJfB$7%Eh4\c`*)f!W*SBn9['"Ds=pc/sO!
%+E_M3,@VI+"m+L&;ST2Wa3N+RO9mtKB%:iUdFRt#qlWp4V%i?@jB1\V#1taO.TsSO!aGGOFuK=qX(R1-^_6V0"!5`RqP/YDWZN`C
%QrhEY-p!5]P5pQ%+hH#c$.V_hqI#lgF-nlGcm'8[6@tVdS;6$1Ki2i'*[%]8lm]Td"UG'k72S\JPoo$sku+WtojYM8rtm,P):Pgd
%'C!mtl,.qhldg@V+$s@Z=%tPE.S>,P9F^%0)]RIl0[-!6)DiAXd@oSdbh:CWT!rLD`&3;bf.$MB;>7jb&1R)g?r.U/=l-F;;UDfU
%\/HnFr<'4"lkkHUi/pLL9,QPcZ[lmSbn%d9Ye`g5Boun>JYN@&GFmaMF)q?!;2iFK'MJ2<38H;SYl_u8U4bd,.#/lKTk;Wscbnb]
%m>ZL70$6,>kMde[#s1h)]l(35X>I,ebX[Hh@!CE6DJdGoBc&2m?9l",QFhFBrYRpYd?AE+OBbN+9gs[g.c$e#GPl=@)XtPX6YjV'
%&P3#(_fhi;N/_rAnP%LI7IEW^mU#U,=6,pt*.]\[Z$gJG:S^d6-I&S]rU!o<Zi+LsK:R5kU;X>u+MWQ5i2&0^S,d,PXYuZK6-]WT
%&)++"NBH,rm87OB*8uaKlU/['#S<%BG$m))_[cC#igLm%i>VBGO\aP$L<!_;ks;JJ#F0+mbA#_kAc"UH,aNS4\o[;!Eig8(UQmc1
%V4a*^Fop2)iG4<RD%=CC,#*R]mA:4_7=7^?d_:K,Q51QF?LU(_!Xfeard]LW>(@P3"kPm7$i^rqViB**6:"KUp5Y5Le:a8B4]o'l
%bmBNE&iI7-"Lm>0ajq<]7^30VP[8PuMah\qYLX=V%s!p,KA!Ng`j#Vrlu>)s>3:I]84E][ZVVldFAVrJZEIFh>0m7AX+</4Fbl.7
%6+2`,RqZ'AVIKhj-YpQmafZ/M&;:Ss:&mT?5i=WIqC`1"q60b#LdF^\/-#a1&k^&k)%.#1L]hc@#V42o4sKRd'BhaYIge3&p/Yg\
%rB8n,h$q418J(tJ<IbD,\>V<nEnqV"1#pJjhC_<Xm?9dR,u(#m2(X[@b\O>Ld[4_2qtVt*Z>Kk^]fbO(OFg=7leTE_E?$#*g5VrE
%>noEgM@i@1S&M%/C(Q7N,EfT'a:a.+'uTr0&:k@DO\^:^a<lZI/dKG?TFKCR'ZS&W56)p8:@.[4&b+NX9Ug`j?MH7pgfZmrH?6/E
%"&MY>HaU#;YlpBW9#CfmCqt#r&C7;<N+B"m8$HTLLYkTG9Y`4NmneuuYTWNhXjp@E+N&]mm_NC@\1qBN`q]C%5R#UR9WWtV0_!L5
%<gj/(3d0.M*#Hd=H,XT[@pjf-1=97t6+;fH6J0>o:5@pTeoK!Q"a"Z0/qBKK)5Tj"H7N+I-eLWkW*u!NqH2d5E6WR?X-;luDD_IN
%?@c^!.+8Ue22l[u0teI+X(;J#/`WNY+3(C!Jd`eF31p&#hK0\5lW+,?d<6!"RhZ*))Kd%-&5$eJ/ma>/p#n-9^B$$.PjSLK&aV.b
%oZF*7@&>qd5G\)c5g)Nf*rt")dS\O6`S2H,<R[E;$4_"PW*#?0<N//,575hP'ZO8q!mr".IKEA_NsU"1U1kDM^13.qX/MBm0m%mF
%M?,*8jupCcPB0-k,3=VUan8.Q&r\mqaFTkpl,"_YYYr)>(ak:YOBk3<9'#3(&Qf4[16]O$VDs9u1Jm\6-k3$@M-?r6'ZG=BeaH5<
%f(;fd=bFfC)./E`+TPqGfW4=c0U#8nXAJdk*CE[/UsZ29/94i9m?#K`QQ!`3B0?-8h%**a\^>PC^:/cXdJd#9N,"[._I,@bH?k<i
%Y5$P,?9uu6eO`Wdrm%%9%qfWSCY'Ql(f&c(71;sO3GD@0;5_E&)_=g@qb;XJ^-[,c;a_RV*F4Pr4p#eefia@\0]U;qoDn5SO_?MT
%/:P4/(.+'-([kIOZ=\/g.Rd$,4A*;#Y?_SEVo&gaSk:.l_PZu?=b%K<WdcQ-K23"i4m$4\m>0=BSqXMuA5_DsC'"(+i*EP<)fNof
%PK8[VDL\:<D5WHV:dS;BpEJ;=flDrZSU8'4%HUmUN\:oedYBDW9:S0EPgXdC8n.09ebJt3Vq8QN)Y886f9a-VhoQLQ/+KT`qIf8H
%0T;>Y1bY"K>ca=f1D^h!auWe/?GN0ZkpUSN*a(:&WuqClGl@9K!>k(fjCeCuO?C@O+n@G+8tc@bRC7WepOsXc=WfrHdKSBU$f;S?
%^)N@nD^DpIfYa=A)!5Kp(uBidRg?EDH*ga<BAmUk*$:53[:X:qJ!-f%Z/B2d#o<W2geC1:o,W<eiQjdeFoU9Q(CL)&q$9p@S)gK$
%N=9kApf\1N&M605r=n[R7O=YP;+lc%=?@L5;[8e.A35kZkMD]/M0NQp!IFX7iq\k1LKJ9hGVsZuAtKC[#X)>SSoDIe?M7Ee=HYgW
%@OhsNeE\u?q=EcQA&UPEKG1I=j8sQ"9\^SCCfbBKrXM`^EVp>U1pZVNA@$6]H>bZ%m]MpBS`M/n[Jtq;ioAC7!iW8o5!sZslMrU*
%+H+Z$E$oqaS$5G:-?>53OP%VF+FOs7]>"b]((\t?na0nJbfCSO^H_U*qpiCTRW5rb'R:C!,Lr@Ef&?Ls(3)lEYM1nV)trV@6#j%'
%*j-CBG%*Cm9FJ^OiB""+*Uid`B.<]HrLb;0j/Ku-^ok$P5C[QP:JSV&rK\nd<2uSWKX4m<or(nDip0'Cm;Y?-;k"#$r4\DO*:B?3
%<OYasISQt-crU>@3=@.&a6@i?g1lC=n!6V^cSp>!+C@7LP/ZKCF;N=8FZ,ucX*IRtDO/qZ=\.!?Wr.O-Z?1'fA#G9)[dC3l,B9T&
%'W0-*s"M$U%nhK3;QLRWA7Lb.Zi*20g)U&_K__NiH%QTOQba,XQ\rh%?>o1b"5u,4?LP^%$YR%]1MgRmC!!u,If&QhglXOPYZold
%&6jL0:\\]ciA2bEVf3<rrJ/XWZ@o[g.-05Bn']q=Nd#b!G4&XEr-@b2#[4mLQf_-Qep"&;YO=`+n8?1NL3N5G'_M5TQ6P1flfW&%
%i%b5n%H[a3hX.VWkG;p]$SU<M<A1u>>4Joc/&BE4m@JQVXlX3!8ACNul0sZ)apILg]6!(^p4`q8.tZWk[2[N*^OMF?*aJ0!]n^aa
%mu?[M`k9]SjVMi_c!9cc1@L"Tj42/E2jnP7HVXb2YW&D[^3Is7r#=M:RZR/JjMREFRlo`D=4HW&pU^=3jLmFZinjR!]a>8@G^C`_
%T.fh,mq[s@o&d,/Zej\YA&VY%m\d]46YUhHCXfVu[WD322:B;cmsF$Uh:pXmNgICMV7j7kLn$'!7@)PkI$NHe-%GQ;=pd)f?^I]I
%-+(V=B/LN<M1=8?=d%(^I7p9)qW$$']!AqiB\pEU74X_XV8VsS\!284l:\+sj7H6\GfD=@l50,iX4DE2l&L@U*lIj&dS&0gZBVQ/
%d%sR%=jjIGKA(A+BrR5WOuQ-NrCU0ub*jj(CYV3eGsfd4/-iJtnM8AG8^%#MlX,rm8oo:P2,maC]R7=uNh)f<Q]JIP@QAR0h-8/e
%??")u\%TTJh=AS^nrqj2>#mD9\ZD+'[H0@0oF6OXY$XXKbK[G6H"AFQ:g.#ZMO%?AcUX68.WkNq_L&J$/+V`Dqo\nP_n-P@dH`='
%CcJY>k.fkV0"79r.lY;8UQrmelcb6lZi%%*3]jIF<*u-^Pt('f\EXO2pL'B=[G1<&WkZ7H\4WADoi7\#p93nUYO/M_W)@g3W,ba<
%4ZhKS=Nu`>_puAqf'Vb/?@?04^1kILgWOAE[8AF'f"=G*>?e9H0@k_j[Dj+4/qql"1A&K<Tbd@<0Pa1qp$(2`D7.*D>MIk9]>$>J
%Y:5^UXd)oc@BCT_$*LZ<)`R(uc'uLp5i'.[kH:G/l_06`j*Ke9i7=+VCiMW0\::`3U\PhocgAm.H:bX<YLc[oQh=DPn,TTLqYm)<
%(G*\;5!]s-I!]d0b83s-DLH/*,CR+KG0TdVW"aWuP=E]m7ju4*MOZ;9X@LdW`cfk(faq)]rJcHmAoQeo4kAE0"KTM$gQUjG`iJ&]
%h9bk:36]CS0(GF3Z$64[E:%(Z;g=25D]Tm>e]hTI7GYUY1R--G6[dh8lcS7"<I9&EC`+l:rf)p.PFmtr(OtXn.IW>2;C2A=<_W8F
%SDBW_AZ<6*IlijGrmoMo#fCKS?Bug?9Hnbr[2Ue@[c5Pb[ZrI%QacCS1@/'#Q&T_4o$s5F;E\(j"BP9q!HBIu%YW0cDZZh_aTu-=
%3Z**i]K$@!K9qig]6mBXrK2lATWja6K85]r%MLt<p>#kT;nFPGjn.gtW1VT4mA1J>G<9bhRGX<fbPZOjIJgaKhJ'7LpK&`ggE;OS
%p3Yp^:\fCs?&H=!Y#5M;P+YQRR:YZp*4qp8(QaI(@:4C=ktAiH1k!*C:%)XP.WeR^cKHcGAEZ,r2<amVk*fG$f>7s&\*do&NO[9(
%7\B.:gWeXg;cL(Io:B,lB/a;Q3\,.gYABGQ]j`d,jFhrE<t<om<*A4HDUK4-_ellWIVs(*>iSTIr(Gi4k":P1moGl^P?hnnrp"*R
%QZ'egr[8[jjfc,A)gif*VYKnf9i9QuN#W*9rH^"?,266DGF<jko"%U5hW;@,EV#;+7!YPp5S&)2I!R;Lmk[tKBH!@LZ\Zoh/:Ac1
%*Zm>:dqFDume9*3P'20H-828-)4=>t1NI$n\fkG!/%bAQ\cS<Rm;D<-C3LIU4,G7:R'2.;SNF7-f[4_d0c27EEiL'%/p``f`FA/X
%:bMI+$5IJSejD$C]%Np-bP^d:oM+)b<!p`Q7=*bAI4sEkmKF*gU3ld,`JqQPV,Grm\R%;PCRjn\rmoJr\\As(5OG)8DC5*bma"]4
%p)@1Fm2usr<Y+oMc)629,F(8c&mMUCZ_>HqgZbL#_m%4b+(fr%hSWg)g'E%tT;l=#H-jFuia"Ql;na]7hq"&bA::r`(6L9([E*'7
%1*b,-UZG%a/GNY@B^gD5NJ<kNIPfeoSO?-HU[-RTD7^Vue*#!.8NI]I4l')SZ,Z*42SQl5YJha7k!o:6d2S*]S$flHqTW5#&_aD/
%M0$(NQ,ok-bp2]&`nh:LOIhMr)s93)dF2jhm-*9?@3/A<C%OBN0rr@(Q2(>uD,W)8[rSDDamd<i>Oq'Q&5Bm\8*7o_RlN^d=-rk5
%fj*Y'UiNU*TDHtHc-sB'kNc'f+_39u=tA]ube)B]$\RncVm>XIbuEg$iU(H6p0OBYCQ[g`mRh!7hBF-3\R-mhcGN!HiV\F;5!Q7<
%5/u$eZU?2^H`!2&_bth3r>r/FB:+R^S4Oba[PKS=kLP@]WRSYD'#r?g>5#)80Gc%MY]8p^c;9i4m$i6F/SuS7f$:HoZJ4Zu<VC,'
%17rtiD_uLkV+6#1arTj21-<3lY1tMgY;Qd?b?'g]e"*Q:m,>pKR1!#uq<'p;qQ-uPG$S:0^YN]oZ5a9o'/#WSDXO@OV&QbJ+28PN
%TAFJ7IUD<I>WjUmq-R4A]@bS4rpK$%Om]o?<k@1fU^lg6><BiQ/\[?nTM*PSLJtYZr(qddmlt^V'tfUT<UKeU1#LW5nid6/@$mk=
%q+gqRl6;^D130u$bULF"F4ttJHIg$ZX-_bp<W"0-UW&S:D8lOd_'Rj>d5kQ]I=>iEPa,eY;)pVK^/=;/1KgQFbZs3rQ^LPH\p0df
%S"'5sJook\L1(GB-N-ap:6S:IfIFWN0+*qHXBe&,W8%]uX-pZuLoNs4QR2A#]hh>YgpTl+dNMh,))bVmB@gJ4eY_<-YSZt/-*pmh
%Y38m7e@<PYOEPWOo:XX[;](n9$(4-N/c4b8]f!sS]rJ`B(TZ/mYZPbV2&(HtINds"D-F%nh:D:8LV)5Cm?pP9eCT->H9Ju;5Lp4s
%e=Nok#$]*h0mdD0o)$$.L.X*X1>/#GL>hlu^bG6*lTY>tP>miA0,mm8_r0"Oq6DFj2)eQ/o)J+Ob!(cZ:h,co4>F.$h+EK;NcS54
%L1'n&#^84&%b,S=9"eGmn'ldjpG?'/q.+TDmWL)mWI*WB&$117NZB3n[AM70^Q^+FlYWrSA!e<QV>a9W)&Z]ha!sD&Q?YDGl:.IV
%)DsBaI'6bXA.Fk:7[DjpZ#ah_/J5OJ'<q3+ic`UnbN9g?5%Eg1fTjen!hBeX%V"G#DkKg(Bio_s[;H`&B5Pm:q\^fC`?6G4^cOG<
%nGW#m$]s]AMBLY$#._c/2AGD9Z8dY9&H;:pLYjm,A/;G'a6K.Q0D8L"Ecs#SY6F6#KFpY64Y`ra<S^puFB>2#,t1+MU*iWd-Y%#G
%Zm.GTNcT;QmiEW2-I6VRA+(eMWCUW[$6c\bAoP+OSBg*ohk?c=%'B^!:aqFi/15Nt\knr#j4FF^la->AeSb'3a5@Fp41f.H,HO7%
%31Ias;[g*NY'*YUlj7i*-WjLBni2HNooO6HP)0cu=IZ:m-7,mfriJ9<I_/;;Yc?Fmjd63:,jR28RO2or+`&CuFDMio=6R`C+@D^j
%jQ%auni3Um18ZS!ib7_#k\6C2fE]G*d#pq5n,n<r0g[V&=YR8'Utm79S'ufaaG#&c[Zl)80ukk1Fh1:t$,'4-f:)QlL#K?bToIkF
%g4>7;X2/4c_NYB!i"k4l[)e6_rQkSiR9Jtd=6Nr*?E.SGTO]K&11:\]hfLOK\!MO0>ElF^m+\d"U#X4ih4jtp&V78INK0V6@o5s7
%1qJe/pbp9]T5+&eCKfbqT-de''(@TraEPP'p/pV"qh>KUO]P^8jbMRO_ro&*,9>qSb@kgT__7eL'ErC8AcV#(4h;t[a(75KFSB3k
%DHNh,(cs2ZmP1CQ_gE#bNI#p#UrP\]R`$<7s)A"lep(EL5Has6P:LAgRECRF`,[EC%F3_Qqe>))h*:TEWQ1]kO+*&XjOehOqdSSk
%h?S&pJ$X3klg_QiYutkO'=PK%lG]A+%B;!f\/P[Pm3^:i/6bWCPcPZDiZ!9l%C,HA:9m5E=TkI7-*=d4K&Oaa,)Sl#7WtT7+"4sY
%pC5/=dQZ@Qa8,Kn2')1eVFpPnjIA;+5=Gbm1l&jT;E:J4Xu!oqUY"rQh!1QmWU\1UUCD0TP-0k9gr'K+6\riV@L[ugTX<3RV-V9r
%'i"/\`i/9]c9MsGl$m:@K:TB%@GQoaf02@+lB#lGd2s;"eg7'O-8r<n3p1`dhb=)`^$('SbOs.0pu%"6YC2-f53UA!;UKBMV,p]*
%*4_Q(dr\Le=9>rY)^Mt-%ds$N1%LpCFj%=67?jdcr@q&$LRa@[hSC5.f,jk%2gaj6j`]sC>tYDHLZVI9Z;[oQ:D2M9hg/7#K$>%h
%l8UCImi5XSm@SA'4/p9nZU;')&/0'G9Nn8QDOI5fZ+!h\Mcr+L4U3nVGIJL8_r`DS%Ds0?;I6[3Fjc/3O"XCd]:>=LC4#i3=>76k
%*Z?P/]Rp7(=CQDC]K^/MhOYqHI:+R11K)J:1>Ai(pP%^P,0$b?7,IS/)]0o&U/(8(HWq*DP'DEFn/0G>K@_3+l@do;3o$haSdot5
%_4!Ts[G"CNNf#,"L<qI@$C3/BHFa].[Jk?I'WJI6(%Im`UWDb)X?`]?%sJQ8Dlet,d`pusq:U;![<GmGpI554gIaFE=KYkl\5eE'
%(e/uGq$Z]oJ)Q;d\<kQ[Ga2S+8'\SMEN/sf&QRSTqq!4=Pu+0I<:NTPa%NCh2)J$E/#'#F]^BIZ-cLnUHE\GErK$>b._GD7#](K8
%:+EbB6jR'_*JWm6opUC!/@7"[*r!%UD$N.E\'%,)Uj3E6'A$7SL8Bbh>'*sL-IZUS^;-$QdD\f(_Vm,TH5KBE0&OUVA0,q&`0(YJ
%o"GquT)H:Q`J5H\^\gLrh64!`9)HKf1:$"-\.L@Y8?2VZF[HGe!d\-G;=r?.=_q<q>t]G@pEg@pi/MBt$NYfeW;KPV,<u,'M-^!n
%pEk?(_+1uoY?#Sc*KpU4^8:c)qsc6bG#7&%41a,"%2IdGT*[Hg1PYnW&\^%05XeGZ;g@S%JbJJ:,*^642VoC0]b#5EmLW.'(Z#MX
%>jT]W.rCom`t`06,pMER/p<:c0Dj^5V9fQ^<XNKu*5eKVKZ0k$AU(.u+2<4eBQpFd$#cHC5$**E8UA`GmP+%RLm>:9+sAE-X).S*
%QU<\IQ`t*>-N6@/Y9Vii8`J)R.p(NOg!'QVP/M.5!$'eLnja,aH'"KnW&mT.+dL#Olj=R'r-N9f,,Wg$l@e&G5=^rMFgNg_NPeSq
%[1poW[+`FI*8m]HoH!AWRU0gJSQjlr:^[esWdQ=s$/\or,?b[3n)J\.G;H+bjqae*p-RT'=;:"_,BX]L3MD;Rm06l1W3W>;=Ro0c
%Cb&n5<Q`&-:;c>ZaB9]j3ftie1g`pEMmYWU8Or:/.&%)r2ndLj<bh(eEh$@j)jgcr"laFMFR5s;WkqjS]4>[g<SFu<L?CW(=+I?R
%ekop+0?a>+G<S9U:pOf"U0:J/M!5=1A=/A<jDb^6OLhc!".d0]5Tr5\n"&7+F@IiHJk]b6mV6M.W:a&iKsRs1Z#+@(Q`rM!XWIr0
%gmM#']Zqgg6sR=5Kjf/Mr/@B]j9+:Z24'0<bD*K85>JminH([O@PrA=mLG8oij6*3VY8bR%kaI2ITQnh[LO@[.AE5b@>Lb'!X//%
%h5t8U2OqsmD)o6@:$(."om5bobF=qbIXQRuEA3ktYu6rh*KHe>(Ic+DLf\%5k2u"!j',<r:%2,@Q#``545%-g*j$KSE)bieON"hd
%[08-eGUS-?(Z,6=I0VNLi4+]tm"@$Y85$fI$QJWO<f)`'cIRAKK-fp)>0C^@j\o$R:9(9dpiCQXIkDBWg*3t2*TGBr?H'L"p[Jaq
%?UiFbG((_5T8[qZO75rbr^lN!m6PY\d7i_!,)Ulep]pIREJQRI4$TKC15saW3kmfD+"#a5gI5c)X"]rLGJIMN-qns)56ps2d^a^\
%GP;TK@J7Ro@1liYj>t0i7'6g4EP.1eT3Q"o!do.@mGP93S\m)$JPELfQT"(lb&tb10oU5ElA_G"k<m+X`0#<$Gq9]:L2eqr15UI+
%<A,Tq,7rP<kQeASEsuR=pCVGFmZZ&d`%q:i+54U@9&F38BSh0eN&kTh:ZA\[n]PelLJAGgH\qIVR^TI-pQ*l!\;fVsos(;'8h$IK
%UT:U^9Fm8Dm[p)lISNDE$IU/?_BrGNObkDh.apb+JGVKTl-.8ciSG5+&aWp3*Q!6A4,*k[i-uL+'*`79"#@TS2l!1KX)*g$')ad0
%31mE(HqAFp@h01fDiUREH*dt;(oAZHiL\i_T3+;e58&!@,99h#.Hc*di5,I'aJQir>WI$bef&akH'_k-Id6YEJ(^CK\J6_;<17[`
%QSB^uV3:(1ZaG)scF-f@qE:8JM+?#Bgt1OC%+\1^/&nSSS]'E\k_M-,KkRgt#stEpTn13FOs+"`AEYioX@#+\EIf9'06YL/[/Eb'
%lib"R\<\5-eN&8n]mGMF*mE45,\=giFUKCOqqXH#W9(q_F^HCpe5K/"(k9j?$mUMp;i*2X\:#)Rp=5MIVg$g?hd,=UM.U'6B+K1g
%i_o-]^WcGKWK7a&,j5Zf+Hprr-B^%&eBN6<%p)7djG3@VpPp+W-FrX`b<tPWU(8bin&>#H!T]aCbD6l9[i3'js1u,6hMJfiAQ7.g
%_gFN7`nn!4,,M':pjI.ibe3?b`2l3/U]90%h*c'%Og'*%fj(7%W!#+BoVRZk@nQ^`#35/e,#1MnRMB@fU5_%c,:QZZ<?R2BCj#ok
%_,SM/>=s\sG2nY"DKlm9T+;RO^b@D360q;[YFa7m=QuQJh:==l&R0MlCR/+LpcU(obo:GV`RS_RY+G852#]u.2;p'V#/er.m[i*6
%H/@okVSX\2Cq?F"Plhs1QCqKemmd*Ek&ppXaT"Fl\a_,1@j[;;,f2;6!)-J?05Z^\Wo!(GHE&)he^Gr-&k.<0ojqKj78e?[hGh,Y
%`2p!:OP%Y<+eluiiWLSL-VV<7cu1Q<lHapfm8:dN6bFf^T#"GWa38=41P9nNSRP<k^i\!P`.I[SMjVdU(!DGhU!pV"aMKF`XpFB%
%5pdVt*YmQtde6AsnB*7cMR'XqrNPI#1FhI<CF/:9=6<(`O6X:;Mou"/l<rluU(0Mn&\WW6V+PbbBbrqdGH9\E,B=d_g(B5!\nZDR
%pF-A;o\he]LJ@s4L+Uc_:--)g.Z1c2Pr^p3$3AD(r_S'A,6$o%XYad+oPm7Q@Q@O4@d^;?dE85.a1m,ro$W:pn.[\ClC!.@^Rlrp
%rHrjM<1,mfmmacu_o,OC`HajQ,BQoV5-0BZNEjE#PtF#BW4oGINlZ.9S4Gc/ip2Hj7FFd8O"RNXN+.J0RVf*D:Ekn0jlPm9bJu;[
%cM!-\_a5$64)c2tmct4^J3-Ih%WoDD">uM<KM`Xa@l-*=1tamWU#H3''KstO]?D8\f1pJCNbHh_6PS$U3.$?fLAPh!HCF3X^O+\A
%62'1ZmPl_DnKfcp_oVLo=NWSF62LA&$\]aZeV1V;.HokFP4"m.=G3K5%nF6;T,$6D;=[#rSF-dJ'TA=K+7D@5N$B*HNZZlj\S+#C
%$XOSNLHF[!XlmQIdV%*`f8_M&Xg27&+hhNX[DVRD^=hhs/nAG=_3_=fd"T5dj2t^pk67aGb\akGYo5-(g"4m@W=b$%<[/Re(d^9L
%/GMd:FaBLOm1@+*_H+$K8H^/Po.<Pe:uaa2hknQck?cn'08HoZ5.C7B+5R9(TeEm`P"iS?Y?`J]1>s#"h",(EIDpP[>349aYYe`D
%)X]>%)<W6UGi<k"4I1%$G(#-X5]2?12IiRS?q5&BN4MALhXe\*?&!a4lh$2iG42:*H`-&G=Ks2konEYZI6MTiCH%p0]3O6Qou_GH
%I=CR*TK;KB&!+ArT#G?\jul%d^c8UBnUNPH$mO:,7C`;e;Y]m+/4`Z`h[V@C+=Lr_Sm>('<'_rh%k!G._SI-44&(%-Eb=trES*BF
%]b+)qfF5r$<*NN<Cjk)q_^$FcXT8I=@I-FLmE4C1kph:TDE&k2]/Tc;PIRk<k)Z-trSag%I7]>Fn`L$r'tst0X?**9:7SaGaM-:u
%1K+NA(P5/X7uo=^qU(RkfKGsWK=tE>(G$WMQ,g*=\f<d>?fhjUHXV2D@bVIGVDc?O@gFS]LH@H`RWu`UC,d"fL@g5ZX7$XL6b!ZY
%O#Pr0]88l'+YW_>!c.Og^n&i9r-[iU)@V"T*%`SUne+V_/KY>>b&-3KeIVfTX^!g)g1/%2l\"K]mXF1YI'nC6)pb_Z,=+j#[GSIu
%f<EXjrtt/B-e++8j[:s'</*VgQUEBG`XMUhgc@7n\RSI-:h<H^]!rAhqU+[_EB$%+Lcn(t_4Lh?pFAC-JV?;474Wa9'AItQCe!8b
%29e_6Rlq6$`[.)!\:7F*3EH7>:S@4jGs8lIBsmg0p(^pO^OL8HN$aru/_#FpXh-(c.:RYAg"(dFlHj=e]#:)3)m[6n;P,b1&TT+h
%7n\I$fj%0<,P!/cE9@f%L!@-uqVZG#ZuFZXQ'WT]n7CiN]HD%WU9UEc:MKuP)cEl,6L<e"l4sfoE<&E(iM^+CG"=LDMRs5)k9ZMk
%;%',DgXk*"*m;Koe+onD.9@%',9%9D*QMIr8-0-I@HYR8d=Y\5fO2G9iNuHqaQNKE$*^7T#si5e(Dc,UEkbMd=eQF4@E?h*]s*RZ
%C7&jT`kn)8ZWK=sHJ'5Y#!b/?S-Ik;?,R+0LXMim;9c4iiVmjrJad:MQ8f9iAq44);W;L%q%/OVGY?Q-@JK_C]%=u1#Q%S-4Nnn3
%;@27FO\AZRN^++gD4et2;t`E>mk,j?X&3a&5U,MQA.9#;^flI#GcP-F9o(?hJQO[aJ^JX/O/]b;9B"+6rAb!ROY`mGPf#?a(N*:?
%9Z(1H]ancINKU]f`U'Q9B2\N_/6D=fpVQo)RNG/pL]'2S^/Y[+EiV,/2A>Onh7.buU4GRH[P=Z_OZ@e^-!jcuV-X/PRsE?;OC:CX
%+(+![is*U&HXnN+a^qM<-Z0*hcm.8O`3XG9a7FlOE)>#?$AA@InJ:Ud/rpGuZH(.Tq[s$_`O,`VNo"kDF/Y-Vee[O@X"cL,iQuWA
%L:p$,:36U1JPdM8g5";hTSj:,H6/D[_aYrcl/-F9b<8K*TiZ2CcZcX6(V.U,So8Df41i2USU_tloPFUq3C,kDDp.[TF@8;^MX1.j
%K^U1**MorSc/,apF6HJ@XW?('"LfgA_S&d+J[kt".^`7i"km/6mi#hK1Uc[qW)#2PiLQ:@OA9F%M8SnX%[*,.g9_I?f0*j%$']VX
%hIFJq6`Nk:@4f%W$TAKuHhXU_,/Rs*#EK7?lg[;gl,>]Pi5E)J%.Im'8?]'+Y$*@`f2kc"P'@O$-3F-B>d@(5lM)2!qC.L3?[>GP
%<P^s]G,*@"S2_h=h\ccHh!MEb5d?e4V=qkSM!X6RQ=Z4!CQ(EAkp?kY@NfC#Yq>ZuGO+\i3hclCgsOqNj0`OAH5<SHjQN$bbA,_l
%)N,h1\84c+hQ$5`*9K)$Ego5Y.j\fq`S>7a\%C1>e:depbtu&lZ*?fh",_UBl?GB&CPQo'p$De^hXs,bP1m[ZZ^T+,IkR<uIu4I6
%;$/Vb\O6j[FP2\G_:?@/6st.!B'JapL&lG.H&A/a4M=r7Z>1HII^S>eB$ED-XnQ:RkcS($kTeu!,V3dYpL7\lHJD/pZ"AWQ##&OG
%\GuJ9%8tSmZ+I;7k]I7F5kl[,k(P*jp(#'<g<Ip2T7+M/hJU$g"4AEH3k8m9(Ws]p]Psc4KTmG9/[c[L!uiCh3i7TgJ3l5DHE<2B
%'D1FEJOj?RMA=m$f3on/&dEnCb5s<WGFZSpODgsJI*d/OM!=hAiak@PJ;'kq;2&rCo#I2gjH(4Zl8p*i(D-G6-.\,X'+gk3@dPYA
%P)>NJfeHmD,>l$+Z@dV]fh:9&E;(L':2H:h4G@EI+/!t-@$:/i+:(Nrc5F&N9nBaJmOd&%q!U2+m>K"rd%H1_OsVpmadZ$tj[;5N
%M\0BU$2'#_Q1Uh,Ugh_5&@/2S]<.WL"0WPi)";2Qdr$bX:*]:opiD_'*1H95H7VpC_1XuF<.:RQ'3ln*m7-3L)Pl(NT7ma,3F?V"
%2RdPrL3<Z%qA*!CXKN_t]21gs46pb>,,aq''c8od8+gKfG].\fL+*#1RFp<IikY-Aq@@eZMY240/\-Whs+tN3`bcpN\mGbN)N]&A
%I8@$sD#\:TcHUj!2dj6&G7D9iR]Ud0#Bk*;qTqu.X^9PIX^JtY43mW1:7Y#.Wuh10p'1i,AX.3!=^,fY%:'DRS/UhrA#QY&Y]]J&
%4DlX;Y+?Ng[!MPEWL!(BTnCP"E*:sq140@2pO:=c^5omEO4-p/Q0o$TFPi,'OVhEu+/V8g)IZptWjm>]qa+(l"Bul'HQW%4paU`o
%*8b$#g[W+$o%&fnom#3ifKB-L^IU$#pj^H(@q."gpKp)c]\uH4M1!+W7XZNP.N&>6l+gKhVd9AuWr&UsSDt!+=e:$#rq8F6+)^"Z
%gA9ZRB,\/?<l#R*DS,ju^J<_P%GJOCBZbDYH$H&G`P:BojkkRXUA^@uhKK]MJ,^f(25V@Q/DFt,4[6O.fg4ji.STgO8@&4(jN[L#
%D+344!D^'g+ES>Nnapb0JQn1ZG3FMEf)rh1\qW_$?F1IFc:%EZGImNKaaj\k.W0+;*IKe_!%Ns-R/dmXbdqOq.RgJqgtCq>5fE3c
%`rYtqOiOehm?I#%dmTp5cWMOj[ATs!c&?g/7R&uf6&cs+"[Ag^?0`Q6qUtkI?c&B0V5Jd-#0`tnh8.2&l-08()s>fj-;"2BcT0t_
%'Y(no7DW\L'N:uR/U60j".2(i3`bN7>rDMo#N#d8Dtr&Is&>)C,Yhl4E5>/@,[!Sh.*3/T$ZI7F4=AlAOQMrR-V97E^rpb[@0$?:
%)pQJj=U&E1<=Fa/-$j[6Q0$@t@4NjL?q?uJ@jE+bKV6Bnd)8jK>,!=DM5;=u.)</5*L(5<L/s-?$8TS_*^qEs$R0AoJofj4[)`G?
%8s&Bd$Dp:N>`e&Y`bOKZQosV1#YLW*@4NFqGh/=Y-jFsSP,q]EV6EHEaO+O/!D11Tn52L0"fmJm=DNdVFMkDs71,IeoWU]S$Si?+
%'8RHTE',)83D-MZ"Bp<n%TBVd`fU'!'TNO)%c0]"i<&f)9;CtQ"24aCCaB&PF=r:ib#VK\*$l!$7+bfWA:P;;%V7m>,YD[*4/@D+
%1m#Y.0@`n)AB=udNM7l_%*\bg"d[45E.[*rPRABj@g&9ZCf'8>hJ2.TcJg$XYmd*i!JugnP*'*.*MaO6W@0q<7-A7")@&5LTF8\=
%M5E;6Q/YZBJ7gtjMKTZX0qJtuN/jYoZAn!XFs>=N&me^,_enr4^BBU9_fL07;_q.4N"TYj6?N?t!=>J,Im=Vt'a*hg%:gkfB(1CA
%jg0)i"')$DPXl?<$:$[6`s=6E('G3d_,r`G!NuXWC1S6>pL"ZTMtZ04-$G`%U_a<7aGMgJ/]S*-OD&HAJ/r#1;OpipZs[SP(lo>>
%OJ:=d*3a%n*.KnaAHtpA!ELNUB5-R%OtDiI(pHDc(sk**[PW"A/XoQ=,g]'T4"eDH[qL.e`J-dqAspR<26l]0A\p9Y"%s++&DMjt
%&P6BGe;BcuNh]S=cf+e?1gq5Pg.5b2gk)tm6m<KiHkO"E+s03j))3Pg2!Z#&1=;0$J@%oMB>MH5bF](L;*sIYr1rBk0ulMX#o5ru
%MAD;4Z9TD%78X@<Muk>(4?E-X%D!)L%rM]4aRNah3fMW<jG0ZJ*N<.!m3!>1/@u%X(@>LE`/4gd>)&sUB>`B1Ml"6Sg(p;m=;4Pk
%%WWQ0=r&2b1:Rg1"c"8ZFMPO^&s&5g@5%mj\CF!0-?S4>8Q!Z48OtKGGd(0\/Qt;H.o"dT!M$IW6U[BNF@uT]jVaaCd?.E+@k-QP
%?@?OOpjFD$U&A?&&YC,`8A"he=:*<6A1"bb3]llr;%2j!ru+O#;O-nNqq/LVEePeE?at"'4cDX!4o]+_?k?\&'GrI4!'_S4NXJg0
%a?l8fs)tc<'aQg&5YgCPd23^#+qA]kQ6:;"m21g/kX2CA,$&@YHRW)l6mA-q'F5FAD[#H0]9NS7@OS,&A#C'9&K-1A`ur_36=NCJ
%p1t:4@]V!60ltD97*]gcO<_i4/S>rC#V8Od";#@L8OUnhCk?VhAH]'S?7Q9.VUXk7dg-'hljc*en<f!PSe5KQ)lBs/-."D'3D0=j
%+PeaqNX3ZJ>6PQ>Sf)&hL1VPa:*,"QdSt]0"Hekg%'Z#5C^*GXcW18:!KTk@(^)TG>*PRo74=00#2'>t(i(K#%[)IN(A_/^"pL.W
%CQZE>E9n]G+et95EIb)\*i>!tciW13i#/ENm-p6l/6Ws&.d2El&^p_YTbZQUf#^3kU-tln$&g=5mf690F5U//OK"n,W526+K&IGq
%[SE\lQu9549EeoYaq?kQ<"9No"uOuS(FCQ79Rd_C:!D8dfa>+E"I^9?.o8dBHgD/mBb&I87aQ-u(b7sa7WF'>"\fOR@?@bPff5ji
%M#ofUosK=QUAFSi(!IWXHgC`:_%[4h/N_Vm9cQZE::;>\f]`F>K&PX!BooB'A2&USZ:0EHSEk(pAYhh0OK2L_@Hg(\!dQbVGB/r_
%Kga5m)GZWuUN6:5O/BhecG-$o='I^-D)kO!'r0F=Zb>;E?!S9g`*.Y`a$>Rl&fi8(pN=4L[14+u?4r1/'!Yah=K/4:6#aW%<X?(:
%XG;1g=NpeVX-L]i)`H(FO[]Vk-irW;&lsb.UDP)1,b/6b8ehN1Y!CDMilN#k<tnI%[eN+,`rP^eJs-rc:Q&a;/tc>d8/>cGo,.,p
%i5;cd&1#B':^j:`+GaPFYYZn8&MsiX+tM6@H!^4&ZOB@W71KX)RjcH8VQGen;1deE7j^NpD5.2qYUkDX9AmQq;X&i]M4!R:.aC`<
%O6Qk<SA<Mb&J7V:?UENrpfB!(A46q)0[d>/'>9J@aX*#u-`$3=BK3<W`IM6VdGC'f$5cGr-1b7-,u##G5(n4`;BMArXP-)p6)&q9
%cjGe:6;rGLRY3R#@sSX@$Pj@gUaAIe+M3.iX;9#834)AR`*-jsL8^IcE-N\`jXnn1is[4BCg$(<9+3feOq\5_=1H9W=H:BJ8HqJ=
%=pdObBKnMEX"6kDWXIEZq&*B[f`8W4!R;+/3(jB?a_ns``#=<;;H%7o=;mgNgeD1X_?75%*,XY%>8%([('l\Rm3'f]`!ZdU.3mkU
%V,9n<3Ir?$!M:Jj,i\sc5[Y_U<\"U]!>@k#JPHkH'$qm))0s>=imAl=7rm<UG"F+aj8ql(eHT2D=iY7Z-X-'c@Jp4<9#CE,h5a83
%S7QsA[Z06cH6#+"@eNYdo[m]L*FuL5fgfMV6VNR[en,g]8K:,@9+W(J5nctK.G80]$OiguL5%*V!p'o2JcM#9m7pgV@*ulD>X;K:
%n7&klA$Aa"M&Bi#b2NVdEWW@^-!7NAdYh5#jEPp*QI5JXV%YC>)GAV4h.5Im!O`VZ0a#@\\4dA[LP@p&[p%dKN8m0.E=>B^M2nhX
%'J^_62#+4eE#-uYq!bn2)7/TogWnU/Eg[QY\h(Ed;5>V/'P*?,7'<5?PVH=A5j>f:HR2=#\B^mHJfmrXETStgk"4C_fa:'+2-^?+
%@Y&%V-4s7=JJ;>..L\/-[@p%4B4@Ec[TaURnh#T)JsP>GeC+s?FrSdcZBX`l4)GPhU[)rB"DS*kK&@W2PZTq]`89"b![$Wc'*0$,
%-hK.qe*0>>%$npg-R9&@@2r/1D\^)@5SVA&,pZrPH,,kF'NBh+`0rrJU)gCeed*OK``<Gu%N-0O$`ToY5Z4J_$-R!_mc83'70smQ
%m<(p/22puC(JHDlL&B4&U@o0op!<[HL..UEpeI4X'SLjEq2H%QNH!UZr`2Q6=YN1(`'A,eP9pLN4/=B\W<d9,5nHKU!/?XZ@)5)<
%H^%&@83p3%'7[j9'uh2Q((a&t@B;tGXUpZd,*((<NOL:n(`&)jGV\U<mei_X-B.4u_;bS:B\!H2Vjrgj=:N4QE/=%'!Skgf*N_Gi
%`utADV+ruSDN;0HMX`ZGV#\J,Z;!_*/&\O>UO].O-nM&)[271;K-th#JM.*iCd$Ni"\)'kANc(AG[0"aRD*YA=dlT&%uproR%cq:
%j$3_@#[k2Y(uM=UNoR/7UO>LZqe*SE*r,VJrW/Yh<=aY%rcK;;^;Bl)H%]*<jX9oZ5O0cfl!O0"q"1b:$[hg&rPc.31"'_,[sutE
%i7#I-2t5d5pDiu#YPX>/o4#*,k\pL&#=3t>\duWTJ)-%@b^\H09UQcYKgQ=lRT':b(UZIK1J"`[!C=XbQpdYQYjX,\-4#.`!K-GK
%OdO/]-^qCtR$g<*"t#pRYj*e/'O!=1KIlkKi=^+[=L;-W5Y_G5WrrP0.sZ_H()L?q*hACC$^!PS`.D-%Jkqg`T&[pf0h.Jr-GYi0
%"G`ei!A]@5U.CsfPukuR"ZRlK4YT0<&K.Zi#TTuLUH:kd"qG)UBK0lM+u9?F_UWTN"5+,SMV'TgDE*2J%]`+0^;T%M"`H8TOSO6X
%8N:d65;6c\!fIdV8u/[\!u%SDhV'k3E1$.COp'6S?>q#LP[2!hbD//o!ha3\'jFFPoq0.s5es*Ef@bqt@9pum"fKgbQ*G3Ri+fqJ
%g1u"%rEA<=n[n2fFl&-i+q]DC*#D8uN)bjHE7GDO"W&_p&=;\K:r.G;8i2/88O9f-8>Jh=Ght6.'%)ioOjtDX;CnLE>k(oLa"\j5
%dj3mEld-'8rs`C]ge*,A%oEXhMoB@CAU*!b-En$gM7.^=dn:cO>('qjDYX.uj]4iO8WmY0YX3&879HlDH4<o+ittE)AVk)tAJc98
%?:)V3$$VgF\-O][(6ZT6r^Z_lc)13nbZSnH+u+l2.Ua%%e&ns9@@CTk`>OZ3)gk&0\p0GgcjO$mc"GBdem)(h"l(kdHQB6e/"Q_2
%&oRZSXU=LUPmAHWgjEk9+ULt*@Z,6`,\,)\!F_]^f()"`?uPPS<e5KFgu-6*g_oPS^Tf8u>E`ZURXj;S=LPPk'9G`G`m@`P/>S?F
%Ed6aCaF;t'"!/;3-b,g0)17ng'\Li%iDM7'KMci#!(ij%1Y,*]9Zu6tW'fU+VXb"QOB/TC=DW^m$&tjjM0#Im(cEKW.m.2_8(c3t
%K,YiqH;[f9+le<7J,o,LN71=GUtDHm@tZ=o]oY)%h&4BcMR[r`hB=>j(q0i_hZPQ"nJECrFpoUX(&K0>Ir+aiUoHVgFk^&*s5g0n
%N!Si<!5T3ikiD8N!\>Z*.)!,/6HI&KrW])Y,arPs>ClhcZZWQ)9RJQq:BX@?"lc(5[#%hW:I&?^OJsdjTcD`i_$JDE5kG\`0,F"4
%^_U7`*lfZ@`b!5<.5Ym)b=^>L,7n8H*MZLEY/#FKW"d5ObD#7X,)uJj+V2C9)Sb8;9pkI'["(NZ<@WCnO!_IrA?/39?%bWOaPhs^
%LQineY(8\eU5JI^(:"dGV?O"l`0!R:E+\+Xh\hk,iHUgT0pjBj%;F(]&OUr<#[%N]=`aa0P3cEr96icT%Pg_DXQ*eM%n;=!9cVjR
%MZ$DH[G&]1,!k'O&Pt`oeS<N'i>)a,i=#lg6P5C_SofcM*-opf@Y/Ja\R2St&>Glgnc\I:WM6f=MXh1%`aC$D9>K+*#r$f0&Kt2n
%$4@s\C&uf%4:@W($t1$D05YjQ@Q$\fNdASU]?c@Dcs$2Y5YPnIqg]ni1;sot@qgmX=YSYec=Ua9DTM;djF[c%Qe/Gs_1?tInGi`'
%AC7P>0\0"+@34acire;6O6X+<OS]^_?fBuEI?BB(N3FZQ8uu<iALP_CZ80X[(a2d)j=N2X0Pu'G,9EtH*/;Nu<WfEi).H*=<fIqi
%X2`67:&T0oIR$$&F;2^a<j`,GPQ;/HqeiJZVSn[QU%q,IPPnjDEhc2\1ntYh*l]fn;Mn@Q.kB)CAWWQPOl/o1,^C01O<X24OCQgn
%!3q\uNu0FGM(HXf'\;Y#>7XSd.Ip62KQ#q&oA[SBO<P'74tLn[/HU2h5QZD_1.a(&<TG%I=,@E=As'<UZjOIJfFiX?&/C\sd)*%3
%^5i@:%160Y,lQMOXM;D6$&Kpb>\>45\%D^!<5>%8Ui\-F^,;]H_dLnbC5ijn+jrc$l^8T[6nN=#O<$+YZ&B*.YmfM?Yj+H7'6>/a
%#H2<)%(IUDLHlJb6[.fb,%O8N].)_IZN<*6:_1ZW)6f1B%4fLTMJ$Y?+INtcX/B(s!j>Cg33qpH'%)OB(=+]'_mGp[Hgn,=.G.2"
%VEh/4)gJIZ8!4#+iZ^Jc66K\'M\@ZjRBkZ]*'qQK>jF*Snf*.mcNVlp,"<GlM<kd?/'!iU#di"%r@ml=EE.U0%M5@2S2_/->P=JM
%6(@?Q>)48QBTcL0?@`7VS@.h4DPGK_is$WlB5A8aN1=TD(P^EB;';tbEW&#JSjBf9^L2!_)C]=ITM$hRiM/q3c<CPc.\k+N#s3+<
%&oMP1I)?CT120/X`s"*s[p:0ME,R"[]9u2'mPfeGI",;-p/hX2+.h+[N#6,aDqHJ4>Z/'ALce"U0P#5@7>>2@gaQY)7%ee+B1>CR
%E7hga=HXXqH"d1gg>fN7W,K0F,5i[[)9Dnmrtdf5Vak^BDZ2LWN$;u9]9k:PW8H!r_8Ae\%&:mjk%*?n`S+`c[hVd]"p57H^D1sF
%K=)9<XqQH-U:7s]'+$U#U;&r9*^^O\#$?VsV+H$IMIik!=j27:iN^tR,Rt4fg]FC.joVZ^bQ-eN-7kloMo35/*[>+=H3r-LMA\BL
%*[cT%2d:8jS&[h9D!VtL3&H>VVNI8[Rj;Dsh^UD9-mGM8M,CcNkb&fK)\`J%#VuC^*9^J5BlnOXrpj:!rEIR/Ae`?GG_f\Bf3-jG
%,YWH>G_/2dS5h*BB8/U<m#;_+..`b#YUjG7N07;:Y6jr!bLV]N?7Tn4`Kq&,r`76=1%+K>!nfN2%OB62f`2^'rf62F'.<+?'Q;)"
%NR\ck>2A5d\J$tHn*^k1_g'8M_I:Kn.!Jj?aLAt7aB_ZO>@lSjM&gcZ^r$FG&QF/]&Z70,h$r+HBK5Q\012GN"PEcNMBY>3#%C)c
%!KAM$0G:s>ZGdRB.l5aLJdh($V0Ua##ff[)k^(>/(kNLS6GR1.,72IdFpqc(O(IZY_-4c(@6[0Y<Y3_!%*UoY>C1?5Eks5b@)[Y(
%U+KK'$mf5e=4h4<!KgCeb:&l<?&I`[=Op*FJ^l;TOT3Y_]Bn77*9il4!VHqL6D-_'=an,-O/Q=t!Cpfg6304o$7S7bOGDAb-3sMC
%mGDjEYp.b&R3X"Q.C6uZEi8$iLi@EZF1_G&T&-oRp7jXL^\P?7I`!cDURL&h]"-qO,`Gotg7p0GMe\*_pou8K'p8E"9sfM60oqsL
%DlK7q2-D.fhSloDnh4VQ*N;a0Xe`G)W:IsYFV'9fDY^E_\Fj.-fQ$1QGSaXGAh/[c1UCEuYAmh^01C-T)CjUT$a80)S?j`e%pn9"
%g%sL?l_RRV(us*3)eZr]`ei;8!g=LC-XM!JPL5tHh8rQEXHrI(.2#9JG[B&dZ_*Z;3QTM=R7?IQ:sPETgLO8Lm)c_4?9b!TP4,!4
%<U%!`g1+9>')e`.]lAD"Kmlkm]-u:!rW)<+m#TD233P''Q-rG<5q-[NG%h<&W.QM3s#(FRf=ENXB0<rRBD)_m[Hk_3?Dg-nS9^+[
%W0Jm:&aci^-XLkhNpo/XX@7="'<cE1V"W#J>^@VZo,;m1iY/M^]WS3q?f')pBBJk;:s0C7hZ2N/i0jKRC6Xcn?M/4nO+]a\Tn(b6
%Vaa;8Tmu[/3%`,6Tmp"K],3`8qDUjX7)D^q1F4A.jU5dcT9c,!D_**5Y<N[NGBu;chtRk2T4dO1A?8tT<Vrq77Iq"P*85UJp$l+S
%3O[3tPBt-b?\nFSNU&c'qVtZolJ/u%<dSWB6LYtk6U-;DRZ,@j7Dl]kUZP7MWYiJ6i1O;Ujf;H'>fnR?qWT";@@]6na2d-"Y+o?h
%E*sH%kl%N8;`MG8iB6A[g44iQcQk-m'VElo*!=YF^!9TWPJ]M`iI_K<:d<g@nX#u)hZN.g$>PG).Tak3A[9f\7-/2g&H/u5"O<KB
%Z.JYUf$Sl>Y*Ej&ELS9>]*Xrmc?I\4VptDmiGSScooI(S2l+oMZ1W$0VjmAJHhijmALr\f5@/!oUGtgE'@uFfg=40mcir%+Ip+9@
%jNXmf'9sMTXd"!P8C;X)_L3%5ccbsOSU3,YqdW>+;"s=WHn6=!M/b`$LOm0]Pn,YhI,9]`FF]ssE6m[eDr6'9Q26EJn'efjM_H$[
%$sE,RQK+X4/2-NF3V+AfKZ7T*/=i?]dc&LMYXW8g=Jdk<)tA!51O8LR2AJ$o-1j@?7PKL9o0jpp]ClW8p6epM].DXG'Zpdia]fHo
%Io*u#(u:`u-S")FV8_+LpdB'9'`IQ_EL;J9ljN3m,o(rDESm3Z:d@JV>b#rKT/\_opo,?RR/"G[>tj4k+bm-UYYKMLh6PP2C2e1Y
%>3Z<PP_#E`6BPN)YQ+kWDKbVNJoS'heX6QSJO'H%W49su0Xp,28nrk6M>JT$)O\0ra4Kg]3)%kKI!M,o=]"6i>;tS\=n70b4kX.=
%Gr(qNB_mR;j2<_A%jKXX,FST#7*K&&I-bJJWNsH7qfp#ks.sU@@t6O4q2P]&%r.@529bPp7VLs#0nds4L3k-n.'/?"i2<_npfOOG
%`sMYqHiK`s\Ht[3">eo#RRGXNJ@P74o4NUt5oBCi97Q*i200XtcG@F6:kj,Ba:qc,J^BDR7o"g>/D0_k"L6Jt<1!1hYo5ST2:h!S
%V65%)6F',U?f`,II7!>2[RG&P?iKVe5P&`9g0Wj<9oht4W!7?@pZC+-&@]0N:u&BRn^]/6jIC3^<Eg`sZ6bc9OdiF77pO6D3]lJB
%'eD<&<ST+oqFs11QbK0ep(n3!@^9l81pEbZ=@bTsE1^D\YIt@nQ-5?Aqre8PQmU.U25Aa17h*LXl/\6@(K$%%)qV@EW`'l2[m)g5
%WO/Y<\?RCI,uJ5AHQ9/Lc?ObAkY&bXO"X.Xd,>\IE_sBoX\fm:O1@u+<\2G2&LFg+RY%+EhetZV<G;kbfqeTmW[<7*^I1qQ\(t)b
%!8M$55YDl]XlLBJo*,0@noZ3Ng=sIZl1[hk&U)">7/jL!MjB%uW<@M6&7V:I5oQ%fKFT^fXaugO_,W+u[\72[A3[`pe5rgNJg;Qi
%]D8WDN7=G!'9$3cC62=\aV?6D-!SsF%io8YW_GPZ)6N.2>W*X!0M.fpqkdtg>J@cIp7G]BIM3HQ@c`^,`t2afHTpIcQZ!F(ftA*R
%W6I"[QXr0t]'.:P_ZoZo0'`')2nQ1e<"]Q91h$[TJUqd4$`DTPqY>F8XY),WFLMA-8?FVEcsn.1+%c@.(Qa5je8)3O-E,eX1Q'p+
%2D29-<qdMMgfBqf>*iZ,ZBM*8T,/'ViR:dk/7$"]@QH^:<D:MsTdC=d?#uCp7o.mO>O-u;5Q;Mo[MF]t?3oFnARH^=ab*oZ"rc<!
%WuV!(6)=iu7R'I(lSn<YR',((W9[np(?j5L<0d#fiL//#7E@]?kjEZspOB,jiB4%ZjRqh_'s\36I\O+]Wga3r9_eEbpR>rnW#ZV-
%4tSIr8YPJi\iJ.11=1ZM#+VXeE,tFEN2mtL:gdL%ongh&(Yc8OK'o,oZf3`r)f/s[GQOR-b:A$<!S7uahW;pG;&a("r:.Hn0SJuC
%-(ju%s'%-%$"jIfHm7Q:60&"E8k#^QjlD+@>1Wj'ro&Rl=,B8SM\hP$gT:Cmm=hX;g4@q(E[*I\dH!(e7C7DpnY!$B=[P?hF/%+;
%a6h*RGRS0W/M*=Mha6HcE<?%N="bhIIn3kZH6LE!iRoS:9S>Gmb82N)17XGN('jA$06O$#)kGV4Z0L9_CI$TUMVZCL8>0%m\segQ
%EDaW4j*Z9lL3U7*5o.FK\i:B)4Wa5+qYj+KN0,F`GR"e/A:^=9B)P=ZLDP_T7I4VnWU9>Q0SlaLLKfk2KK%jU=_:8VrdC8,X_.+G
%e.Zh9$U(r9VqAMScjF*ipIfKTIX;[anL`A_,iUgR2*Kj)gmRce/nF2cK(dCZde?/`p#-k=d\@^EHt.3M`aThE'T^Jr9:qq+Gi4]8
%fbZjci]DQ8ajba)O#Q\+\IJDqMj@W-Cd)Q)m)V)W0,e[dMC0IoAlE<ga<1?-`XR\jd9/I52*8;(lo\?La*9er"5&h'R@Y_S-S#F,
%;U6h>1S%n(?23_M>B)kn9WFOn)d.ZDUn]VrMZ)p[I(:]La+*qI1r:#cZr2uaMS"eme0V?=[eb%1)lL?/qFi4#iXWTL'=p2Z?`7hO
%Y'G:ZT!*'B&%k#U[K0^AIAN7>h0>&Ul"j,q<oJm+.?8%4]s>ITqUbaX>g<>^<T-KPBB<go!D_.]A#"+@X94p([D@eb5>gB1Mdo][
%F%tl4&:='U2N@-6F)$V+(X;71dWV7;9\bI]P\OUs<*<Fh4OX]:lN@)lZK__4SkpTQ"AV3^7i=9m*^dOc#A*bt;%g*(@p7a*"DZ(#
%2rtF"1k@6"gXE,]HG%H'C,=BT+&T0=M7T:_oA;1=V5G++8eSApHN5SE>dCIQ<P=,J%Q0PHXi6\aj4oiq_Y_Q\Ys-1FE\MYpB15r!
%JUY+pdeE/Ll`4/9/2mA;V15,GG[kR07LHdr$JF=!jG\NC:S65Jf5uE=[R^UP#B?!mGln^^/4b5@/Bp*2.MF6YO$q(*q!"A,R?U..
%L4&t',0;9U?\G`O]sQ[#9Jn[U2ZK(4"ri$_(0unkEC<Z%+5Uq1jZSiK\<r3n$9A"cj@^Qb/0hP1.@@j8@is2/K)PLb8r+qZpTeY!
%B/^jg[tkK"S0e99lNeK:eXlG5Ws;_IZ`EcZ`&TBYF\A5b9MU5J0XR[ThM<CTI\[.RX?<1N1aC6^r)XVGSWA1q6\"kkUQ?Ad*lmk3
%;lQg:5JVuaFqo@VOHeK^j=^%iFZQhm04As$5FJ-dIADdVXHr^=>ZLFr.[%TReCUJWK?nTs\#Y`*#H<aG]2&SY=sNW[Z[jM^q6[E6
%VQ^W#\5h(]_Ddog^lX/U='VQ6[AHC;/UN.5[k6;?VsU-^5t39:PO//^#rE9W>28R8:%0M;0?&0nLQi7sLJKL_n\bJq_nKE2RR)kT
%@!ol<'ZuHfPMZVE#l=\O;SU7aHp>oP+R6@CqL1p]A,'%:R&#N[s1$%$]A)Fjgg[!I(U/ICTN<FTo7:m[CbsSno%pO@]@)qqiN7D1
%^-#+e[GgBXk(dZo#ni>@h5lDuU6O+u**mCJn`]NWCbtFu`u4I)7Odd)5e1tuf:hNQ3_nLf'R<X7@is2m+jBb%@(=G09+r&WBb0"V
%7O<::M6LUmM!(j8,-gj0O&^CihuRT4cHWjm1W+\#0ElqL*NPc`T8!\.id&@23t(H9['8%Zk&EqKbA(ClP[I^IFo^!pil.=rUM<OU
%[&n%4">s5*TGKKS:t^KDXkVW2q>/ko*JqRsi)-lph4o8KWXD6`1]7mL=L$03YGC+lKidR#/jDR\Cl`>,rEALEbZQ*(N]TARRf-&T
%]TFUZJlKeC^P[.EXk(LXf7O#5WE<dF8G`'C\keT#krg``*;:Ta2D>B.6&Q?Z-V?hVg`natM';oPnZ:M=IsPf]-1.Ce:Wn98>UPW\
%T?\*=YP(r,'1^W#_mGhK^2Z=5H<o.Q*!97XX8DM?/!\9:FLY$=<rtK>dPEaX%,[*Gkk2L4)m,P2h=blVeR$H02F1JC8shJD<7tjX
%_utU$Pn3!`/Fgg'-sMS\Tj&Vl*M&EdMS>85/nd@EID;?q7kcl/?;#b"Yfie]\^i?;-mZq:4,S#NLLd%4@bP<&0iF@LA,UX-p/03J
%kM253G&8H(FP<GL<Suc[g3/BXr--hO$Fnj+G.<^b/FLuASuA6i"#]_V\XLYQnd%,LCDut=g#*;:IOe.E-"6eY)4bM)VRM&Q?7SY?
%.WK78/F/][BL8K^Tk+YqbTsp(]eMk.Q`)]$N@jHD!'km"r,H7MCBrDVduC0,?:ded4I5"n/[=!\mCOAJiVZ.f8Y`g;pp:[B!o\L&
%e?+YQ*pdCg8TO&9V_uL/O(OndVW2';^LNIRQcPs=BQG%US&'no*DOjnj=]*3@Vq_Eh)XX3A[Ho&Sk\V;B)?Ro(oH]^Q(:oMHXMZI
%Io]c0?B1-FLFUX%i@ZJ=\p<0+]!uY0QSLR<:$"MS.3pPFk)-<*GcaZs#IMP9djW$CGOo>s59OT:[Jm%-0Z<16T8nJDVQSl`7Me]t
%]JEb-p&Z?">Ti%Xa"`dBII(-UgF1`K9=h_-B-r9QO,_uOE5l7MS:Ng_?Qp->Uju'l+N8?%>-t(BSlg*629X@Nf7qtN83Q<,EMh_=
%Ybr56,SnL.]6Sm._baX)Zh^%1WG[-Y[7-YY,ga;QP5(TlOg[-WiY'#p^1,`bI4'\3W%>`EG#<'^p6h)*`b8/^Zls,Oa^adHl^Lp/
%ao4+(,K\G>8$)O\7pRU.Ce)eQO"S6/)OY68/]4p'[/!Fb(8R8p/EO*1o`oVK<OJA@R!f>-d:lsh&$#L\T;[`2.HsjS*++(h,NG2[
%bY?f^d$V'sC1kY_DP.#Wh*Pr#Y.q3`UBM3=mEX-+&JtjEc<^t9cWZ438YoTl-`F.jQX#6nU6V7f3A'%+lf,AD(qZc!RkB'0pSPd]
%;q!PQ\'dXU!;[pfr27=,!=YN+s4PZ""'5)uot4214GmYkR2'g.="uNpWKKdD8*O@(I&;X(NK,B&(bN]HT89uf8pVORA9drH;&<cJ
%!,>KnI&6NT`\S>G`I-21gMIF^HZ5L+$T3n%<%p=49aubo2TP"p'l9lXPpbYH`\Wmdh-[,V[pETm-15T+o7s%8oTr.BHTHK(Bu5QX
%;gtU,I+t:(b@WF'RHjP<Qg:A)k0Ta"AF<-@_E+8LYi&0#da*c["@h5R$n#N;+:o&m3N^Ol"A1#,=!G.9?XC0R$L&!WQ_-G?+TqJO
%L9sE+bgFTtCjW=G'i`*9Q_Uca[H'c'02MP7kBbrI&L@9%OTDcC/C42HR4m`7r>t.hjgdVI9_U,W*\B(;jPGs94"L]1dWUbYl-3A1
%CmP$cJ2CS6.JQZkg7@9-XeoBf2;7.H%atbr<;YO,K?,=BPT\Kg4gdA@k/ZEpBY%r"e+@\W1H!3m5U'1nR*.eAj-a#7(#hUmf^+sJ
%&rP#bMV=>%+0`3Hn_6S`S>`E_nOfq&>rF&[9'HNp#aQa=/Q<6cL^+Z!F[HUg3pQD.ngTB^er-$La9T'P8CQM0!a'YOeSEM(^;5,-
%FbLB@55-fIKq`5q@UHZ:PmtjUK[QBdL>ecuM88Eo<Ik/M`7F#'Lm78!g4As2E?6l4!=';hC3MM.((@L:m?&q%PDhC"He8_..*P-_
%:<[%QUtgrq'*T<3kF7J-99>.;2[dC4$M\%5gaI^>lK^=:5>RckeooF8da$2VbnEu(:d)(CEc_@BRQCFj4$ko-PLb4Ofq#o*J;a$]
%;h!m$"P<-l$u57_qPOJDYC?LXBnQC[D0r.lib%6fea5\P-u[^m4Oc=RmhE9EqGuRXoS4%arLFl$9](^IoQR=j$f*J&1]=E#?0MlR
%mRf]C\nCS7lE6cT;!Y:VLLPI=_aCiDdLYI-b5I*AGGRM<]^$>YW-DD?6cju[7a8Q,+,\ngH)l6-Ek/:0)g1V;ljDXnk'!$YmA:]u
%k<-8hqL.!Dnr;r/]Q`+?k3pg7k<6'b^irTS"jHnX)L1)#%n5t[J#ItFlZtaun'o1GHe,t2V\a(F:,.EJ=#FOT?0.0Qn'o6fqGn0$
%^JPTHj?lKqnuJ4(V*>[5kJqC=dHIdVi\Q"`Mc]aB@>+VTA\?G58gEseC*Vg:MPH0FX#et4^+,3;WHZl_gHp*!a>[?"(NAr^5&Ka&
%8Xo4-.V[t5as;UXX-5b,[nKQq!+IYAbE=F:Ds'q!Si(H*Bp:`)VN1!h3csC\QV_]tCO)VR+K0NWiUMT"K2l9X[<om7km92MnTp<2
%2*X4JV^JDEFZr`TOY=bA'fBpj$)9KX_LkGs^Y8S6'/grH4Cq[DXecQs.+G?E-rd$<M&O!hnM6Ye]"N6dX9+P!7S)i+2#EoZLu:CO
%=plD9\g5S*QOn:@-J4_#R^E>^;nW4oq/IgfD!KJr!DiCD_b:,6Fs6r_86&9;8BE4+%9T*TJU-QKVb5C2p?'JK0f4CGeDUJ-XX'N?
%Ct2ls\BpbWPg6!FQJD3AgR"F%\?:&4ie':$4]5/;%%F<8$c/JCGY23]b5YC=jCY3aX%ndD$-q'X4SI"sK_;;t[i?>p'"bn(.+E_)
%c"mp!>+2TpA1FDh!%!3h6Q46an):M([?i.B.1PTHIET"^;\!>a?V)^8,d0#SOtf^mbLWiXr*Bks],73lk$7+sbLAHKbfhn[)SH8<
%Eb)HPP(^&8K4;Ap%]Ar8CRJ]'*aHSZhJ6ihmSVU_2Nj)<7U"MBGp3^#3T!2nWfWpVm=(S2L<J\l1/6ID)mcZ-Z?2)"1CjFn%FnQn
%i@R3qp1%r4kWUoD?qdhi7^X83d>JKBgmuMihe@n:cg!=.ass>H-YknH4V,ja;Y@mo6DV>L?$oUDDCRmZd<:Fg_t8seI'YdG(/O8V
%!,'`U7IAp^]*sm($AZVK*eYLD*fOo^Knd:_q)=c60:$55.LHtnA,A7:D-;ZY<k/cFU_'(%6\tp^;JSAEp.R'?'GiI>8T\RPf2eM\
%nCF"NaONdP)mEs^np'M!-Tqe0VZ8@Vf?.sY.>a&h7<3S/dV&2qe<t5)o$3.@/&Cc8YK0:eTMiO%N$N"9.t9BBnJFKIia_i!#RXF0
%"miRZVNM8m`7OG'hrmrpV67eX[Se]ng$lMjVk,G\dJpo1G,-^uXA3nSGKZ[%U_<M1=@]T$8<cu9A*eh/K;[#_a,poRa5a!a7'6"P
%q9pa*d7/LWJ=PjY0/KF]@&Hsg=@,ccVrDX7S]VI$LZu%)4=C-5&FSF80:*U.GUgG2/'/$;m'3$P."830O8Ui8j6r>D]BIEe=8)83
%O:#=&=LG<Na(FThnIc_XRT\GMRVFXVWf!,-SlRfX-Bp,p,tgQOUPtn9^o'uS]J@$]YEAP\XWtQH0brG<,M69`/>#ZdYJ\p5_]mUD
%.rm_CW)NqO#.JVUTJJ$WGiZ_ZC?+<U+6U[%CFX[[Y;/%sDr)QaA#OjHVh*<65+S8d4e^uUQR*E%EG@:j5&Xq9\6LG,c+?;P0*fTu
%[=+P]%8l2um(28Mmh9<28R3f\H'B]#2I.bgbl)cs`]?t6[#`/XC+;bP0a;nDl*g^+L8&]uA^@Bn9Vh)84INX$@F@WW.BSFJLM`4f
%WV<b@.b,Ug([oWoDRsJrqWOM#SqU=E6K$j+hM+$Y"`\6?[ZX^TI@gu1i)H]:Ia2tucL;s!lR(P"+&n>Hc;/66a2Z;<0o*g>ao6^%
%%CK?E][$Z-<7^1dh5L<oSkjFs"j(3k?jHF*eN2#]hEoAqCobBll2EbO1(KS2F-!.t6#8O3a,((*Y;:Fi(LGNQ0))r8cEcX'+D$SR
%lP9Sg`LAj?Vti*pT[2b2s'>j@fk<f7r$QKokRdZO*CCBDPRP&c,Yp(bbb\Zl92#%M9"O,VCB4S]V;-20#_Fb="S]8>+?lf:CA,-V
%hCN/cW")b,13.jgc+Iti#F3F@hb!]b_pHQPYJlLZg<SaMKSe&O3V;\:#VbT;gm#$!_[imq+ZUF8S9L':Oq&P2?j>D1[Pn!gX!?;-
%Z$<0sF^>j[Xi/&))ID!%YmJ-NW!Qg$4('Ac[?QYsT_LaM]!gGe5<Y@Fdd*)MDd/Z=g=2:Ss)r@kPpcqIY*!>cFQk-Z!QGW$e]CY\
%K1BmsPPUO+"f7=mYLGd<2S^rt6_uRupQlcW\]7"FJE3V,@Yo8oi]O%Y4-`?k2\R=71s93.e.O].a+K7W:&UIugpU78@e6F'&i4g-
%nKp[C)>Tf3U-sF(1FJ[g:ROUrimt^;kE-l.`]iQ;)lN#CrikIJ9PLkNoA\,R%FgNbei^R@Y!1ol0:$q\[$s6B5p+8t\Y.(TBW.Hm
%/RYU?q//F,[Z)#%J6u0d'RSXfH"V2%B!nRc,MS<nks$31F*ND^i1iFQqU"6OenSiQVQIi1[.cJ9=K8:tWmTC`/5h/d$YR$-q@u^9
%r/&sMWGB9F.b-+8Jq0INNQo@[Pj_U&b;IC76D&L&Ou$_5oId+get@GFeL8p"&,[2HoXpf^L@.Hif4\C!96Dn-O8BqZ4KNA[bq<"m
%C<KEdkJ->kB8X*nA:;K\[S2bXUbDT9f%7F355VR!L6A9HJtnXugTnCI+0urVcn_AW>>QT[B03,Z4jL@7:&Q&%rq+9Ahj&2+EQ#[E
%/!,24W6a_C(d-Laa9-s4[$/UF'pDJAU*mL[WB$egSQiCg_G-AsKm4.ZeciQB9PULb'r6!FoIXCrM,#<"7`HMHTJlUW:63:N(,GOB
%]j=%i=i't;OeF4QS>Ur61+hC,caRBLa.6M*<Qi4*(K\4[f1(T4g:7HR1j/^Tc)*4YGOZmC[E*?Un7tbq@HaR>il`lKPaM.l5H*kN
%D*QfOM]cr&bA/?-N4?prmp"DME5#,S=<pZgITkRrcC,E'g\^Yhlq1r;29S/!8*+14_R[^lf=o33M$BMWiHq9lRZ3C*EL@/NS'ZVf
%HAE[-i+h@a4$oZUSTm!oK!N+d?7&V_Is^;;["e8',,t-e'QI(E_:oin&ABERn#b!ns2\ME7qOmqlq0etf6Ud!'+(SHQT8BNA`@Vk
%4YCe!f#rE>`:DX)dg)n/c@3:$&^A8.Y$XJ84/XuDka^oEpWbi5@HRK4Zaeo+;4#eaI@F!RUAcNL,NNc8%<.k:pM.R\Gc">0lA9mA
%ci!?8AV'mXcSr/E#m)Eg],LDT%54%f.b8t-5m?r0HX%$Jn_oilWI"`('/a!.*n4omK8NH?2e4/S1RqXZFW`Q8`'Tn,4$k\SE[gca
%8,]"?;gY=I$SS3$W9]r43U?UD:$`O-Bm4]\h:.JACd6^9j.9uPnm5au2]E\>O<pX(7jns$6R48pB%s)lOaphpgZ\7O7Ha'[p,`4T
%._Q7(pc9bGh/hr\r6!T4D?el52?d7q6Rks0H][`]MS\kR6Yb+eqlHY\Dt?AEFDrLIJ!sOST.$]Gg8mDMR1bbUUX32r'mkBW)V_4f
%SbqHI!DB#^5c&qs(L@_]GikgnlHALE<2*&fU#A7g)K7>O4=ttn&9uDh?F<,6_T,ECR#K^?XI#[qC4(t8<GdMP2]ZmD0,2qtPmY_!
%4(H3KjRK-[>6rJ.VYu1GYJ&5<'UVdeGJ.-PFEFPKQE1($?;=!cJ&>W$e3OmP83&_&onJR.5q39r0)W)].B/,_`i#@Khm9ZG`CWWo
%\umCu]QsYgrQ[127r@+N7)fb5@^$2]PqKJ#'Vjq5=b=*&U-/bMoeY-6GEH'b^+QG`4d55Ap7W"+7`RPQXZP%Ul*[(t^:,;7HloIg
%E*f/Kd=lEucdQ0qdBh#J#@Ec+7etQ%HYU7H/o6Q&h!](9lOb`:G[<8)Rr!rTncGH>O!WLa@K!Dp>!WpV8pkRcNB?nK1ZkE&<m@`?
%k-U`t$m5V[WW=aIgBqh!+^U.U=nH*Xe'>d4oTCj%^FTjQ_]o`(]Jb^P!rE99LqJeV6<bKZWDa7ZcM0nSnkA%bQF>EC5qQU#<qD)8
%$b)a8lF6in;ZAds[-5JVR`"&'[dg`BeO\D\Hum77^sB[:-rTZRA:hXP;LDd[!n+M]p6'\Aop]H?p!&S-'!'qf7RaD)noXH"&aINi
%h(8`ZDDf#0WDPPk.L%j88J#`)X[B"K@[q%EL:I-#&%ON]a&J7`[-.r:`'kl?[i0V8@B'Om4=EA26m[]!745(IR"We^d:AFi4]FYf
%'5(S(Os\lnF"FpN;UmXE-E6OJO53d&;<Q!qE=)9aI!P1lh]40+oR6&*Rf:EU(:;CUrB/>*0^M!si!S1"7GB38/Q&*[]!.QDNdd31
%m'RrV_/kM-MNJ7oCrQ+r&s&#`O58OjLt(7P&sI!f'=/g`4*A;+?'$5[/X(lSisTbm$QTVC-=j9)VmYUTG8DT:U9MqYAjFNAG;j+_
%M:GHpB1$sHh6PmXEr`i%bZ\FD\g:UdDNkX3GA1%%R5e='KgZlbEK#<Beb\J,\@%#C09naPmLS/]LHDTjMXNQU8K#\"rbf^"e.Yo>
%=BGCYk++PH[0r14ro+J]Vq"TdaF:YN%/5r=q9p42(':unVTh\hIUA)uO?T2?d`/G_.++XJeZ_dX<88C8lGiN,TQ<!jPWX.M&We'O
%^Lh_7dk_^BYo\m/K;Cf\]Y<jK[1=a4-ngW]Vtp2cZFkaAaW<?Z1:j,qoXu%n4Cr8iANTW!":s*72c0"Q"5jV!Q^k!IM4a_pUmf"-
%TXVJd<XFn3ooLc2AaMch.Vku03l%u!J7?UMhOgcT(3kb0b;UDl].:;UlDDVO"u]q:VV6]q)+(^-\YN:p9cTQ8jnhZ)lkSdrWoi=B
%,]ZVk!!qKrZIPqnd^]UMQnpp'YmI-X4&;6dB,6T4ci$.@Q>uYb5(>p?HS\p*ZQ/o;\LhR<]+F@@`l8W4demk<C@#Z@U<VqH>SK/S
%Z9TN++<a6Q+lsr&jA?^>B<-Vm1lM%i(cJZ*T]]PmOQ%hjY`V(KJqS&0=BX-&`&Np8C\Rh-;mC5'L[3eQh&RjgqNg'S1VYgnCPB=U
%9%FB7*d0>?IG:Y/SN4pmH+rC8l?rL;QQ_\PHs$+651=hP[;6jK24H>!0C1$93rYYP+6GT]LC$h+joIC-^.,$Z(#"#H1?&UK9V6<+
%HSX0mDrkSMM*AB1i+$iTm5'5r2RA#5=A[.ZafBfRcaVZeYAga/eRuQkm7e]&n/q]*ViSUmh1&\"s4ndsoS;=Ps+c+'J,\rXs8JYi
%gRnJc^\l^H\i>5W2[Job(PWAHrVdVfh%PSaP>g7or'"\3E/>d4"NHbWokod9a9%nWX*P6iX8]jXPY^jQX[rbf:*qH&[N:Z+Yp[!5
%o<r^5')ErPP<4!(%6&B$mThJ3#8XfYf,eTp]I[K,THnkFP=.!#2915ff+`fJ<RL<9Ft50c?U*#cpWV3[q_n\ZbAj/!8C,]<er8Q6
%n5-_*Y7Rh"$]daY==YRXN7"n9fs=[qN9!&ZkqspR_82fL4e5fJpWMGrn2r/>oD2%NO)J#c$CXE'S_F0&BCB`bVNk$JX\Dri+FKJ\
%>0RJM:&nVN0G!;.4kH(m6hQ._IPaq2@rV-omXq@+BP.loj[KI%R]Z/kg4$_h<3GmC?/BZ2kU"U.894Z'cfBXbl&]<n3QiUD3#470
%eJX+H3%?rF&a)aEo'Zi3l9-849?*5UAI03n('@u7B*oD@i?`)s2nW!ipDFdE*5#*5iT?>&Qa^<;Mqb+Eo0q=G]OMh?+/7tBkZh2F
%p,B>VmMj];roRh,s.?t,_1>%YjAi>rEj,t7SiIRT@b.GX,$P*pm`c@b#e1H1rG'h/5>1]&*)M5%d:?gQ/s]?#<-3oXBJl#n'@e?G
%>T]oCYaoVO"M9kRal7EXR&[dG82DWA<(Wu$QX!aXP%m:`]?DNaX:]FZ1"0I/TV+c;A7FJrffE"u$Jj'b$[GS8*,;$dF_>.T%NA&!
%Dfp0XL',r6fER3I(aGha%T%^2)J!,1J`s=!&bt01&#8)U&T&:4R6>$8R^9iZ5g<n":l0]o"%dF53&)>8:m[qcV!49CO[F$*\s5p6
%S[#"<dJ]!2B[OV0iogRY,r#'ib\2bMc%SXM0L1C:Kp:CXX3B<H?"CP4E[L)Z&Z*D-mG\548u0kDdR6B:eBr#kBjMca%Vd&^,H;Vk
%f+15DXrp2KHmAL$dekToAr?XS/;E0e,Cq_)A8)-=Br;3,PH=^>4\p]K.B'C9(5#W8j36%3JPoe55d.T_1PLLPp*U)\22%0U,9PI#
%`k#7pSsq,qeI_A\BQ;<\FIH!>&p'RAS-mEXWH'#^jbQfDMG]6YdQoEb_hFQkKeQ-6'>PE%_JGHNn4=<fk2MR.:0Z?)<1nu",XK8X
%Bn/@jhBi:_S[-32Z)+H9]ERsakka8B,T93:CH'8/i#NMpW\p$A[.miQ(s.ks;K3ihlt&_i)kT+OTcRiSm#PkZ#FqD7c&\2ZZ#8!7
%<dL_dB<DNcT(U9u9"OkTlBb\FU9mcgCDm&PbnGhRC(6J(D]M20Cs'a6WHKMGirq%%0;e9/s/lpMcs:7C``S.qd"kZG6\R$Ep-[2k
%['tohbU$8j4qfRpMns2@IgOeHe]6[mQg]HFiQ>;S;5W@BV=[7i43\4l'H4\;&0f\m"0J^s&k9(uVm(RXUD.XY,'T)i(9!6P#.:rp
%M["PWP,&dl7E=%Ab?irWD%lEWAF`H3l(->)83JC7[/MP[*+Sl5IcQDm"VfoqIr?pVhE+E&o3flUJ1jJc0hcdfQ_b.%M^Ak@D!Prj
%\jQpP97(09[8*q+T=u)>8J"XYkG.8og%845ae"7p[6*\98FO-,]Qk#%YQ5m^'DW%_$WKKu"e3[LPYrpIqOqmh73)aM5M[Kq^U@XN
%)22"39MN80_q?J<6[`+(KrG&abklafC=XYkqlmWn@?E#2i*gHe3P$aPBca`iY1`sJ<+I_n[H_'*Y&c!a5TbHQf_=*Q1u,raUu%#/
%],P?kXR5Ac*Qob<@pT!*!nF;6_0n1'7b9)<&_B/m=[OZC3tSj#>*B4b=GheHGqMV*Eh[g2+;5]`fRcQnDl?tb3,_+m'U%1j<E21^
%.729o95EHFR>X-TRp_U-:h^/uW8`!U8F!6c(5^&mVH5&C@Sn/\5-A&?BOf6RBoi]@m]5bf3[q35`CpD!5^Jo6od)*<8P1sGK=hB"
%4\\hnJ_!;)Vq/(#WQ%Qq%-`Pc3ZrRAf[1>9d=O$6DHh^:#n5'>UT@I&s&k_DjCXTfK6EW;/k2ZK&k&'&4`?Nrf!9G7?q2=OVlrr9
%>oIarASfM,Jp)n)?R#-E+-HP*S_CI++SJfRE00oM;R^G"2@Vf3Nj1\Y)9jtinX84_6R7,!qd_dfO,"3[0Fi\4mSg-#0?oWnk9Nk/
%>0>X)Z&\e-/t7m*a@A\Ze',Wo3$hI*m:"rS!I.cK,MSqrkddp[$)CC3hDZKhU\b.hBmP\&8(0AaZLp3=[7du(C-0'_@1shjCM4QB
%aZt6gZ\:!aYXD'IanE=d&"]G=M\O)AH;?@.b,O<#Dl&prOb$%S7QV`nf2\!Y=K:MF5k%R)O]TfpRE-?.=AWY`FK$Tq<b<RNZ]UZ*
%4N=CC'I#$=IO6?`;/`s>V1+SM`5m@Jq]J`QC3ZLqh'60!3DYp\,@PGNIhJ%?,SMP.>Yd`/RZbN]&fA0nS?ct:6A\80OI(U/O7CXL
%;)SJ!DH9,tmUTq'OS,81<8!<$l&Y[#e>DVQpNHZ>6.R&KiDb#>Lh^8uWM1Fc'#oNFb\8"lU_[6[_XC,gI8O]TeW\Z-qYj6LE02:W
%WL2jM.R*6Fhs*S[;Q#NahllYj9E9N3q>tla,]I-9Z^Us#d?#VMAOkt8PX,=AYsHZ>8=BZsS+7=?E[?ND:mr\MFHbp49GS:a,#dlC
%HbT_MNY[,H,b7'o4W:;]CW[7U@#4,gc/Zha&]"k865\2GA_#)H]o`UmC2Z[6kWqE4^#?Of[l\O2oW1T`qm3[1QFZ9hZ.EfVkh*De
%lLB-M2E/lspc9/#5j?>i"GpiL4a=.<bnU=]r!\gr'A_fmfes#S&MG2T,l?M56I5m<aPoH-=[Q72Z9MkE<Vqr8j.I;>!huKqdA#+)
%BkZnIgA45'rAKdU<FW;rlp&X<N4lU0<u7,R=Gq"sJb1l-hdRLTgtO%'e;cUWkoHKNajj)<8]mC?6E=^VFL=emdLOe6"KVK@\X>@X
%oFUdCn06.`cc/ZoWfG!>;M,U\H0PC.b?-MtCMnBniG1S2(jp"knD'sBWnnpKN[YUO%'R_---;4W.XZ:'AW.sI,D,r[ga/3,e5_J5
%-mKR`lQ8M$ER(h#68VU..]j0F&S!SGM=p3bXt&nk&(@nm;mYDIR[;MP_tD?s?]7]i^1E?LFJVa.[bK8=/<c6hOoX3!fTuo.Bl$X0
%M#7uY\"l^WSc+[2plqYPi6gjSZ_-)_>*k#EEE8h?)3TpK[`AJI3P,Nd'.nc?jtGJmqj.lT<i(6!_8Xo_'Lm%)3*R&K,jCFsM%8$W
%l9[DPQ^BCS/\?AA#9(KnIKHL0%.4[pA2A8!Z_a]NGb2K;90"N2L3\`q@lNHtCJlms#m8EbJg3a`'*k=2]P>)T:W3lkcn:>LQp#bN
%<S*DT%ELI]kZ2\p!*u42^Gb:^?$63k8Wn10<gZU&p*!M-e6XQPE11(_np5cm^/HrMV-/WhA]6R7=PhqR)MM%j+!sN;d#8E.0$@_F
%q*EYBb2n/jVSqJsN;R[#?rkrVdcteXZmX,#]/:ue[jn)^US+OFngg0r-l,tu`E$KNA<4W7)cV876a[s*Ako1T@j'?:&kCaf9N9u=
%63`k46t3Mf7$W)Q]+cl0kSKFVaC>gf%'V?hZ;L>:QqbpD$f7;4AGYCCbn;'1'I$A>j,:5jm5N>?KgU6p(Vao[\Bku7r:JEsSA=u^
%)S/cZM$27d9CO$XUrsl`UJndWV?[*o-CYg\$UOk>+*eut+u21npdJ/3_mG9.BIl;(`-6g"U^AC+o4_L4#G[gr=VY+@mlZ1cYV`n,
%;$OQe\T)+Y2cIrFL>3q[RY=m1Yl`LdlNlcuVl^f_Fcn3q<L"e-;KmULhhI.VRaZropRo5)1iiPV;?s=?UC@Y"^SI"oSR_>VF.7aY
%IWadTG:HA027WiBTSfnJ=_A')C+(;hA=@!48RC\bNCca#b=^6'XH`ti+?)it$6"W[UYc+VcZh;3OtKa!*(m2bPjmgnA;E$>[6+Oi
%5($@%^i3OGOK+a[5t]\J52BI._'"16PiUte.b%mL=nq8]N)S3UQ:_6j:=H@Zeu*j-/(D!SR@hm)KT]cAB;1J^Krh#;`^":E(Q*g*
%eOb)kMg++m&a_KUGu6._.VS%F8Di4&H8\9@&tZe9P%;2rI7<'s_mG/THFF<Hon),BIs>n?<-_qqNC+/r'5/qseX)dkWCuk@<4G;a
%V"[.uJ2USPA[56W]4OjAeNV_%#UIsr:I!TZ\lr>"*1hVf4$l3gb#EnGU*nhb6_4Ss">-BPT+@k-3D$)k.OA"dL@)E?R#:C5H**.g
%_PlV:f6`-:LrrI_f`tlWX71/0?FMFAW3R08eNVc]^e>K5P3aegTobt<r?[FYY=.i5@Bmj`&/8:m0N3'Y;3'Q9b8.C,qt,>08W@Ao
%MmqAF?W(MtBZRP,2V84:)\Q&D;4TV'.EUKZjK\I/:duYYW>oAi2)T)>NsM:YG*aH]?F@I3lIr3U7aoJ72LSFVJs@nX@,ReWs)9kc
%EM:1VYQKOkKlXOkD44'J"j9G4LMn:$-#[fIb99^5_%C"N(fc`rk=uP<^("HX@E4Y6`jPisW9]=]GA2nI6U8_7V<X4t^dXeDY#J%\
%iZsmg_#ft@,7el98#oh+*p[9K4c"M^s&J=^=LNH2"qR42\DQXspd7UtVMFn"V&9BiDn]IR_M5UAUNS(AH!9q4;OY/:;[t3hSl([[
%[mHO*)kLs!n->kE&.bAXd:K/s;peiS*RbPM\q,1^EP<S<.S?AqC+HNPd?2I%_[oW'TjJ&Zp4rtlI8jun.j$&OJZBO;O4W(EZgi!_
%P%\r&#2RK`=E>W#HWCh+h,@h8T!r+-$.d4-Z55Q'Wq'`*[,a[I*>9EU29M[&9SG(URJjHU:O;E4eu&AL><E<'<ph^[Y@`9DNe2[$
%O6lWAGja"ehlU/hW@$q'Wu'CpYCs[Fn_,sFPr8WpFRe<Be>]6bQE2Okj3\Rn5(%q2;HRD2!s%N]@[PHsS)O2-AlWWUeu.c>^8It3
%.4J%6eKh1r?5b@"Zm@f"ZKREuU$[aI7#^Inel6NG9nm.sl*Zb0.ZtsP898tmUrL4t8","p5oNX%OT!n$\iI[tlTb\V-]#o+dk]=)
%d;%lR"cS<6-04qPo$ZrQ,<D0*%&N0`Hj!P.OBU7^iuk!q#a.M>,)&5W*]psT=&gm=GJd)s@`#r&2QY7@e"n@?.gE1"g'1.Y;P(Ah
%EKkHO&J[f'==_R3I>F;fbO(i5Wnl:KnFDZ7i,N`;.<Rqr<80@A0WM]5KE\gjfC^i`/CPdX:K<[Q<["9]3rBa7hWUI2dB3O1J=[I1
%<jAK[^$:%3%@Ep&IG2b811cH?mpiD@&Y!+ccDT1#P6;SoeU%UI=WZNY2\2]t]h/Mj0nGQjC&[q1]VnVpT[[48BFW5/i[!IG$n!qG
%c=E,C$UCL^Sn;%?'@lTQ5MTnRa?-$T175A.7^D4\i3i.U-VIKAp<)l6Iu>=L(Tq?8&Z1mP1Ntdc5`)*!FGo/.?lhg^)CttiTe'*g
%MT$'[oma$b5:^b6bT]P;q09ln=\N3I=OB)R_q=3#fMF#cUX?;?\.4aSm;K+uJ3[\jZp7Z_a)+Gq>u&q34Sb_)LG(go_6+Cm$?2E[
%P4Vm>:(=-AY*,LF12`Eu>V&a)CI]hPj>lIj=;k[*In8b,+OX.!+9e2<`T2J0#Dl15QY!,3a"I-NFCp6ea=`ZWKn:7VheI(r;l<cD
%LRkSYpi[M0G_R>@K7$OI6)a[rBe@DZ(u;RZAH@%e6rgH]VoVak&QA3ZWl=P04<?%ZgB5@Gl:>iVLO+&:Vg%mcdFd:,&aL>]#.<@:
%ICkMNQ:fZ$"\/%*N4GcXYY<%DW(!s9*@s:H&e8B3$'ib=Q=2Rd?+X5Go[.MYPH\:"'!k80<OlI-9,"[g#*PgM4\&3?EDf;;NtQ/Z
%+mceWNkc`YGL^^+=Xl@&:XQjL'Ngu#NHmG*3*:Ko'SPb@M0OP;<^L"fN(nTgeKdBgZK@c*`Q9.tf4F9A]dK4o7<_<]B.R$[A4;n3
%`2'%_COgp9YIand+QR.&hEBdY)]I6XQqdt1OFn82Q7^OTa_]"&$s?^VmCpV!4-XR1`pr)"A8.,kq&Wh;39:/u#L#0o'$J;t[%!_P
%l+D<%IcJN.%F_>-j][%ZZam?j#=1(3-7=`Td$pNadR?4%@a!/><*V"O/qYj_du_6^GQ(iH+7:=Y4*=aVo#UM/RCLq?g2aO$dVQGs
%8h<H.;#GQ!E-Br<V5QLFW>"hB:Xbt_cq]R8)=Fqn*KR"pD;7TX%2Q$56:gbs,t-/<<32de85Zj-WoeBtFBqhiHP<B(YaIVtifWl/
%i_/:*Gt1EgF:B$s#n*4M+[1'pa1EAU"9b\$cNkKs'"mNlMBepbi)K<^)/u(/K%(`e7TNK\<(D?R"&X4m<&l]*6S%+!rC",/oW1'8
%MG$KjHEtoeq9+B3eR58^5WsC3[^D+</ff:ofkf=Uo#,,ThQj:dh'I,YkC'g\Q+Ut2_S%bk<"]u(Sic%^()=:M...CpUl`CT!/5Ap
%::`36q\-@UV2f/`/0udFA)dKQB6J6":%]lf>(N26KU%jo2!"AP8oh-/g<ijU></?R/un8]56bf<"o!'fjqgk5\>C"97o;6okeE%5
%q9Vgh'U^rbVi#AU=$a5gF:pd%9\u(p:X5bN&gDo)+S^]0+%n*8\/Q,o1)Zj.Y(a62D9Hs=5##c)A>[]Xf2tO:*f_)`JX$LhgO1@b
%dn0A"[=p>4rJ.(S<fiiQg<DsPr0DVBqoantI_3XKXC+;YFrn^668X9;WoEZ,c6/0s;4Gb_QqU\?KX]?L*N"[#Pp2:V*3Q^^CXMg,
%b=EK_-lg[.H'WTsUt!D4&428_ll>(Nq_7;=ShAeP&",c2Fb+Xl)ruRV,:KQA4?bAcrc?ms(`C=cs03%;"7+6&dP+aH2=P?Gl6ZNb
%'c1^TRH5KO)b!?umYf(&B]9.3Q=T/e9*r.OR[j\?+bWJULOGZ*"%0C3X%Z=46mS+obObq)/3;")W"4S7=X';,(+DAB1NK``%03[,
%P'RH%Kl69;8m*[\;<m5QZ<s*ZBT!4lE6,b0iQ'arK<U@:ku/X[h>UoaFo2$QRri,'(42jWiP-9c.$]q8<e+ITqd+(t,"Q)X-8i%;
%,9\qT)+;_%O-IAJPg.oeI'c0LckOQMEm_43,[?+>63/qMY63jpj@<!#=Eu'ZT<b'E%uSS-J-;m`kmE(GF[W$i"N<W/r:&1&>[thC
%'m)..-B5p9?daa*l:S$RjJt]k]3TD9?0+l2Oe:=R=puMj;?Qn)J.\bV2RZbi*NBIKooam&.(#IXidstB\KI'"0O,n#+D>TC%oom-
%f+,bi$:[2OMNCFC"$2FQh&Sa)VFhd7TI;R1jj7ef8?qrVaBpDhE(^Zk=D`,P#5ls9ihJIr)l\psRoF7I=bG5%a'f94gYPrl%!uC'
%OYQ3dP?]QtCFVPnBnZQ[q0TplmeRh/.T*?Jrb'gn=@O\]Cgbdg:_0smC?I>VVXp0sXe`8Gj?&D3-*2YWr1I2%@'V!BDV%pP:O4FI
%.9lUHj'H+P'.^>G/FR_`VBb:KMtUl0;qd/8`sH-@P.cc%O2WmVTZZnY3i2=EgMS=CW1[B(J8\QUEQN>&@%pHQ2+D:LK$Q+cK`ne7
%8l9[N!@OfX7KU'[O.1lY%7t6>P)Y0,844]#E\EVaQL(i"'[,Vg,TUG/k\$21R+1VQI7QH*$km[3?1JF,;*&rbd\)+^W61Sp&.>Y=
%Gs#51fBdt6iZ[du)]=_4_`U03h6V"I.+5DNgNIJa*G_q@j,>::%n,ofRM^l.NOst.9ijkTNH-]Z^fEVG&9Tm7GUNn=RL5X;MP/<o
%Pp&s8<:4b-__5n**ifHh>1sG%UV\==G1Z6BC,RkJSskfi".)8_;^G6"X>7U#LihA"HZ=hS+NdXc?)3+YL_1Z#R2]euVb`gn1S]g7
%WD($J]Frq?R<+1R"k9PiF]cSq\F`8CV);pWZ2$seehk:EV"f7rKLH!N@)3AgKuhp]K`uE%1OJiNaJFScP@ACpm=Bk'Ui*UMKc1Lb
%%J!B\[$rL0l376"#prNF3NMo1nbd1JWI^iJJU#m#ZZn4Li9]BJl\`f-LiHklgOnk#C"BJVEJ[$5TbOWWot`-K0PrB0Z`ZQe`#o#i
%<JRUm>6h;F*3$?6M(=8ggOV@07pE7(Qso`qg$56ClCntFNQ\B0"*[dDS$kLE%@Y>!%41=VqOO3Gg!,K:hDj9j`O$(N%0WfLAJ8@!
%W'QedcPjbuLlUKrWm`NNC%4tfcUb1fp/GIm]LQ4BB"5r?4QP&\\batF8<uY,<P'aGP-EKL$dtal;3WP'I<[5#=Gu:faeGWZ,:c:f
%P"sR[4._BkP*ACM?;hg&*fIp:Vh.\K&r>2"Y!c#p;](*SkH(32U2E"5LIYR2,U]a&C*\g2@EoU.*u#r$4n(;Va?EnVi0-`o@IhSD
%ir6jL'bDb3?;?J(-dL[G?UAM]HRDQT,1pu%ROR&(V\%U?[E&qB*Qf!LeLcmmpFp2S!drP@4JW)nSe3SioX]\g>_4eD^.0!?b''I&
%=c&")FNV+dUr#aVo'$?qbu,Ie7$[=H'9CDI7KCG$Z$CCsCKn=PBnUX'?AmN;=NG[OM;]elHYrZ:ng&E%r%3ep\0o7,EjolKYRI`p
%S,"EKYJQ.J7>$?um+JT)19bROAYnEeP'bQ00C@\.*X];rD@u7cRN*0nMf6k_a89EH+Hg&%mP%Q5bkb1[8heb,CS<_>>Zo`]7sLuS
%qAo>7>#$;0h\G@m9"FKQf[D0B(aBcRE3gi_4WG_i,X4S[YL83IOJ\6bq:!"!$b'Kr"1r#*-/7\XO))0a__<E/cOm!64K,bmMq?tR
%@PS/B\'\)_g/hf8=@Firj/&j^0Ar7OpgbKP'n.`sel3@o8Vd?\j6!,.JRkeI<P*=p<%jR-D/g:*\M1-<VUN[7\AsSiOYTE68b)IT
%hc:I3"e\h*PcK-IY4a)?NhV(Y4Xq,7)s/khE=`X,>LI8L"+mgd[EeWo2J>#4&)%jk<6,H?PLu+FR7.I;M:6ERGkqt'H-@9=*46mj
%eYu)k[WUp5U5><#$@"o%LW@[6HREioR)*]M!X6M5&;jJAEPQQ`:ZIcl`V/h`PKLQ((>UkG1$;P\A3J-Ya(#5I^DZ#RaDC:_%-bQ&
%_/9:rHg[fN]\O7;S>^aNZ8@8O5&5^Z_E5:e$l`-jS[_/oX26#n'(si?55JjU=qj;09m)Yp%P;6&8)n>]M^t/G=9a%LK![i5_Imin
%Mu7"F@W6Q\`[2Ff1uYPGo>DO]Rc1h^YbLtLU1WQdai$P`?^LnQ8^X#oReJ'Tl1DP)lJIb3KLA+(o_fftUi@]II1!&2#AeM<1[:);
%N^T%<D)8"O'H:8X8;M5n]VNETf@"\Y7l`b9l.L6:dYgcAi<m67f]C$&_Njd,qN4*)D(/,_/1fnibe>aIRZ0/Jd%OplK*nL3HF0\&
%;,?ERd3Vjp:]ZosD(.nF>f,GrXB+^'*XOa@HAj%^Mf"_q#QtFtAi<.Wl*^up/sKF,=pIasrI^qt<k/mSBB-]2$"oY`Ob5qA.2cGP
%cFWY(+)#J)?=:/KiO.hP4Kf[(')[YloItod%6;N\X@h6f5Re6e;1m#mG[,&+N3e1d?>C9PGaI2OO5W.5/hiJ?KC?GW.htIB.<1X<
%/4k8,UTm=L]ONUSdfAjBbtM#+-bcW05[g/E?,3PO;7;l2.u!,Rs2BU!0dn\^TM]UiP[4m2l51BGk"Lu>_4(5gQ*R[BMo+VrRoG,@
%g**(l9`SBT1*MqIiquBSq!LXl?G)?sh[j`(eaMB?Jf+G5-4#6BUOrF/p\/Yn(jd>BK[KP!5o>"l*JDganNe"=+!G0SrWsDbN4t>c
%_W]`6+Ul)G'Omj+@YNHiha@jW_)LmNN8Z]-6Pt1i1W6`T:"0^Yho?2rdr?$]`(oGXljuD32pjudU>3ZtZ,(Vr6l:=o6c>;V-AmTg
%^5F4FCOI!j`(&Y'&i$9>6kci-EYD6e(AfGQ#_R&*MV-j6W$:rcGB$'1@J>jPCo-Q/Mtf?j65M?siuYo?MU?j*&OtZu(h*&bPS%hV
%J'2uIhY\.)"T!PR&OtZu)_ir90&h\ZepEc/5562aM!_p'\0JHZmNR_ErjdkK_ID=i+0gO6Ma([GmimkGGMg@^Z-g$W8/QXlLP3M<
%O[tM-rfcs;9k/Re,=)^NO%<_@ls39tdgtl?P&1$b(+tFMS@cifAl7I(-Lh1[&"UWsi_=e5#2_lu@F"U%8kdmn74D[;D4D5ClFTS5
%[``PtQ'gib&$<e;]6ecKIamg0Q>DELj/=:%i*=U=f'"]+$2",I-&fR!?F!'#"T/m%haB0WUts$EZ2<N%MM^//GB$=#c$1&H`2)Be
%//&[MGL9+NeMm"l9SpB>BO]!)>tbpH!,nU#f][[l-LOgBLMYt%m2!-eNP1*b@S:hWho+rU]*KcJqBj2gUMlotR&,'EkJ["P]1=<.
%^5mDg#ec4@@^?"dhML&YG7dVuoM*PnT4X[%lWs=LGM"9<^P@9Ti;<9sC\3#X'F*I85Zsk3!X]:0n)L&pqE>P7)Z:>R;#K-.d85d;
%GO\L3Z29>*N4t.*@f,LE.Z3W`HakJI\F(Q9*68(t5t?3q:VT=h1&>17'NfZ#-,l2@-;Fn!]oA8n4`VVp`U9tBBITh%ho/7IbASW&
%^pEp*.;!k]78:&72fVc4n4hsX+++_``V.tjoFsdP`_WkUG7de6?2$'Q(k!Jp`CAb&;.8fS,S^t^2mH=U%c0WQ@J"t1(%1YiLap(7
%5,QK3oEW-ERd[I\b\MG>?,b$b]D*j;7WK#J`S;>T0ig1om\$Z6S+#@<fUM=RXk6p)(Mh"Xpj6[)VI&0!>HoDu%roS/hSWU'o6;'o
%`T5BOg_F>P/`[Y$hSif@oCa7%$6/=irlWp)r)`&L^-uIMqE5f6)giHY`CAb(@W@=i-5qfUq^rqJ.2d=A=kGY,0j.15\r4^?-J;[0
%(>!/:+g]gM^Pg?Gk/1JH()qZ8T>_#l7;23fj%YIJ$Y%mZBebY*`+^s8iE`5pgYt/s>5W3n6u+e>]>)&Cc$UNbQn=(4is'7Vfq*D-
%>?J`=a=S1H\r5BR%duLC/[jd0ij\jNp\,8)(jcq6"]jMMEH*):9cOt]amL@`fMT8;j`8cor[L$sos/dt/k3R5l,)Z]W%O%CMsJ74
%gW2!*pb&u_U[OtiXO065hdqk_L%)s7ho9oG2r@&L@J"u<(Im:PH=?FtX;;)t7XO[A2t:5@S*qN70_R-]b8U6k:gY&f)tsN.dV\%]
%F%G-*I^.PR:%T6Ko3M81ZeOpk_"`k,@_a\o4pm7No3E=Qp?-iL(m@=2Z!\,oGL9grf!pPAA!c"76l<OJmpa-fqCX7VNP15XA'2bb
%A=0!Vir9c9#5Wb$(lJLR`J?6cmk.4k))sQp@efHi8296J]SdM7Ep>8\N*Qd7nR<>`+#1c)ho1PZH/CuK0rO5@gmF^G7__BQ0k\L3
%r"pB$(I?&1hntP\Z$0&UI+EL\A8LHm,T2ZTgr#:p?Je/70amt5SrCA[-DHI4qC\Y(D;;b%1A:.J\2(d)2j%\,eT2C.`nVn"d:I9e
%gr5VbZ$-dlbV=G\A&_$r6^b1i^POc<X5EpkU_t,"(Mh#Sr%?]^^&'/5N"<XZ39.0g>F73)l+<lMjr(gi4(I/r(O="iho)+k&&3l`
%@q0H:caX$q'7n.mho27nd5Op9>j;'^^\`6Fj6qKla+*pF7g\,hOlk!fpYYr,lJ/h8g+b*EQM<2@!X2mkdnF#^nP/&PP&V?g?a>"Y
%BrOW@iCG$>DgM+Bf(W!`,01iQ&:qt3WD6I)O\Un;aWu/R%d^!Iq'IMcKM<^R8ONlkF?OVl1Y7,`9__*M?btuiPa4^G3::^tB9P_A
%AW%!Na$N"I<b%K@\GRBlhGYpW7$b"AfEu"do1.*P3n^GrAQZnm82O$k<lfiO/1mC5/-TCZi/TRqHaUH-6;"m1/A4]5?XNTN`U<pV
%oW-mL_sdTt:]L3Fn,Ds7J,/+hs6K^^n\7HgqqiO[f%i=crPq/#QTtH7+9)&m5Q:XHr.j0XpYDIVro\e,dm*HaJ,f&Rfh[H?l@0oQ
%O4Q\tja[3;J,WLknUL$=D2piefY0TLL>:<AehUIk8#D)OC.f9#[97d/;l/p(fL%b=ER?@uh*`PT:EbMdfX49+=G]W&<LAZT6FQ=V
%Dr:9eO0K1m79iI2?f[aK!S+%Z0B[-SoG![cBJgc8\d'k35fsXrb9&fI+d943_S@c-1FW`VU6;E?(r<,?P[iH>-Qtm!V.-Eil;Ve^
%Zul]@F-h:Sp2/]S&WsXOepcG.b;=b^NRUUXMU8o&naDkP73Mr)=&4cO1jb#jL"^IqQm3k3cG]$*\.pDXrVl0t^Ahu[WH5;$I.D^M
%9Pnd=2_-1KAaitdofCQ/N7tAm+UVt!(cA"C4#O;CPTusi1fZ!bh`6m"5:dY)#?;Y.fUr/7:qP>1%\a_8<J"[[9).u/?_UFC)66b-
%b[J7TJlp#@q3s@M^=Zb+;XcXePu>@MD]/'+)]t-.E$hboYr'b%'/0O`1*1_a1FXD#fH7:[gt(FQPLd-,g@l60?[lIDn(I45XF&:U
%+'=[2[;n("&(WneGu'm4$J^>fTc3qXTUR)m*HVQ[X`)i3\9bnL[43,6.$J3\2,Ke02&[(MMDZTY5$/Tg[!Q(XH*9=`GhR%__lI^g
%S@9%)ZX2#">>8=B/M6__KdnMf]BrHJ?/9tjgs5ai//GsGU>i+YgJ"E:g*O&sQ@O^QAU/FhmAfusTLRmdodWM4V(3+gO=o/Ts%u:I
%Ci(X)kkOO9*VqUL>NOdq)MkC[.T8S;3:^Z;MF--n&:jWL>>+`\Me*`Yj.dm$Etp9lCg][X.:-=SV"\K3F[]>g[QpFmh2>7Jl'bTt
%J"i$F'3*cj@,;ke(+!%i/S)I)+t2E#6dU4HgaX$;-SYdg^d:;?)G\7j3p@VhFd\0qdoj`njKd)7Vj/XZPtPfiROhgXKP2RD\9+i(
%:cVOuUh!S2=g:Oa6D2%?1P?A2>qdAdrkfl>LCIr9NMLkn]*_Np"Yds#'fo4&rJHGR^FAcg.H_J2:Ku;nd%;W0K)5]&*KM9dW(qP0
%1Je/%[>",o``R]c@Z\@qS:B?"[PZb/)+3N/>G^G<MH@lq_rD'h\WcNN-:'YDFO4WK5bDp/KFGfUZqX,#d9]bEEJQC23t\<X`sJVr
%VCGi9/['#-&m/eKZ./*b4d2VZF[!:5(0.Ydp;\Ij</eB/$,Kfm!ok8*dS=H*!dr_sA9`K.k+%,C3M&2RiA[BSad2BBC!Y:&>V&$$
%Ja*U#Cp(F84[1hXK0ftXLPZE#<Gp7KG36+G<"d9JMVlC,*3kD/4Np18.;_oZ^aicVHtA1?ZU2\gBit2]Vqp?-<LgD&ICF,E3U9=$
%dc(JIV6F*[9;Us_r7j9.hrrKJ6(GYR"H39Q)#W[nmgm:#r\t7OkF<"amsT6sluR%c#R90N&r_9`.'E3WoiPJ]Il\E"F?^Z[5+W8)
%Q2W`aQfjkKaG%Bi,@^SaHUquFb;"Qqs.D(Bh,1`2s2MtIX5EsIS"5i3OBG27SXI7;[_=4oDcZVu>;>sP<`Alr;fUE!8ocI^m_5&$
%U(Q9Fp7#6K:Hk^agV'(<l.;ph-Og"Lj05MTs'Gt:)aMhOgTV?&md$.,X9JiRfeUBH=2bG.?ATr/O@/][*jA`j-PQk:UHDHicn^"N
%(V>2:i-1ocp.?o)"QFk1$&YUnV;1VlFZ-_a:(JIY5E'5)):a."i/%c;dJWj5N4l%qai!eE5X=\:;%!jh;);s0koM,aWShlP<0)ef
%XjR&d*DF9,JmsS:F\$N"$2o_<iC\i&qN`I^aR5t:nj\S`R5UVr4><bW?=i!e@WRcl!ad,D@:'u_e+Gel7oUNCe4p1LVUh49Yi.SR
%%uNW`ZlfS0Ka6#+/4gtW!ZFsP@MYB35Y+20b5-fkR\=f*1IN.O;e&oK$;snj2+uUo'=a3KK%H8;8L'CGg5ptLUGp8>c.8>EU$K3K
%;.+U0P_Ns!Wds``!X=8i9AHl@MReX;@Bj(9;][n-mDa[X0X40E1&9JSR_N>F;hUu'pAMrR)l]7?!RaYeY>A8ZJn@Xu'iGUYLlOfc
%l^$'Ar[VFOq+`_V6W$-8JRj<lo,R"aQ2WM/[&8iV0"A0^>TYl]9]\6blkT5(FZ39Y#16nL\N'WYB\<=0k,S^OF"%u.;Cr)[IAJ9J
%o?D]SgdYMbb?d8_9`cT\nG)(sS=9<HWAT6Q&ITdV@18OP8DQ)Lm%g(pU&lMX8%Z;>.M^TZ1.&F+@984oJIJ8DOpsMh8@90[<P0q3
%0d79XZ16;(d'/cdFqAeLL2AEg(i-B.W[o?V;EBh7G.qK[gkF5lI^C1h.\WONIm_"FrNri[TGmT;G/4uE@PV@a@`7ofdI""9%NOkX
%m"8,`lVT-fV$@N#:e.SD/PFolAdT#A0PamL"K(^][f'YlmTYO@C-)lTLljpI>QuWm*muRl>H-t10fO[B'M2]=O@JKKP2fZQ@,Y5T
%QB7;%n<WdV9!R+1p'GK0FrWTGo^:3u5+P4j3b_F<IjT;2=kI3pC*X0cUt/eXj;<hTpQ+la^BDL+SQba?D2PX`'ZDZf>PG&GA%/E%
%h7[1<,;Co.O0QDaerW.8(lo]/bnU5D$jQ+g3F#G(-irKO:28E@7,R!7h:(b7,IdlNIa\Jg#i/i,*jXM8,'<7n(@s9XRa!Fub8gC\
%1UTBSN<ed)N?-/H'+%$7;.cn6q/D!bjeR[B-`5^%49\*"Ouqko)T;m;M+Zm/"AgF2YM),UP(.F.Y*8_Vpg=I7lRj3oD\mK<E"=lZ
%m>EUfq4t+U6JO)Fe<[BAH9q)#[is!aOheU5Ej=ic(n2Nk39e%?X9^G>f,ef*>tTIQ(<SBTKohfFOVHGD)s^JR71N8+HF;lO%pe?j
%`U40-q!CauR)'.]jdAa:Vd&e!H1'.13tNg%8p(4r@pWo1aTNkcIaco.O#BQuF@0LN\ARa1:pf?#>Hjkln>Z<<TI/&')+Xh.qI(J^
%UJuU@[0BYX@[-6Ue"f+:D/(KqTin]a/F.g:gLC"`/PCpe"iCIo3-<UYbRK9<aEsfL;0<m6mqGeZUmBKu/Ei6]K6lLhfaJk>PuOYI
%4J/U@F5$:SLW*.$"Xe/cS\i+W$o&)u0up4B#bufg'#]s9;j8Fr+`&</o4CqiH!f3&*1ir[9KVlD)?q`6>>Wr"lX$.0pCCp#[Q=E$
%h<L<`*#a_Xa,b_WbqVk2R3TYgYP-mR[cu7ki3<MgQUH*%,P>CAUZB#U#mH5hCI6"S4rKG(l::S3;p<^]Q"j=mfK-@NVYeHS$j/L(
%B*kP')M5jh/q"g'A+t-1VK5ZZQX+$]??dcM<0$]j.``dhhE/Vs;?e4<mo;"\40O_@)Ci-)*<k&`7Oc%X)r>-s=UD0klHW[C=e!N/
%O@4u(,Zm;4/;BI-9b!g39&Gsl1>%6m<(VI<3r9GGHr-%g)13B16GJ%HQ^DXddHSUrk*"0782F3aRgc<Vl,K+"1^PaM^-p5*imE3C
%%m8BO]"%'I0.qBg`@Y`=$UPIiN(=7?5KVf!)j5UIR.f/LL/WlQ5P!FP+j$c0?N`54L!Oen@cgmbL9W[^l,a.M3W(/0U^NSS3#2T>
%75,gML($5oKj(pG[Tj!]@;.W!Ko/YB2sh]a>=p'".PAbY9a&oKWDW'[7p[u&Oe!"E@CR$?LUn$C-=0I=o`bjdo7L;Im+SNPf"N'Q
%J0Li?(Pu7/HH+NiV(iLD)hW3;h0gRJn;cV48!CI`.E25uT_+lo@Zk%OS=:`ak..EVd[<h?[;?cpOIDdK?s?p))<sW?[jZuVOM\F<
%!7nh]9(rd;Th;\LFBm5rX\5kbA+/dESqtHF^P`7nY<oh3&+\FC=jn,@VB*?[XPf$8,0M*&M5=on=cpkT,+MI+<M9-5Fq5=Jqr/>a
%S]W'\ecn3-.c0K?(WWuA8f=0:AXLQ?#$mTAJ;HWo9nHD;>)G-gLJVK;RSEgU>gFl*([`uQlBEdf*`:#=rNr8fMGtO,LL$hrlp6oK
%#(%K\!e4ZYM'I"/H-^m_,E'nC17S&48S.VrA5=M.#BEHDbq(1<(6ZXl^I"#d3X784%uW.`GDW,E)V3Q[(Tl:P]0PVZG.d&W8M)H/
%*LHJkS>.,If(Q79/(#ToXLK0Bl,?c)qA+5-dO^9CJu\81b22kcCD?0*Rl(ON9lLV<)F]QW7S!!HKsm$M68(=iFH[VbhWCBr`Wp3[
%#2Z6eFXkuZ@IPqre4rR?UtcL/eFtgm&`Z%\-13-u.XfbAIUL:>1]/`<fm9;a6b!ou*N>MN=X7t.5POO<Fk'38<C=;QP-/C(=``H7
%b-C@thKQ'#%GuWZ4Tbb*G,D]rm#SVV'(5]J*MX]\I(e,baWf?i:aJCbdZ!C8lAl_Yp<247;WG*p-.pj_\nmuA#SV,Epub5J6S-aG
%WfWB#>enYu[ie@nG1,0SL:jrqQegEFh$r@r!PiKYnA]E4a4?YFGHjtLi:Z:G:QBTL/f@Xh,Z6]\pYibBKEd9%8,/:D8H-ES[:'U!
%Ok"%2KbX99I8EL78StY(R_tt3R.edu*9&^gPCe4oh3.';i<6RV[S%s&:<Y4mpm/)=T++NY2jQ;J\)\uL3`5cO@OAWdQ@gg"6tP4p
%PidAK(Ag^]`dq[I%=TVrHm)?u\+fN_)Q-s!WAN5$Eq>bIa1VRi#jlm*aEn$2_hZ%nHV[3XLK%pPH`)m6XO%/G<@bbo*jI[#OD!am
%!IeRiqbf^lb$3&I`F\[j.gGL4c2CDX!=2uH/%U%iR5Le5bX6&F2pP2ulIa"!VA>);5jHfIKp#Xgeb53"Hn7Whq,u1L)L@[aH(Y^\
%nK.raQdj!T:ebHadD0?kM=1A:c5Cc%V>8Ri=BLZ:n:r.ZT)>r,4gBq_^)2bn-j\4uQKY5GXH@!M;@RMt$FCp9$bH:13jgT*+Bq/9
%25WbajJUmp\-%IaV<23g'Yg<:dR/lgdSA846QT3%GB'5\?jCjFWASB.:K6J=4D/.4CEKM^O6lk0':![2K@oR3+Es%e@8R,_As=./
%%q)h'kC"@TGFIAd:J8`Ue6ShoasipL)6>5dKFIRoVeq(9,Vgc5!$au17?.h_\gSWNSgq-b;EK'KCiU^dPoX\6$3&B*Znml=]\$G:
%(Qa.qoK]?d1,#=""lS:%L$4F5lHQj%jSn9j[A<TS>K?a'I#NrTq@fhHkj7KEo4E!^1M\CN*R,('nB1I-aqN9HNe:ouWMgsXT;suR
%"m"co-+G%=n#/W#)unADV'pm==@J+B+29R%2'!Z4)H1p>D1d-5R?!C[5Wm8sTS-3@e#!oX@5E`G.IS;<H8\?hrRaETT;V=)#eB<d
%(QQ3>TPJ@#7@hIi+U!_WWW]bfYDptGR_FpY91R[T!XC^]bbj'2!*"'t#<4J,1$)%)X;u3gWU5+<I:SlI]BELG:t13:cZBoaYVmS?
%>/%XGZO;WDpXUoo7DL]Src)]_o9M!\m9Lg&'U7Qa[@12'-CK1J:?lOhA(Vg]/C!mORF9l+TdtIn9)Nh,^scegKKWf_gRr84Pc2PZ
%ojj22/]YpRW[BL/k"@W+&J.ot2I.1aZit[:$"2E2WTpj,(UnB\>kj\E=!QO2W\0<O^Jq?9N_(m<s)?[(X8VQhpIXQig7Pk33ntXk
%^lJ,q=cu"OG`Of>C8NIXYse[r;=e,uZ7$L<JO0j8G.fE3p*D0'X0-arQ\G.LU`*3Z=E+Ep=DqXj=bH)J09['kS43Rm_?QM[<\mA&
%js.fZ;Mnj\ZZjn7r+S%UTaqd6fHm'Y?pm`WQG4&f9B?`Y7qX*Y`-L7NW\r(SHd`l?n;2[4R*oDI.St>)h`%:UA'Q[ejWW;.`An4'
%jh1h<EDi4@f:nj]ONUt;Y2BnMei(W.pT**KmM_"OEg#*-gVLW#C.&H-E;'kl51j)oN/rY7MY6,W:<IoJ#_C*_"SF8YL.?)B[9+S-
%ol+dIJn0jdKHF7,lRH:/(i7R-Ot07]MjarR<stb3*]N`)mTRE1>8>\0lPa?u,!(pR^s'i$VlKaPJ#LYDOJ:1CH*9"H>Etn3EYO8.
%"DS6$[G6LpEG7V*D=%.+gWjP"RrfGI]h9bQ1L=nf>;/qa1%+)/=X@Suhjhru)1o]LcWu^gl`mljo(Sh7(YA,MH9Cf2^91p\b(nIs
%7d?:K"tl&tMuq-J=K<F?m-5bUectE`JWFUVoPhITeRa0]ir0QkLMLc'$)[&],cQGTVmM_Wl1"G9^Fm[.LfE5$6jn/bosnH,TOKYO
%&*8YT.jepOoA1P_V<DM-+#mNECK,[r&f,t,;om%O_cp!mf%HZhDqV6qL&Jo^7_RN72@C[H\LK\h(+-tCP,mE\(FS9Ap)/s`oR(8s
%OW_'6Z7frcUtBsAd&-9PjDRd\b=t`&E)PN['X^@`RegAYR+@3"/0^VIg9Q-V9UOqoT33:FRYH2(ZT=n:87m$"n`Y"*,JP,ujF/:\
%1]dp)>;3#SnV%,ioY*hq6\r!HJNrgF%W2ld,[Ioab7'Md:[<sXD0iI>Jl.U</jN$Md00^=;g!f+S@3W^24m."*J5!6(=[t6Wm<P,
%lYms!dahXcIRP2[0<STtpIn0h/9RgZ6eagi/t-#4r*I.ZII-qs!lt;^HP5mLpWIB*F[1%DD70R_a`M,9R4'gb*aC%+.3-3;0*bH^
%WfKRVesY\F[mo"ZqQU?[KP!S=h].HX#.::^9@2,,YoT0=h^VqMp;:^l.l9V=N3nlI<p.@aOmMm\*q\aLdb$>4g]EPsPE0&#Vdma6
%AE3A<>XtN;]U[O@?9KD2;&^::aqGAF'K?:_]SQuKQK>lQW9D2FelSlOhuo>11[=:Z)7ja-m<RG-_Re$,X6B1RL,A&$Jd20LX.$``
%c(Lqu0bMI"afgt\Oq'9@c0ZWbhb!(Ah@Uc;Z)C?ZX%GT\qWtZ'L/FD?*b9K7]&,Nr2?=$%o,"/[X/3f-=H'Hh`j.1k\N_AU[r'V0
%h7k8UD1nr/!=Y?5o=5nbT(j&F@3<bq2&pY:&D=)[bO$<90c5g1"\GCNZJ!O+O7"l%07hS!_"9rp^6/QkoB4lanjjJo-WSWEr*TKs
%n,?U>Ka@JK5QB;>og3jSC&4)eqdmrjf?cZ-8faej#)ro'2eo]R4NN%tg*rrg_b(*C*=4Wq89E!o'DOjF2!XcIndC_u_s&2K;3@jM
%p_`;qh=*Bf)iQN,n2u`F"VuP2P>nMjl<DUt;5sZ!GU=$nGK7LO>(^sarVfD8/!)m,a%HD#d9Zag_s`%*'E<Oh/AM?$@$'ds[IVKV
%asr%A*`PB;Pf#ip"sWT7@*UaiH.KfQ;BA6sX[rKkEa;C)E,p?'Jph;[qJ#%?o@D>obn%%>=9Vn)St&cr*<!7Pn"Y+CE@Y@;>LhS?
%k8&\hHiE_IBXP%mq>:VC<r_loFfrr7a6a91`:$-EbOI+]_=M=9ho9fQiZ6qDlY^bBa,5'>m2>pPo9k@V4gTH:?12pRdsI9hW@q=&
%WUp)K`/:Qu//&N=25C>r>+[EUNQ6/Y=S`i#YdPB>==!oH_?uJ#.UcP%+9%*Hbkgl%M0h9jI\@_[`9n$3`:,;UDe(l_ruKRJI[BGg
%6Zll9gSoVs`U3Gu.^+dhhKIHV"n>uoaDWnY1'JOcOIF2k<=7,B.bQUe,/D^#$nVr?X.3(F&0YW"]((WZM`n+ZohGP<@VVtWRWhd6
%lNX>DS_^a,C8;WV="L#PCM5J&ED(O#!X1#5fF^--M:Y57)c^q1o^oRS"WcV,9o5)f$K3RE8@KI7atb,WFZcF$;S_;)Q5k\6?*fW6
%P9OYF-;3-.fX5ujZrDaj'bdH"e7-SL3]m.Up7AM[Zq<MSnB6Br[!&KMl;-TBH?X#p:6-H'<JM9JI+WkWcscoM@ZIA*"M,aCMH3pb
%[",XZbR,BWCm<;c(a9L04c1-LNiXpIEu..2HRtF>dB.mB.SpPf*(n&;KC`<TVI=eN[[,6Dnh1<Rhu)u+pkturD[uj/gIHe1pC@;"
%D]]&ch`hC*^3p\D?@I)8(B*W?i:lsV"JbE,$-(gd'TBbU//Wg4@(b6qJ)Q"TRnq%2\h@"s*/bBW$0S=qJ:n1^DZiP9<_3!B_Z?Bo
%aM!&pVG<TDMC%Vf2./9=.026*LE8l@btV%rZWW&Y]!aFOegTM'_2Z<,C8.YHK@,d%:J/b'DdW34X/CppK&p5*-5ONA(!hb0V0?ju
%k<B*fV/DlLaVqbq48\?38h8pa>2+,,bsLh9i27A8:;t2$d4"tF$&NK!@Q7\tYPQ7T=D*m1JSN_$FQO*V`!R%Qo@H40Cf'#-%"HgP
%V]@'mjamF1rq]i\[S)+Iq@d[g`)\o*77]9ZJd1Ia@)Q?b-;>bN$=:!-jY/.+ig_V8]sW2e)L^;0^5&DFO[u[?jed"#,pWO!Wld6i
%*4]"Mo['Z<eY2;&!mo;O3)<K\LJ;kkj[fgK8f^X#K35++<Y*!RA[i0LA.n1$bAQ^p:%>2(INR^@,=)"Bc<ZI`X4-&4@<nFAQZ%h!
%F]XrpXK7Bl@Cp)[6!o+TDXY+)"8mJkg\8n\+OY[Y]n#dJee]BH@@Y`q.\W^s<1Y[$"<G3/q]R,9j="\'qb^>\V([Rjes!NQ5f0,4
%XDVs>I>CI+a11#+FhJ!c=Z-9-1T.tW)W!o>OP&9L%lJb5HD*sLD6FR!S(6n<HG,XmC@[%>-Rsi6"Biklcq5^V)V(S5K-#9+V*FmD
%/UDNCdh>IfU4&rd1f[_2N08D=:\S\[U?W#.H)hCC8?$N?\Oog%<c?G-q6`2h&kEFsJL,DJZ8@7eT_q^gWp.9$e.>Sl'YIW\8!2Le
%UhpG=T/p^E,8n5TSXSY,fZZ\@&bi\&P$MI@ehdfqQkuDo%5'N"+$ea=$4nT=4f%XB`^V90ZV%UL/;3bBL]Z!--ID?Vi7?26/in0W
%:jk5r8e02/%+Lfe@9ooY@+e[KBm#H5Yt-]1E)u>ZBXRZ^@Z:;m68ah[!]k@#m8TjK'aL"n0:Tng>LGhnbmGc3]\Sr^r#WBX`2@`2
%_eY&h+cW]&B^W1H#nm0&\&ujY)?l!q+,;p"V:Oaq=$;f<M')VQn'JU"4u*j$7Es#66ZQ.(2VIQLEjm/+YF26qL,sU9MA]j>G,$r(
%V(\B1oO)Is^jT%AasfNWTq/;>!6*t.EYYbZkb;![MsE&WGr<]R`q9;#-MjmpSAQ!f)d2g8VJ#1e!G6\-6FGYt=&'+:h*ie)JX0A&
%k>2g*o[FbJe;Z66XpmuTEGR@,Ml[H#>.*m^A/<lU`,g/p/l),EW#@.X8_F.dT=-ROV:sJ+UJ=4W<iMQcbU%LbC<]s$?$GDn01RUC
%=hCkUfD5;lTor]bX-4S,keIm5;Y0pX#%Bq:rFuZZci'_%n2CMK&nF7O=@IqN^L!j9WO)k3UfqgSAO`6YZ)M'AW$[tTl:m&!k!WeS
%GbMDXn;:2*)Ws6;n\[Pl*nF5_H!G5f,!4:D*E!g7-j^AP(3NTS5:c'-2WKmfZ:$+c[:24D^5lPWJ!@.c(KnPFOJ^I\U6,5l'<0<"
%]Q[9Xd-a+t[mrtH="@e+BfKhhGa'DM-m&NSj#L5D[,jB$k8CU+?E4aAi=$7#e:TD[7?[:>0s23@:'.b,3L2@%D-.B(nGo>WVh?f/
%l0tCZ_ZrR0_"ZoiSI0r\:=Mpdg.(:,,e@OKqHcZS32eouj3-2Zo]9>9rcf';i!6h\Z5Qt33,Xf\bj+>)%!,tV3l+?hAqQAh%SPtT
%.@Fc=.&?)Ya^eY7-,]L^9VKh11DQJs,Mpf&fP0R;!<6[.@4eqF8Rr<;X_k<D2)hMp=<";WQT>h_d_!+PV#IacM3N$C9"d/@>5drc
%,b/_<W`.Df(K,BGP?%"n4W"2/eh5NbiEJ2M+);l1+bfHRDNrR&F_t*]05gYPW?=l'aPDp?/FD(c[I9kQPnQPcF)V&+5rVB%OdGu=
%Y^2r8'+c<.p3PC2?euMUP?5-MpW'MpXTn+<S2s:sC^*D[LP/8(aZ;;;`5u(=2d&mis,c)-OCB5UhjkZYSDIZD#4]oID"cm[IX84R
%k0giuccoAR8[u(t5-,p1O)8H,957Lch")j=ZDLT+RY/?uZsB[sMLbX:I</M5=g0CI7C%E(0"e1)#tG_S$J*R3fnj!+n!#PC4S4Ms
%U-^OabQT2]bO<oueuZnq"u">KE#srS#MZ!lbj#p&d:q3q(@U_rJ@E`*0A,ko_.="uj:tl]+k^rkB_,)$gT<jS5ubM.Xf6NVk,hTN
%52T2]e2?DdmM:3Ke4)m>Yi6[;;T$Z5ihj*N).IPCe[DqloMmW]1"qU8Bl$1QaY$IR8uIoZm9-\SGen[16qJ;O,_'&W4;aOPOEU2/
%XIXEM?&^BZESL3rmVWb>hu^2Y4g!?#kM'Ke4\VlF%Jrs4Y][ZD;[%n)P!)%6rm?UEUOf?H!:`1ZQ'0rAI!+UKfnp]0'dH^/Z"R/[
%/5e_mqcF(\#fK"(*U,9BJ9=pViK?0T[h))hfnJ2=d4&'V!:pb%!KsR@5"OE[?9KLeR]bOf*q_<iPYVh5#au$:F0go0-mmE#0qojA
%!IMcnGk&D2keFI0Y@&-9.%OtO.\3fE3N-*?f[YI3)7'..KiJs0,p8*kMcReAeV>d+gIm[oT"U4)I1"Yt#(`_r9O@+\2<9N;==I"+
%@2jMsF].DqZ+m*empZa?$ke6Lb&9\h>P-C5\=,_@XksI2LFU[pm_r8S*fi#0TFBXd$UG(=;*2Xl-2[`n#9R"H'MtE2gKS45Tc1=9
%8?BL(%g>lJmY+UM;1#/MeW/j5am[+arBl<>.rpd?3^%oJn/n[^T'"rI@O.eWg14D^qu1d*.C^RO"8A>No#3\kP`]`k)Pa/I_BSBP
%dc.]eWU/\#XL-+kV_8(e^qZYR?(X!leg.g>U=g,g:LJDnRbr%JqM_17Zl&EfoCkCLXibeDhZ$r0?e1rSQ<j5;kl22I%=ZFiR>8h+
%=9b0)*jEFfN+c+C,SSS2]3?'MpV(FF^$cr/Q'#47JLDG9UN_1]hD=T+cQ:Zs%]Nl"p<B<PKJTt9mO^=I@$U\J3h0&k>D^G,C#)Aa
%6C+J*Xbb*.#_H*Y*E]A7!nkZGo#i-X(2KYs<I,;&f)/7+QIFo[cPhuQI0589e.l$,BPZ^<'gbSN3`oEcXihpXj?T2EZLQ*]Y<<2c
%flY_%9V6DK^_)b7YU6i-6?WM<<A`M]X?H$qmpJ4DNH2V20-4/Kfo0Q0#Co#l&#m^N"B4);RVg)W$U0EPg/b/U>LX#r.IAR'!rNU5
%H,!Lt9tK_l;LLR6fX2r&j!MaI\_F9EEcRkgea-S5.auree&V2q&'6IGDU,2AVZN\CTL*Ca!\h!JZ]qi%'QlmETOA39H=8K&.1r!d
%K9NrEY3qEJb%f[2f1225XKA$uZbbifm9.Eb(L]q[IEuqOdX+QS3f&Z2,'7Le.Mbm%Q8F[N!XoH6/O>J4W6U4rQ_J5B\4TJ.i#QO]
%JYb:jX9eN9J8:>Dn0Am*.(W<I3*gW,&B[Ir5s>*h1Z-b_>cO)8ZNa9*P`g0BKn3$_RX3;'/)JF2co!LD1?DiP+:n^[QND]/pPu'q
%bcb+D-%:Y8f2`n-ZA8i>Rm'@BCf-0X+a9,<X`;@e4C/^V!bXl-Mhh'?@d+G8>p'5oanRp,B3;b[:pJU'eM;7h`R4`t*uBJF5Ho["
%mgE!Rmb+1OpnLlG*QUdF79*(/ZijD9l?rG3r4NFFh=Z0GOJGB^7#u4_pUE,)aGe)`bYno:2sXn.VLomhH#qoWG9*Ja=MtfmaZLY5
%[69J.Vt3N?<?1tUn&Ye@Obdo4m;]/%.'%57YU1o**Lt+Y`cs29"SagbI>$N7=;'G>QSQ`d:f^]BKNLr@'QN2E>%#A"XX^TD2:HVb
%[SqniB.\O;MLDKL8@3%[;48u,6,]L;W4"8]Q"_q'Mq%;lJn8KZ[n9RJ(e)]O^]I1^gJ`0*HSuU[3CBhCK0Ut\mH1R()5^WrH.u/6
%As5t"-K!b1KXjs(JUbZbNOVAtc&H'uA$/2'S.RYp;*Y045r^SfJVsMeY!*dVc*D&ZC-NuV->"k+M&tk,`e;Oa'#8inRnn:Oc*%mC
%Bq^[)SYFhS2qB\Mgop%s]e*OJP"t90dA$ZFKXotl0V,[IPuVc>i1%o9FBss6c!_uSDkL_<pc;T9/c#lRMW4^oZeYd[-e7`8A(;#9
%!RWCd(VM6BRQ28t`Xsg!9!iB_a39[OQu#LF155Lb<o2;)*YX'*CcCbg"+$>P,\Jj.W*q6SCg4@kk>$mOOiq4_)$W>fj!EGO&\4<r
%kAe\M\AmK39QK`JAZ6o-0o_dj1,;Y'OXhR/ZL_h9>VpI$%N\'T\N!WiYXkBQA*Vk97k"LsBa3U(>P<sa16IU:;7_^dfLhdcJtUI=
%)3qN+('mTmq;L3ulUNBjOO_e/eikc?R>ildd]l`k,LKA*FnDI[4K'<U\2$qA%S0*e+V^V(;&Yq%D/<*PLVnQK(nPGme)9P--V[_5
%W[d$\Mcg.'lMAMd'1kQ4SoZFf@:MU3%Hsr*)))s"/@D(KlYJtp'Gk!UXMa+QV@`68OAs5;+<ef56odq6RE8K*#AIQl1SbIFM\W+*
%pE,P;(nsEq&r^+rZ5[P;8s.U_@nIoe,Ud?-e5(dm85Csi2$E9&rWt,IcQ[oBf+"AW:kU#s8=&[6CItt_0t\(Zg=G=mP7qqY9(lKM
%P<b@7IZ>3K!0ffLMH2A_:($>Tg:YfF!4Pt;8S^sa[a'=1O>j?s3Ma%m+$Tmi+W=4_G^>JDll<u*P%*iCp'eK.b*5MS')C6#Dje"*
%eCcn<:5tJ!Z4*<g=3#J8ARiq(W0[jiLIEpM?,N:KYp^7EB8nD(VJ`B,/Du*T*@[EN\Ip[O_7=$`>XFt.du_'Pc^maaN$6J@'R_&l
%`DJ9I.4TC[T)M3G$;#O;NC7eQQ(_>j&F]&L-h:k*Q=T>8f^d^):4j+=%EF`8NY4G@+DJrVf1ek.Kf&^]/qkqck10/7,":IJGTOY]
%n#C9dApRHtELgL<>^GEElfm^\+6?ihc+=I%'.r/^VcjU<-i5=lZKZfc[48F"$'U]4^+FMWU;#]eGX)ml6n\cgCa:YbgnkqqGo%V<
%IB@-2PWlrIW!uH2LD'Z\TaK4VOauCUcjeTl@aS"-S30AH<OpE=-__sbQ3W![?2F-6UlA`YrfjMM9^k;D-sH^%r.]oYZck"q5Fl&=
%82ie6o"?BB%KOq8+XCtmi/3u:]Et'4J\0l6,fY)]%5V%2eb+'S&XEr0@dH!qcl/tdgSou[gqTW8+E#'VE@"<79V:aao(:e'l=Hb%
%ibbb-i\)6fWu/O/[l!AS8,T<H[kYY`f$jNDD>CWCien5;&rFj"q(*qZIuuR6P!^b@2Z\bCmcKcU8:Mp9Xb(S82Fdf4_W2A+%P2_s
%KTP(?-W1(@/J+U"n[9MV3=Z=Qn4?s+/Z".*+[j-jS5iWFE/Msq/B*=2omCp[UtObeMZnru,$i0=La#*3O]:&QTR\i-=gX\XqI2Dn
%]VZH*B!S*V1A:p.VO$Cu"0rjk/A-hiF)nTu=X0!WOpuqL;(_A_i"i^EP9ARYE!$U'6c*e,n2&GnqRIHM>6)<,2Gf/mY[()G&P\>P
%8N:9ECf%F6&g8Y`I+j7nKc$O!F5RBZeDJ][LVJG7_SPQf4HqW_#6r+2eP`IKcUbO7H"3klaT_6e=WE2uks>I?A3QGMU6<<68b3!D
%](^>-ISS(79uYuflBhF.lQ6YPFU-jX\*j>[rT7Ci4T#rk!)MM>"I,>1m03Fec+?7`HeX"bZZ"_5HMU?_6K@s_?#dJQ5B@=J]j/lX
%k.>ZI?3c&^W,>4``<8Z>=eiC+(kc/18M9>^s1=;AFJkV&4m)7aU"&=X<&,f^,0g:W7W$#_`O1mEUK&?`UgHFmD!=e*hJq5=.bQ&=
%5d2!\d'i,l:OU\Sh7u!Lj>[.`0(WP7O\s2X7IDT"Vq2.;M#44V$<725SX]C)<O'#)R1W@T$tMn+hB%2ai^jCtUcBd;%mb/#3`N4@
%n)dj3GSo:Be$*cEOJ`hOJWYVMjH-H7fB<*N-\*E<=__l"[RuIg>\IjHb[ki"1a.!B5ET-%J49O4(Vn;l#?%=KR7T(]UEe6R/tXCG
%.\3,@ip:G4f^e>RC%(Vif0lJHP9Lj$;QN4;1R*7r<;l2PD2K4i;)MQ)X[%Zk7tqAm\Ojm&nmllJ,hGA*(IP@fN)i5a,8IG3$aO;(
%'GO,pQ;p6!/"JQMB?eRc:7Zn2Q>>XKq11j#`\KV8gCX^<3D,)!1[e..F(U5lI(9,'jW]W.c:^dIj=]V;QHgU2%n[G\DpA4BjW\N0
%!_OCaYgH_:g%+NSdXmQr]Y:)+o6V?l$))^`:;_$C"sft9*5b4@E_OYOWWQ4OP8AW5UesZu-YWQ<]-n7qFAI3S,RIseWJO`'r_^ug
%+O?If5)PkMZE/KIi01?!,kiJf1C?^Rfh@j`&9V]#_`[!;(`2;4Be?*&7PLJ>Qf/Etj3K8:>N[2-90;^.JiU^V#`A!%!:g@e4&U&e
%kpiSpbq^N'Xj'6OK0erTCA-=f,,tmq_3-R8U<,YZk`_FPJ]3^Y?U!aXQ]d<U8>lcD,a68gl<.dTK.">TGOKX_o%T]hm?jjb7I=e*
%c<q_o@uSJo22:>M4A8U2MU8'%+SL-1Zm>S[H_q`RlI#a'p]NF,7kKL-CKinkc;&<kPJ`WZ-u.=jF;:"`NT$7.Qgj-+^RHcOA>h`r
%>(Ap53pG.B0gLl#H5BbR4j,='="0cje)p'1$DJWsZSYUg#f5N5hbb/dfo$Di8]>sk:L!;#2c4Q,D70"P\+!-R0[i[Jefa]*-ka'u
%Pk7>;[CD*qOq[2GbbSL?&9/lYFd&"fJ&p?ja;],J2]OW^Sm*M-0(La.XkY*E=^DAM221"2bc#Tb(('<\d_H@_d$"IDFs8&S3[*<c
%=qd7Op,[*1ADbY^[B__/`E0AeQ;^50L=aCW1<fjsJE)L!bA$aC(mZ"MB_BBa;cQ"L;$K$7#8q?ZM[5-k@q3C!MFocAMhmtSIRfW(
%(;:2o'*.)s]e%;XR$Z[FA7S\=_u=k8JZkLV4c!=f`oK-Notq%#<'?G4Z2'*DXA"HWQY]/G`Nk[Ol)JsRmUm7jV6sOXk9abtZUO^$
%dP;-AO/(I,HtK."*7L0`DJ:?:/BLqOi82SZk^h\PNTr7C@dCJ^R'UEm.<]B"X+';5X1nMI4=A^tGi6?^Z49s?!o^HT+YG^.X<Wf#
%>\lW:@RH<6ZX,GGh1!tF[Mffa+IF'[QrMI2&B8hGpkmSQB[Xn+9(k-C/LFX(QZDTikF&C[$Q4!750/Y6[X++D$p1:Q@%!6(LTqYq
%#\or=^`:@ZWj'KW^C*u9N\`Tj_Goj0!Ph5&atB*6BrtR@88,6CU(QMB81dE,8Q!]K/To4lB6FJZB2rDZ5glYEd.6#p8KJfmk,_PY
%=;.G""tsi`XFsD<iL*ep6B/?9409p(0sRXWk)Ru#>b4;@b?e/VXl2UQ4J!gXeNl0@(,tDiaV=YnMQ5sAN3X?pAZNBLSk?g+CG*8e
%^!Y;DgJ3Y+j,qj!L1uG7U<]60de-R6g.0W)bj:`>/K,.=/1)h6d_iHAiMOr.%b9Q)s4Nn[=Lr0$2S"t"%NgVWN6O9AZjp9ihN.<S
%2fW?/q_o,MLo9Tu2DNEs<RAM"rP[X@`\mcU1Fa42M+P%Aen-4]W-*m[fbr;*_!Gu1qP\0oVXdKT[%!%TYMFY0L\'tpjJ(X;)`_oe
%Sg>F3C[TXI6S$CiWOO4c:?]dC1h!`Pcrec;L6SFD]TQfOO9)'N7U.j'rK*h\4D)g#+[*H)8st`8&YTbPqr]s+LKt>P8-Nhl$]20r
%T[,GZW/[=J%FOLK,IEYG#DZl2P:VTJ\#TF3-Z\jAWj&6=W+Il#X9)-=XVS2q*^mE5eH"9u_b]kj4F&O6Y,9_2Apj+o<]&/;%lPZQ
%R6FMM!J;&G$X#?r6L[#T*qFc<MqZoN*glZ=330E&)h*gdZ'!/Rgru"?CRK&3]hK1)Aj_'\.t<KZg)unZE&\c?[+W#rXA,m_EtPr:
%qc-goeI>PW9/[FV,V,j(N]QR&&m'h3&X#q8b[SX=LV8-b9%8gT:]"./AS(!t[J38O0\//qqQMD+lIdB[5+(_Q'gqVX9:/9K0pp@*
%hh]0<_I/!E(b741'kd)tT\AU$dOmn4crX[%X)!d\Y8@/3k84pe"XK53KUGFA,^6M_/"i[hY.i;Y>p[QWqe/>M>Fb=O`=!6@]oHV4
%X>O7$8^2lM.tK>18:u&o&13@+UBp^@:1kq;XdIQ@")O'r08%L2Q\,uE[]Ga_R:[-JASEM@/3rS!Vq\]GZho6&+Y`NPF+\/,j8<ZI
%rr(B:[#8,el1VgRIL\XdaV9IrH',H<57"PS/n#P#1YiG^>.WM.7u`Qc-b768::A;,S:3H",c3Ia;p'-"30PfUg0gnh\ImlDR7@':
%#-3##fgUTOP21Wh-jiG3L<X/=P8:.?`>%7h7rk+]I_R5TcBVB`bPiF1GhLY'Y=:S0Ad)I3j&^Er#lm+=L2nH,$oS*TLFg,B%g"Dq
%hMG^lbO\CS+c28[^bcM!6Ybq>8N)EmX1,)a$N,7%eQrs/^6Z6f-:J/6<ir6>V"NCa;/)I$+Mu+*bVHG4Kl(8K!H+*pH&JL,R&i>C
%2!\=WRA\U=\M$rp)<l[,?>RUC[+fM>N*Dia0j,g#=9i&_8_UC(fc^fp\"GDbriD#n<b2\T(8J>j's!UiGoC'nN,<,;B'P>d3g6]2
%jLlWY[?IPX&*4p-dY5qa"bW?:WW8Wh1=rCpGqDFB_/[oOYi=-M6<:#r;,+<g175"1-f;g$8`:k8fX,Q2N2'9[#pDcDel\i>EFk6T
%!^jjO'RPK!F0%ESB[LJH8u=]HeB.>rqkeRq28j/YWp;KqMJPcM)-M/NdE:s3U-fD!NFsJDl\;E/IRU$q@N;E\+Jc+BU+Np_ULrf5
%hFKg489nsNYh0)p(9Qs)M!DGKX'oGrBZ_eg9LKDCBI"O_RA(.)Lg0DCYBfchMGij,5-S1f6s0m=qqN'&#E0ci,'":c?dKA"OO8rX
%l]VE/SPAm`#T-/hX&QHWm6iu*[b\9WJC0a3TMCt>a(l"b=\?]lq=Z!LJ9bF1RktU:'l%T_:i_M@em,'`c*5b]\(^3%iqp/sSL?re
%_G5*=5iTrirU6n_C@:bf4d$H(3Kbq0iWmK3ZqK#5OAlT>imqP4m#8,k.O*@S=,+U4>cC3h"/.5D[._IHP`]JP!/-ntN[/]*QF@kW
%3_r?d)+J$KFT9`\eHVAII5Qi>$G7Q;qH&lZqa.N1n<V<HUO7FRL8qCQZJ8-9e_\TGiC;Wub*#H]6<*Ql.;*5-ea-;#+P)gCOo2.=
%3_+9YhJ0d8eneK]9TR4m+Y0qWnC;;<?;tYgO?ofV-S8Z$S^eVN/;;h$WGFB46(o6+Z&1CfXJS'1qZ(+nH[U/I+V\$-QX!M/M8Zu)
%4Z^7VgZeSX-'s\X])6F;$:%Q_ZGskf0o.+g3jQl4HI6=];'d#.,%8_b,PcGV6>:a.GM3S.WHWme7B>GgC<FmhDpKc]H;VqIW1r(G
%lNs'd_b,-j%&RP#Yk6+5MAq29`@N)%drrV#3_J@^7QU4ki<95\>cVHq.<O`"<UL1)5(Q\LIOeJ#@n%h,8IlOeDMW=U+5E%OFj+PT
%Au_kn"GF4@+*/t[BuB6o]m(CB16(74C.\$rh,Vo@'kW1KVNk_0\`rr$@4`608i]qNdh0a@lJ*NJUOr5Th%H&VpfNEUY(.o,)=LN5
%L48qA%VaPB#JU^n\9pehj"rkhMNuXq2r81?8IgtUbH1bZEqofT]V5fMcON4ie$:HIpqrpP%B3L4@1LbbOg6Z>Q--M55"fa\Tj#T?
%kKYUaHkjg7,6d:+;?X]';3..[e5p_fq_hju1>hp7e-a&q^9rXT?oGr=Wu2>cXlrp9d^seF"5U/g#bOCI"BX>T1f@Z;-n3>7_9`"+
%Peocg7D=4=pn:E#4H8=?n!fdFPski,D%A$o]7fXKJ6>iciaMng@[Qs/]i_YM9JInm)M8c9@dM<!L8%pG*h]mP:^):Z$<iH'QZ2(/
%=s\.$CI92Yn&PUUEt"d+"d$Yt8,)C[5A(1m,PH$@+'0rPZ8lffA=)iH?D5+<HUVndfIMqHUfj)Lg+6WWIahtAl+_71U6Wu0)Z%Qd
%R9s@_f""bZH5sso-R^(?<nX9>RVCL?9dhD<m"`UhU)^jI3ri4C;%#8c06Zg'N^=<EjCs\_I9\sG:&<.fA5i[Hm$L*L*H6$QX04=I
%&".2a5!_qX;4?,dX`7i6qqO*5!oL>$*eaG\4:sA-$Bcd$d9#:u?DTA:^/Z7U9XH?19*PG`ObIlXI`k\((2r6up8%XBPmiUkDuNsK
%6]^2(9-G_e*VZ[I@$'-P!0br7SO>YT9l]!>iH&fnnQnB(IbE"7:>W"6;R5=/ea1.J:bfsZO_A\R^`$F'>u//#R[DipE0gB)JGa:B
%J0jJu4\1$-&WknO$&Pjd!qNsG@IhUad!IB\j7(T9F]]kAlU16d$Ltj%eqf(IZ:ZBklT0;=<BM^Hr,H:/;*$K$iM\FOJim*?P$-rq
%pO.qmbFEt3h/;?Q.2h9XS=QjSOq"Z+LfuPnU>->;/r3kYqb`$oqWJC2[W9j[eB!Vm]8Xh[]@u5Q1M2RB12!67R?r3r`(%A.];'bC
%]sIWpk0KN?R__d<p03Mu2imEH#9HR&M9GopZBh.KUFVdN-p*)9P,OcL'p.5Iq"b:-mqXVEWWo9PF_=*@TP<Q&*jE<sRb4R)"ak1e
%qq<^4j*R#/,CGW'd27Augq4S=?bPWb[bZ<KleC:/^K(67C>K=8+j>*H`McMIg6S;lTFP>5a^X_'c>`JjA1#bG6ih!MO,(%Gj`SK3
%lUu<A3rm6Sk_AE.7K9B*&Qj+rYPJFQIP5>>^d7Yr<FG=4..1D##4Cp[#dX`-Z!(1DTGcnqgec8o:u*HM0no!SO0NfiOm!#5"h3?I
%>E`sKJ^LJZ2+ie!d<^#gMUPD80;WkSQ"P7"PA+[qANE%a-+mj(hbC-3Dk0pWm5hMEZkKU+q\`C\Ik/$(n\7sr]=Y1q^*R'$&C`ks
%I].eQm5F^lX,/_`d&KuMYQ#_bQYObiQ'4%dU#YJl,6IArG(BJk2po)N']ht.Uo`3Ba(E0:RCn2af7a@*oBO"O%Dok0mCo(7TE;jN
%*/En7*PqP[fX/lX5"YiR<l6s9]gSo=SopM2P60>kft\]l36(@Tp.7`\h;+OS)o*EDj&+Ndop=^DALpe!URZ\I+C7(_X'mSjHq146
%G+O`bD5QZkF.'(]HoG9,9eZ*\ORHfJE0]2&g$ss/c._\NgUuq8qjH3JF$FlhIVlE84$N+/0CK;%^MsQAW:3Ct<]ErR#Jh&H]AhQA
%6JPY"G4,fdmn/.TZD@85-%6[65t>Ji6\am=E9r0ai)'K.%)nOTP$NJP7?Yk$.94`C:I;uf;)G)I*>t0'OHb%9f$*+N+#qmr_[<``
%IiY@].e@#Ols.O$`D3Ue:rUUDauXmMr<9[=\1))N=\\E])E7]j:5\WPWF%Yg>p86r&OefBr=BuM2L9787V[1U1OZ"_%&,$$:!b",
%\Y:Xe,EH_5jM^/8faVXN#P(-?!@2A)%jWnB+/2be"=60u^_8R6QShaP9bTePL4R%dSQ-:l:Sf4*4B7"YVAc2+AIZ#((7A;l,\JCb
%!L@a_0D.(Y&YcQL\n5]U7R;s$QORIZ.i-.[WmuS5+T6d(`XZE^Q%/sIr6/oYCh]%7jtukUKCTY:Ct)H36pC"NB$u`/%>)S].FGIt
%"Te]PcmP/81,GY<0d($C)l:7$%o[9;6SQtd'Z.51QI7WNHRZLjF^tlZ_(+!ib-QCsQVRftYhZP3G[sY`lkd&D"lT6Ma&jZ!ROgN*
%hYKau,q!5(3:Y?]c;I[h3&dgq7R3d5.(TH)3(aLID[KqI#4OA0[=?BF0Z(gh/A?dk.T3I7Pei;I*[6piYdTp6]ni+5nFg=JJ\_5_
%d@b)4WHt4VR?A"9R6[dJ9a$oW<991tU]aLP:Voka"d@#f\hpFTq$@7Mm*u`'+_oM;/6?VZZ.-rR-$YO&1s]Y\BX<)LU/i:R0W-i<
%UrCR,=9<q3\U&sN<>;'5"G4M+U,!Q'JdHJH438uIKo@N?1MqiW!#>0T<GC-"$';ZP`:+1Oh/6WGWeK>eWbB6j2*3,ga*(St,[<=I
%IUuKbfbR5(]l[MGT1h?AnmgYgR63Elp2W72c[MTX4$6A,^Bakl:eB-`5iWS)]m9#:cUAfkBYgod39hh?EsDE_?/R(r4f<H'KQC!V
%064sGG9@YGeQnVq'",SDXI1I[722J0"g[(J[5q4667GBZe3=YU^eNRr<k"8Z"A&41UNXKK9nDg$*50$4JLak@"7dF7p^<GH&:=__
%40mE\!\=PaNV%8l6nSFU+P)N$95k5N?i6m>Pep]_2h:FiaN$Uoa;WUMW@\@p6ij;$0]hT<^c5Jc*MOc/!g>>UL>'qiJgkE17:M_p
%#[cX-*m(KtQnA"P(#^>odK%j+kidBt`;gOhYg(5\l=Z:?.C74f-EPi.db;?Q^G5,>!:n5=eM>]*6t=3l$,c%(GX9Z9?d5TD7$Qg@
%<Lo8t)n6k5$.WcV8C[!k;581E+MT_d=l0A`QIiDYA@!5&_KA:rdX:t%kc5Yu/)#sl-NG$95eg(;+"T-5E([<b7fuAT'IP`'POq:t
%''IO?!ZW]0W>ZTuS$J=fCdU`Dl9`+ZoEUaAPg[j$_kRRMl2%Z'W^XW'f'7?Q_Q?dK8r9W^nnDsh;K^a$rX\6$5XM,OqC$2/c5\`C
%=h+FC-ZsCE4PtVT)\:-Hmi,K[1+K!RnUi0mjJCi#)#C3N-*F1Zf,(B(_GFEX8TW\BR=q%;Srg37K:#`e/ZYZ3c9DK<'5^-6%jiH+
%(#uc/^.n#kh*;@J6$_g.Hph&d!qqsq_MG$oH-^#EBk!?!4,?EXb5K&<!ZBj85k&cjBQFP5qEXBOM3TT).'1T795E3$.-QE:9N`ct
%F>bjf?Rr&UU?G01e#IN%O`ikCpA]2_W@qOF#;=Q^B`IdEn&HC<Rh:GNm:20Smm^TB\;pG1^E%U@n&?E>]GZ-Rn&GBN9KqK>qU,]&
%r'^-AYYF>8Drf(hN=-,lQ75JR'NXf;?0`*$jQRdT4N*bp9VT#:B29=H%9mP&4e5G8@D>4X4<68'B/2.>6/%8)AM:0aeWCF8fX*HW
%^ob+QV(AF8P[L4[dcSr2K<tmDIGIK2YjMFc<=3jcXRc-/*M04:P:f=pK<oDH6b:o@kOqpnFRqUS(%fUS?aiTm&*:bP5.VIo/\.L,
%E;c7^Dk1d/c.8'iL1_JY*/4(tEk5J4B.7h9k#i$i\$WIUL=GoOQ_Ljp>i(C3?n/(/EPl-p(1m?V3VWRQ3/-T%m`UsW63QS;AJaf9
%1/L3TH$rchZH@HDqg6)!GB`'Xs*I<bKgD`_e,!Qp`+Z(5KE#W'PL/1^SNH'NER_AR-R(GVgPe5NMb%J!CW@7E6lcr/EeL2aJ=EoN
%!^Q$-B='#g."0@B]e%qiX(_PALR^NE;-[oa0L+RqZ11=%?AdC*Ei(b+c822o`<_\d.0,aQb&e=sgmLa4gWi^Dm<0;s),3Y.d#0_;
%kC_L'+HL':"oB[N";tu9jg,ZB3)2ZF8`?CdW[gnDL?u@EG@HaK%,'J;$;+Y($G<fBTg^@.e8L]>A:1>g@jb2@'3nlQ'bL)C^phNb
%"laR"S%$1a$N_KW?6otM$t(62g5H5T`FW.oa,hTUKcmh_Gc'uGH@2Ih>Ip!*N%l%-6GNWA;4-/L=eYoLg5+!:1h4('M=cTT"5$+p
%Ws'R^p*1nu52Im?pRi?X.90r&,m\DQ7;PakQs:LjhK\$NJNIZaFSJ24"pG<8U;4;4!s`KE"/1F0V+IWf=`J]iK:Z68_6jAMnse3X
%kIMfenXJ.Y4qt0L8[GQ37KJ"ghTW]T\,#h1hVgL_-+p@r5LiiRfd%(uVjX5n492us8M/l[!Nuf+.$bn6G?@ai&Pt1Bk2(b#44_*%
%S!5kUposW`!t<$\Fb[<#,.^UG6Vppt;-Fcpd0ZC83>QS%B&Pe.CS_%#6h7N)7(!p]_^96Qj>HcQ2ehTV6JXg,!+#MF1Q()#]^OV3
%TY!M!Z?l^1ZUN;sDEEYoeDd9-E3K'7,D=X059iE"T^J\!&gbTmgSE"J!UJ5+=Vq/9YkpnB*f(G3@hqpVF[`17L828Q>7i8q9/)d$
%J&X9AX"AR$r(r2bS#@s;n6";58R'1)mf#\B2XpML`m-c"%Zkc23fG0<<J&<Z1`ICcAYLK#lW!37b@I6a?T-_q0'joio!_B)T"[tr
%;?!E@ra,.f2LiPH&KEk@31MHdbRH70Td_%+rkDicji!YI!!&*3gZbtJ(kjKn&@m!eE)]um:NMGKmL0aZQmZuXC)h[`9q<US,<[&3
%7arD`*=-K+jLRf=93n%nhJ>CsQEUaulp(Xb+R(JZcSshX/F@3"gNDc5kBpk`81D:jNkZ,oe_S;6IQ-t`?UeD7m5k7Cq/ln%TAAW0
%45k&m+MZ3SIXRanaffc*gY'pJc[LGe=LV+%>KI=2S3Y=KE/^!3S4::6B1ZmH8i/fQ1BrB%3e/1]`WO'G.V?JD9L'G-EB'a>]72kj
%$je1[V$uR-_%0T))28S'?Q_0?-jA`H"2$e?%Nlc<Y0s=(h9rUiL&'?']sA`!48)j0f?or_1B%nnB0`Z8cGB%WgFPmESHm9?1ElR:
%/gS3W`bfqWrLUg%T(BTBO=Jm@[B2I*:NJ\f$1.X&dqMT7i5=)m>,@-hl0`!9k(7so<[b8u`:DXhUn6V<J>Vs\TPYG_6L)7T^Lgbu
%[sMRCp4kf9)u]`,fT#o>:[D]OYU=U8E;]&\$\pmMRtnnQfZh?C:[I6'YU=V#ESK=D\gK8'9m0bc/*'.9,\ZZO^QH>f5q9D/#)$p8
%N8F,DM+UWNC67)PSaDs&Igg$#I=4JHql%=U?p?5`>d^5P5l4tKM\a-_[Rs&#kQX0uQS5=Bmqk/A%(jI0JN*C9kU!tR^?!o)5CRdF
%!6Hlm!:b1Eo],6o8:Ht_]<8mFSZj)D#lL39!o3`!STY'`Rc8T?i-6@2]Fuc8Do6jKif"lnXk]eI&dLN?[R-Noi]:t28nP/Mg'VNF
%bi_d$?gi.gCu^!"$JWWD[_cqK%pNI$qM22W)unr2[i%/AL#!a8p;1\_%XVVC%u7j&c,<mphr.m$-TNAp%TKo.LBh%>DVqEsO?RPQ
%>UY6gd>K=_eTc?c5NG#!iK^d6q\5;sdTJJBJ1IHY+K]--HbV:H1+n`g;#2C#%+2p.T*mWNpbQ"`<hke.lp\rKUfE[D'a`CLM?r8\
%eSeq$L0ReA_m&V1,K!2P"0kPTb&ECdp%2!WWQnM-a:BMu..Y95ieTZFF32Qsc5gp\(OR55R'oU+&ut>HhFWJGI=dha4<>VN'201o
%?UuEl^mQ[R3_3Hq<q-iRT88)u.GXFt@[&'%K:%9oM?34g`7%$Q2julh9,B-`8C^rFA10e(fG$qA7-O<=EWpN@*YABgHpNU:Zl;sj
%`%&&WOqV[jN%,tS&b5H,$82(95oRW86HtIN+^[F0C!euuhlL^,Zshqg%*qL:pmBJCJSGYdY_7-`XR<#6EtL(;83d683YfFb,6p>M
%K+qG?a;>(Gi[!Z1_88ca=JM>8ZCqJ[0FMT5B-A7=mQbT(9KB6WPXi5@cBYChFma.u!8%fL@-;PFrKM?j\.'#NmT)ub8XX/R@!p0h
%bSo&=/MlM"3hNLDA$Ou?CGru!PWdq9Ol-P/]ns**jMbcY7g>]k>9)puZ3P!;C'gW.3(=t_0<Y[&4A"[:]VLN.Kd[qAEPpnC(SD;@
%GqY(q4WrOoTaM&Lc2u*ITI8\GD@YDa1''Lf,ruH/R]O@J2*uF$#D"4+#5)skH@cD-gg1+7=p+QTUt"00/@J-Dr)$oiG6=bTdLE=l
%Cb>hnOc-!@=J$D+=(a`,">jQ$$sKZQgRX!?:9!@QK#S)EBd>3Rb031VUidIIS4I]DIb7m^OFiOP.$7`]s,iddN`(`Th6D`0]9t70
%nj(,!.]@EU4PRZ2PR`kq\3QGU;,^uQ:0>m%9A645FT<mHd\G6p8uRkX5oj%g\#noiP!n^'AA-dDla%\=Gs,\jaFsk=QQJCjVq6:0
%HgC:L<lmYQ;V%kFP#*ff5DU[/[^)1a+*YaOo0)GR,3.C8%ZZs3"`4UV4sB3J>G`QJ&MWR0W%()=Kri5o+K(A4)UO;6rh2hM3JkN]
%q6L'@fDY%UE6['j>P<Nt+WC^Y;dbTj'"NR\]M$bA)M=55(cdb`HjHd38iQgX,?`D:Kd-tG$;[;e^sC$f;0\,U\mDi0i1V!nBA#4s
%m;O8Xe.%.Y=X1h(C4`a-3pG7tE2l7Fq+e0t+rm7I#pms7A;r'He6og1MF*0qMpEf"!#YTfAREN)gsftVaWggrC)DJu9Q]4Ze>J\X
%?tUF"7_=@3-7jUf0=&"iU;eu(WM)q8>=:l5i3W2kGA:-<9EcQOl.?;7'Sq'sCC3fdJ$^*q.ZZW$<+)AObZI8&&cp)-&#qF0pVGnW
%UAUglq,N+iYGHr#X5b%l=h-dOf2+b62eLp]fMP.WSE8hBVmNFp*hk[#=lXW+kr_tN%Hqu_N=M5A;5erDF,8*0fr[cG)b=J8DJqp<
%U',WS'Y)Fs8G]V)*MV<^4"AEn1?!Y[U(Ya\Eb<!ReA]%a!%.h0$2%A/F\P;hPTLVVN+&1*(/VL4X=0t%@LDIK5jpTL=&gI81L17U
%P;sg/IZYn<Im/U9;oe=H+0=rtH!Nc$P`DGO-$FJn(aY9D]8E88*Q`GC.DnoPS@m4&WDu;%3Nj-kJP)t'+p"nuS)jG"eW4a+F`&Vj
%?d]HufJ':#Q\j#:MBZ8+db"'KKF="k]!FTAQ7_n<T%2"<\CHoRG"bKNpA3WahK5^^5VEM<Ng_3j!E>:UCMD)`e>N_<GqG:hJU1l2
%?^=6Y):u#RhKIZ6-b:Zpg^U"qD3kW]hn+`[I;S$)kD'*2S=o:c&+96Ia2^5PM[<*@JWqk77iKHSJ.;RA#kn5gWtTcLSEJZ$rZ%sj
%[V@:0;$VA`3Z&[!VKZ!TW9#.AL<g=G3R'lXOt#]pdDk:PRp4&HYPn0Q/ONCin93G)<p_aXPE/'B-2+[@+ja=X[Q^\b.a$XoT424f
%b%.\]H+`P<PCe=M-/TG"<fLY.E:Upk;<l/1I;7fo0/b"3YQcrSHKaXfZ:l'pJn1^(i&V[G!_UiJ=$NcUhXV=N5-e%o'DGg+04s*N
%jI5#38V/-++X:ud1=[2o7D*rqjrp\/<>NKb"1\4`N_)Dmg@o!9KH5prdE!(2L,*=iLFQC/MDD)`gETH@Cg,'4Bnn[<IjA,/KLA3J
%RcI0*Ong=cS&NL7`1Aul]7WdE[39fG9;120RHm%]^3f0)h]0fpkk+]#L66?='kCI:B]?<@)W8Et&?.&kB6P7ZD4Yn3&5b"u=Y*#8
%qVIjooU'Sb!(oT#ZM#X95!=ZOZ[*+(@JiL9*2XVA]+lX]W28Y'=3">CRRo0WF_XKQeL3+AbnF\6M[E8qfNk4^-<UhY.]8A?0fLZm
%l:)sr9GqN)^eo%kMT=I[K3eO^,jVFF8%N(AGu9H]2d<KoRj`"TOc.e0*D&*1D.>\iA8pis671.R;*B@KQZ\Rs2YXr8DD@lR9tT2J
%&-9_rUDR)X^YGqW<>TP$?JO<$ei#ZiOQVYQ'/4R=c#EmJdmF.#9[N)rJ%UduCtd?7f6JBP>srUt*MqhXXGr%^lSXe5G83,Je]RQf
%f%e_hc/k]X-hN@+W\;o-6KoeY>bs%uGt8l_=.iuImRWgJH9C]=E3EY6XpR)e,R(fL"AQ<S[r.HEg.CulX>Uj[R.mfi%R0+?i4k"L
%f"hR&$pI9i5o9k>H.KJ,JXlB]qlR3f=E/Ie5S;F$],d3N(jX)r570*r9ZXt5;K&[if<caA5QG!gmYW`Gn0.DoOoRmGB1`=IP"rFl
%nrSe"khj+C_=s62SK_4W)pALjG*VF`9p:a0?h]^RQY*:=pD*6#@;X8p\bhD8H.p^nh-[kD_nZ/N5Q(?9hu)oGQCI1.rp]*#r8$s/
%rr,^:?0\VCr:</Ne)-^eG&d>=DrQ[MrYsbWnIr[)2]@(s&3WlZO3W,WH3[T`_94nKffNhK7b0gK>!&sBMTiHh+C"9S\-Xf=Ii1<7
%dYq>m6rcr\GCoO>o.(BE1]`DBRCeE`;R4gRbpEJ!!me/-%1#T?++1F32PDFL78&3b%,Zs#\0C0a`ptt]BF(FA$tXYqEX(([p;Y)Y
%bSg84:ok7OOb.c"b:cHq"u_dY+:BtP5)OOja=<)hbc$>lOT870`lfbN1)^s:+6b=IaA4,%&8LF1Ub!\Sb`Tj6Ypd<hf<h4.;0E(L
%0HSG[@J,65%Q->!XV,al+$+e07XCDGKFt<p(#_cg9(3i60;0V\Po$2(U.T6bNl7$d(hIEd/SBU9[AXYT54fT&O0a^G6!(op@PU,P
%J\;d5i$J0!$"h`'::Fn=1iRu"9(/6!;G6);-;+P*i`uSWN#F`tolUB?/M/mdrlrc>PAKJa`b#Wo&"!Ea4c%L'6g_$#0n%Oq9s`Sn
%B4$[<W-,8Kh!je.!MZDTp^!DB-o&57i/\?d@GVEceJ5qEVGMk\\B/Ne4Nko^6d.9?r#"q+X7.DOoVEL_AOX`s[h$-eK^"APmV[q+
%LIIbH2A%IsZ,r:^MLj39+\'[L2f(;bn>0'+q&t,rJZBl$cmVbdHD_#k?//4p:DT.k/=8hA*h9PN1:&gTUX]6dZRqrY)"dl7Ws8%u
%89$I5,?30//!?V;+u7;NgGQbS8]&Fc!Fqe)%3`jl3rONM'UQ1q?:jYJn.ToIon6jA5hD\]KZ?^C8hO9,JoF1;j\sPlG-#Z'-/tX]
%DubL($G'0@3-)6*&-?RhZ:$[P1lNP'rZB2;"^m,J'VPS\U1/4lS4i7m72ga;_\i]Q-^>hCE`a62Y^[5'-A4ad4<[bG.5&G1d"#p<
%@8JhE&.'7"RTalOg!u'9[I9\l=q)6i5i541[qN")U\BP5Fo(X/K<Q6'C$[W@2Q$nj1FfP?1D$pNOB;RG'?Q,gMhZRh!f#[6q'T,M
%oEed)PM6mOdi=I0'p3O0N"_plVu:SM9*A*BeULR5+AYD&)n&ub'^Kci[;6EVIKO^GOm"b=hhbP7OHP`+Gl5b35i9g-HkRaY+d$\E
%QN!:]Url7pCA>n],Zs0.#rj$bRik9X6lDs\C^OT*\_sjgg#Q<W$kVIFNfcsMRq*YRK-QJVaE_G(HPT;fe2!+P-#u7dnfKcLkG7!d
%P%!MW-E1sf-NIog7"_gKP"B(%Elu#&0I%m'U,bb/!<WngBit96+WXIY,b2r+M^2btp1>*tV*l5S!Q7bdra8.O*12t4G"G:`#iJc0
%lgl'oaQ7;CmQqJUfBGdi!HQ'=O,Ou;P</NYKRp_=J3$alr>C#.JL:tL6lRliT#Sc',1_H\Hm0/F=9[dP2che_<#r5">Zr:CUc!k)
%@pS0:6lMKuW1m9WSl4qiJ=[lQ92XiGL'Yif;:M?<16=BqluiTO(=OikUa#]2i/h\$;4DWTetr)[-[T?d7FM:S>gH;QQ53*sU)s8P
%c9++qroL/\T8cR.MM:GPYO@2rA,E^.@EitOgD,^Cca8N=d)O99!HN*6;+,TVFbX8t3gh`$($<<>M_>>"BdeK)!If.KeE+aXKoMY5
%Ka#D\Y]k)c'$N!?A[``[aKK$^B11UVmKWiFBbh%P9(YC$@pK])SId+l:4.^U6SN:ni%g&q6`<D4c9lp&%_N3g&T-V@r>#J59d!7`
%l7A#%>R-,lUC+g@V&o[u6*-!)A=ntS.dbK(E_c$""pD'oAj"bu0[*7Wq6":Z7U<*7FYs5FKYIt3@Q:uh[(p+ig'IKC9sGu$N2Y(Y
%gR$sbWqWA^CLGC:CnHe4+I\*h6F?YteiXQbn^4ou1(4.:d*SUBT;^&F)'SGEAJ>%hK=u[_!2MUrQ5an=%P7pcXIYUB@c^J$8-pef
%S>^rhUJFS5='/A8f[QG&rUeXr^=bCt5MpY^api?sRpWm/U\o3cn[48V^j"V!q%SBl7\lupMQaqceq>fUJ\=U@Yus!;,&/RZ%hZ4'
%U_5*\P3'cmHQ&DEdr3HLLZAS[*h#;2X<u+VN'ihrELjjIRB)GCXL3kr<9*GicoK&j3^&q5+ZOrd,)4T06nkmI-AIR?>(2Ad!GR2D
%&F;3gH\OJV"FIT:3m#B8L"ILfK/ZHa;q(:hn6&^"JZtMm"Vq9.9<#<&&T0Ed#@YYl7I^#n0s8?/WE=p=)hG;$bnMs?QqS@o.>*LQ
%gq<8BMG'<s6Aq\+OgUeX\f'k;$>H>0"e-Yc';(=uReFfnL1?D(d,c'u!YE."$YFO'BT#H9@Z+6gHUt+d[2Z%4`k]2<!8!<\8Y6pi
%Z'*$YD#3FZ")'(Q_YAsc<tVY6QNhoi9`&Ro##;;'HSWh>-89[:71]ck[4Hh(?4-!4XusM]=7S<oUC0i_`<sM7Cc9O(5j<Bg$!%q*
%?:d/^$-oe&")bnCV=,O2^=1kEU]Fgu#jV%j-<(*L%Ri1B4U>"j3@,&B(<prC*Tf'2U_@,L&,=/=BC(^2:rmIs,XhL7LgnWlL;WJG
%7:*f*&g3SlE7'5#5hT<IO2S>C3+cY9?P$.GFrKqT2fl_)4T:Lro_-`:5(q4N1)3XD9p`^l-,No'`DmZm'mEc]9VhS/'F;1dOLH6D
%J^D.#B66.=>XYJ]s.M+UPYsbSVh&)Ol=#3I7X@dj/PYgIH/(\'T*YW6SK9fPEG%7W#3'gQUgSUReg2UgEjhuZSFTOqaJc>2eK3XR
%6/0pK3#hY$KV5^NC'8H1k[/W#5`4P1Lt\q-+uhS3BuAdcVdaS+<l/Lb!?UP\:JW1u4N8:>DQ7s>)hr6]'6sE-V;;%Q=GHZqB:]GU
%b?UEJfTR`jm#V,24;3e]N7o/0!_qZC;TGLFGGBl]SNF9AR'+>?fbjd3j3UT$I>gI,R\O+^PX)4kB*!/jD.bQAAiJh*nX@$r)\=m;
%>e#S^CHEu3>3TX0jY>r9FePtYfZh4GHtj;RUnIuR*gH#eYuk_6>Ng`;fJHET7dg=c)EM^ACr!nkM2m2(`SP#oA7uGQ.u"X,LkAI6
%`u6[R2*d^/X[Q._V@mp3U*;K/DTg,j9\0T\s(m=gJmClO).j%=4,&BQ=EY-"n9Yc2!otGu'Z7sOSVG7rQ\(h0c<,IidQ*.\oY:U(
%20:,gDMP(/IN[*FT)i=F_a<k+E38+X!-e!O$l2\@honTi`%e[5ETJl#>@fQ4d2pZ!)#KFf5(+62,Yr`?Ig;n-!"`,=-;+YM(;eD]
%e[]RlQ\3ZXd*k)+6biC3i&Q'c'MmV';7mRMqf=dW&iRAo2WBH`,bl'@f,V^E"nlu$ZG6U;0!60f!(3\-_^a'2.2ij/*32G(<1Mo:
%[^dr8=<Bs>XGppl+tto,W#.+d+(<,8f7M]0KX0OS2%P59Af_!6(+R<5"9_);VmPU"*H?Ho"XKAh,^3TOm<*.]]L1g;g@YO/-`stl
%hg/NY2rDWZMO"QFW(k6\O:E^W,Yk"sjZ"t$p!Pd?p!$cif<2c6Rq_`QiVZkdaRrIbYBSrS:#3":].SK5Qg+Bbb$T&Frpr(rBUNR<
%\h[AH?6ig&;3*a\JH^gj`OI*["-e0")KRe^O"VpRIM>R\3Aodg]\0Kt-a%<2q9lFZnV1Y\l'#u`oMr?qrK-mHBT!Ab8oS(]<70qA
%ru/e>OPYlBBhglN2E!2Z*7@PiT#2?P_cD&@PL?NH#h0;Gl-@.j@Gq4&@0qkTUX[pEZl(VCUC"1p_B(o16=/n:AZ1a]JeD$Vq,(=4
%Gu]uKkrE4UW'#=/+>GjW(_/ImAaU>D7LF\:>7_?@.O`F"lC7M%JqVe#>a"&1AE+6d<^$XS#_;K*TV:cH_jU;;V)oi(1qAd<0qn%,
%JUU1,2YXceKi&.65\2ai2kfVFV/"_OXsd7fTX0tk$5-<ooF9JW296u[!PuR$6S_:uLmH:#Fhck@8pTGp.]0)/mEJUM/AmlL*t=_a
%\8VrLS0D#`B&-/BqW,n#T[AU$P]d(b8EciaB)W]fN"0!4dqq4jf9PHabSEmnqkhI,,+V)"LA0%[9b\,XeaOVs[5l->?)Hh`$@PT)
%@+c54YgY10g%MXlo6PQEjuo.%XWouIYV'(Q=ERsqqMdY;lN;4leCuF%(IUF8Ne4SFV]23:EjT;J%ni+#9INLOj<hVUQ?b.rZS3&l
%4/[AC#=r5EPs6*io0kMQbn!ZhlT2pp'V\3'",]E(O'6]K.$GT"2ohX*FI/)i*Ecp_;Dbq=Ye]L(l:;u(^qa'T;d';il'U8''D_Y>
%d47_*>!h'MSTD>f&808PK_LP&73AIc(D<rE;INTC4E\0J2;WuM;=3B+OY^(42:S'Q>?PaSJS?8p9:T7Z->]W/KkM@VBVNQeKG@!U
%1ggQ:oZI[3H*FU@dPFCtFI*]p@1K<bIqBtenkg_q0o9kD<H?=V0e>[$dg9+$:dReV\S:X;,?iufkgqAV8a_-u3')7565/0CF(Ch,
%+qA06h\=tNV2\[$hfA&n97+f$;OA:m#MSOhEfr1uKKe\^@l9BhOq=[H8?dRT+\NZ8DCo97MIf+c,_fCF;+/.*17\!FL/Q['bba"D
%/1MC!6\g@5/-Dq]ZVmUs5-T:+T'SA_kT(tf4aogdSBkD7QE\NC!)7%4*sM`@nl`)g#WIOuA-$CU>dsfV)-,i)82LNFeUX:3a9:F_
%`9*WoacEbUZ>b2>Q=h)`p6Bb=<@Z%1[1NF4+0W0d+E/]GA;G2B,#21.E`ao9J@VfhYi.stLidWm-6WXc>KnB1FKUh6Nc]7(bX]Y8
%9!0Kmi0g:;M`)WlXb2e:ZmH>Y<1Q47RR[RHcitj"WTDHW*#-O"iAH3q65"TA@#g3j&LVW#5$EVC.I>4iMTdP\]&ojjKF"HtEZUGb
%[mq0#Kp0k^h,@p'l>kH5Be\2DR#Z5;WE/h!;kBENnP)rRT7?HT.F61LR69Z!%>*W+Z,tZn`A/`tA)*Q=)+51h4Bb>anSFTLLuNii
%"\):[T&DYr&4;58L#g$3XDF2:fdub;5Mh-3T.NBV%\MS\=YJ1Ta0,dp>NWbLnB?O]rA+s*IR<&1rqc,qO8,?^>u^X>:%e(g9.S/;
%^IVf)#FlrF8t..GWfmFh%s;=`.%Zu#=I"!r6HHDuJR;5"7tb*A5MY%g9cK:ljPWSHdlEePca)Kb2i,3Q:W1g"gercAR]XuQ%6t9H
%Y%o;d/+);-A0*D3O^FH(H1CF;I&W1sD%jcP]o:1af8\"fbN`$)TYG:lgAe^n++Lu/s*A2Tou@!sNW%HJql_sP?Z5;GhUm=kZ2],[
%s7OD2l](jYDX@DmS%i(n)LpBa<SC/1YZqm5>]*J7(cnn5!41A]'+M7B_6/:;f2*ukg.M*54/8DPJjX6%od7U&@?sf.%]"UT3gLLK
%/1=oBlU2%W+sBpij)CCl%7Ga*:ZPLq$D@pn<>^i$\=?:;`OI6!<gc<S=Pgc.h^KPMj]NjqiJ#'pOSKCq?>Ma:Yjk39[Bc-'BI>c+
%ZSNAO#Bg8Rg!!>Dc0nmTjXuj.Q=52+lXnqP;@m4=!?-S_dGZ0n2ikdp&3kVVd)m*(16^`<B@V#'C:c\O#aeAUK]@QsL6eR&r[BI$
%enMthU7.a.;e8#R8;JnC`ls#Qc"X`mFLDZi&JM@6MlbmQEG9=@V0rN\.+6/Kp0l/G,<KGA%70sJ[.EfLcU0&8Jnj*lGh#d>"T(G&
%*R``<QZWf[*,Q2%_jZ48h/'H^KISFS9,k<4?kd%G`bAYV^s%lb"j3-lRdS5<`D#D@<7p/t:8_\fIJ8jC7[hasH'"eJ[;&:!/IIG!
%pM'kQicX(&iIP18)fsiFEaKE_#K`]--9d*80PI!l5]P&0RaN(8Al&?9[-2iIdMIJ.T+q;URsKse6FY$"P)i*ifS,0'[!Q[nQpP*Z
%::Gih!8YJk/_dM8`l4O=;htTujX1:H!O\bn(Rqf/Xd(1^S$\Q)_q^[NC/DG:*^^I8/+P=S1(5XQ9'<eRLLE/a>jUJ(h,`gp!`qZZ
%'u'0>,paL'M&"K+\G&6A[B(Tdi*,Y7ob%I#QTa"$c*P_])&&`;_u/$F@I1T:W5E*#cU`Ur9@>h$5kKq?K-R>J;'1o672pgO";KU`
%1Od.1N0<fnCaT<K-VB#F@/5<HCZ0`!?:O"&mr#5E*6j>S>`?h'1ggLk6o#E$i#2i2(9=lW66>9GTGg^)Q%Y>!8@[?nOS3Ff-&\%[
%f+$4,d*C=eK<\kM-Cc\N[f1W7k;P/Oi39.WM[DtQp`^C89EJLo8/t(tlB?&H;2,P)6o$9AR&oiuBSGrHU'-%#@^)8U/lhDtR?&g!
%L;t8`KkRlIU<@,Xo[KK$513eX/kIA$qSsoZAQ@X0V'5<9\#\uR=`^@*mS4MB71/`lH?`.&L>O0^*%RQ8-GLH-,\2U0P!bUlDas=1
%i9TrZ5rqM@)gY@Vg.Mnk(>G`Ff_mgQ)63-hn_`QM;(;iQmIjnu:8\4cAPOc`p`0/4:9]ih#GO]@dKgO(j;OZr%APRVGb!B1K]bfL
%6J6c$K)lI*-nU3a*5qt+nEL?sMX_p2YgO=Y/6+`;WaXVGN)CmhhfAl&"@"U]V=:o>48.U^eU$722?8j1(ju)"rJFldOO.k'NW_no
%(O7colF[JZ")4hM8le.2+F=[J/IM97<3;pRRJr`'kqNj5.-+f;`*,lhnVffK6c?"TAo>?I$/d3cX#;&BPcY68)g!.EfR-"001d8d
%R`Q+D!%?A,4>Rn_/RklZXG2L-CL'HhHV`li#N<G1_Nf-e?2P`BhgbZmX(1G>@'&>G5;%HaY=8.<%l$3Eou$h)TAebtI^At4Ig,a,
%3/V.Ge]Q7E&>**dM[N)[]b!N(cN9dfojNP5(dr]Q?rDgo`d@uQWp-^iclqlsHitJ5r..cPT#BaaUULi:,>a8>&to%EAlc.4.7+/h
%lukW4V._]\`'Nl]R-'32FCQTs^gaJ[/dDRt?Bta\"Or=P,q:Ua!ttb.)+9DciJ$(fnh:Cgf+@YB=K3@1jKRJdUoY1t<#OPOi$Z3:
%i##a!=S`1<<VE4<V'-\+e[)4&b[Vk"[ZngeB>%!j1Y]`s+e1Mh5@EPu;k5CMW_=E,Ks616'T]p5go3^\:b+Ot=NDs%86T;Zl[iH*
%Wi;'j8(_OCkCO&:79Y.r3iqkLZ6Sl+AUS"`'!a-Y6j/mlC#MiZaa3i?9I`uBqShgb;&7Y:)RM4_JG(dC,A!9V)X.cAA7W*l"P5;-
%)H]U_Rj8RHd?jTYZ]bJH_$7rFL?KJsCnFDDFW-Xa&P3R6Lf_Wpn^gJ;J*$dJVLVG[E:7ofIkko/X=4@lq92=NEUD>`hJaBbkM,_p
%rN,t-X?gsg\m2@OMuA:#<Z8fl'kAPKB0kKs'J%>^b5N8?EG<>6D0*7T((7]G$Lf:u_p9s:Kb"0omg,oJbi@`!F$hAgAFS=T09GB]
%e/i-7MQu3o_On+phooj4b(*`#Fk?7Y+!5FQWqC`W`FA^/K<1-RXAf7p(lQI-7dTtO0Yh_ecjtGX_/Ib[lr0k8TuR6cgZL'J4UZon
%+WJl2@Pe'Q?_d\8QebmLBfmLiaom;3c5G@I<!83AK+JdjZ3p`%qA@<g>R7iA=5tNZ'\N.X[H-,Y;2gn1#C[/1`n(t*GW-)8DhE7s
%M>5Cu,HMW+DZcDg72!0/O0Y-\!LpKA_;U(pE[B?<F!"7e_&Us^;(q=4^r-[NCr.+Uc32oRU;C#L5'%1d$&4<3r.07Ye&W)_]Cc2X
%70/\,S"qc6/S;RgLl5CMB;3'Ij;N<>rC6nc!V.6p]!cM0)YB!UqnSE_.'h-Ir#>b9:UeH\!WW)bA/s]<3ZWJAXV6;!h`N30q!F:9
%8LF;+I86;gI_!@\FmkH92bI0!+(8u7Rrj6_,Eia!d!GkQI2SD?(6HDC!Ig;q+nnj`*m=MD1BU--N3>\E1>`Mh3]1HK"P.2sO3K"F
%9]Y!D.O)PP*koal3MVdC)i#]Z#r\D](LX68oPi:2pU*q;kMdoidb2EfIHu:=fsf64>5e.TH&imJ=W(U2rIF3J2LO`%'H,^MPBs2N
%g$/[BklK:)i:J'a"N%?/;t^I__2&s&#Ma3l7K]7UW`e_1mNnEc27D:AiF8BDIr2CS\D<4Us!HBU/FRK.\5"r7jbLH#Yf>ZNZG+&V
%NH.)s8,8Ls"r?Q0k6'&EF[jaC\'N0CgaJ(i84_k>5Z^u#hTK44D?fSi+V0%a,11'@+s<D@`2OW)GdKntSA5j3`i7@aN59O8RtbaE
%^d"OU<`&u25BsuP2o28P%pu.0aglo7AT203&+5ks.^o=qe'7Wp7rG6`.0%_P^fl0@<8bkW:'MbflZBeKmI<,:\+(h*_G5JeB6WC&
%F&st1k%0;*B$$_7*E=73E;oQ+BgQK)8V8$4+Lj)bY5oIur%j3r.%.R[BCaL2o#lN@MB7As*m)V'9(>G5K38n?QjP]Q,a(jW6ihBO
%f*;3W\&H7_M+3WD?$Ys1hJ*t':(H?=JM[TtX2BpMl7(iq_j`j+(JZa0BbECD+<\BT?5JLYg]cs'5p(Yr5TK9Ir^5N1iRM:/,IF>m
%<pfFG,s!pQ)g!!IHqY7l@@)%&I3,+^bXaank5W'%g]lcfbNHLHrZj/OQ`SR"g>NB%0/IB;"9.<.)T2TLFO:3[jXno6OuTT*]+t-Y
%Bji[PICX2=<s8pc&r.&%W\CIU__dl%'_:@@lWcTe1B%tCfbcruaSs$8:(.CZ(A\Q$*0-BZr?Q=S:T$1#AH6TdEmrfb[iTHhTQO;b
%RbY?m8&I8p7F_P)72'E'd?_kD!rOO&<@u22is'D;AjsFl&rL5-/gsL]1b@ZlJn(EoJE-l*0H10%?Zdj3^EL'F;L^P=N'=cd'ffB3
%$)Cr'"pYA,TRh4Ql[!rk)o8FFM=o.oVZ0'`a!X,,2sN;?OM+2E=2Hh-o&7#W\Hand6!?=74.u3NIol``=\b]AKD2.\dA7^URd"&#
%V2:RI&,VD=(2F&Us/n50TreYYXt@t@0$i,:41Rg4'\',!4pWRQD<rI(c9SJB'B)8mf:8BG3B,,,4J/HP]arjf$7j>p5&qR^Dj:V.
%7QY)2U55pbR3^NhK!%*,e&2=A/Z$?9:./%@4GXPd;0[7KK`F1eofTK1iJE>H*C*rULP_S&)8.!2[QJ:=h7Fh#N<7>7h8FE?`?%IC
%#\JH;7G7(lVg68V+G"q7&X6"bdl4&sNom_Ua5AeX!$JM_VVT1:FkgjMLHoqT+sbd@)Kd]M.d/uim&XYdh1#RHM-MN7CB.M>g9l@P
%aU:%&1Q)T`jIu%?`gF(*,,?K[I%"3&=cAcp1CFWYfafmn<47!,NpgUm'1"(jEFuKH$0cl*=WT3DS3AeA"]VAf7IYr-I[o)CeA,8b
%EFq4[TVU4i"FRk]53uJe&U]K!R0>`_0B\aoTP<6.,3\o-W[CY&)TTN*'fL-)-5H^Eb2'do:uFpgpbIfcH"'S$ZhG"rqajLCqZi_l
%h'2XM?e)pib<Pp\e*m=oO+7)s@1iG25QC`OJ,F57r;AiDs7jXlr5IRnl1b5Pa+rRPi=?d:+92*+:ChsT`uk?RkC<?gNt6a:LO].:
%8FY"&^i+`"QiH;7r8o[35I"r)mJ~>
%AI9_PrivateDataEnd
